{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FaBo NRF Docs FaBo NRF Docs\u306b\u3064\u3044\u3066 DonkeyCar\u306b\u95a2\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002 \u4fee\u6b63\u4f9d\u983c\u7b49 Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u3066\u304f\u3060\u3055\u3044\u3002 \u305d\u306e\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 LoRa Docs Android Things Docs DonkeyCar Docs Denbun Docs Circuit Docs Swift Docs Keras Docs NRF Docs DeviceWebAPI Docs","title":"FaBo NRF Docs"},{"location":"#fabo-nrf-docs","text":"","title":"FaBo NRF Docs"},{"location":"#fabo-nrf-docs_1","text":"DonkeyCar\u306b\u95a2\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002","title":"FaBo NRF Docs\u306b\u3064\u3044\u3066"},{"location":"#_1","text":"Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u4fee\u6b63\u4f9d\u983c\u7b49"},{"location":"#_2","text":"LoRa Docs Android Things Docs DonkeyCar Docs Denbun Docs Circuit Docs Swift Docs Keras Docs NRF Docs DeviceWebAPI Docs","title":"\u305d\u306e\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8"},{"location":"#? Environment /","text":"#? Shinobi_Environment Overview \u30ac\u30b9,\u5927\u6c17\u5727,\u6e29\u5ea6,\u6e7f\u5ea6,UV,\u660e\u308b\u3055\u304c\u6e2c\u5b9a\u3067\u304d\u308b\u30dc\u30fc\u30c9\u3067\u3042\u308a\u307e\u3059\u3002 \u5408\u8a08\uff13\u3064\u306e\u30bb\u30f3\u30b5\u30fc\u304c\u642d\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30dc\u30c3\u30b7\u30e5\u3000BME680 \u4f4e\u96fb\u529b\u306a\u30ac\u30b9\u3001\u5727\u529b\u3001\u6e29\u5ea6\u3001\u6e7f\u5ea6\u30bb\u30f3\u30b5\u30fc\u3067\u3059\u3002 \u975e\u5e38\u306b\u5c0f\u3055\u304f\u3001\u4f4e\u96fb\u529b\u306a\u30bb\u30f3\u30b5\u30fc\u3067\u30a6\u30a7\u30a2\u30e9\u30d6\u30eb\u7b49\u306b\u642d\u8f09\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002 I2C\u306f\u30013.4MHz\u307e\u3067\u53ef\u80fd\u3002\u4f9b\u7d66\u96fb\u5727\u306f\u30011.71V\u304b\u30893.6V BME680 \u30bb\u30f3\u30b5\u30fc\u30a2\u30c9\u30ec\u30b9\u30000x76 \u30ac\u30b9\u30bb\u30f3\u30b5\u30fc \u52d5\u4f5c\u6e29\u5ea6\uff1a-45\u2103\u304b\u308985\u2103 \u63ee\u767a\u6027\u7269\u8cea\u6fc3\u5ea6 \u5ba4\u5185\u7a7a\u6c17\u8cea\uff08IAQ)\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 IAQ\u306f\uff10\u304b\u3089\uff15\uff10\uff10\u3067\u3042\u308a\u3001 \uff10\u304b\u3089\uff15\uff10\u3000GOOD \uff15\uff11\u304b\u3089\uff11\uff10\uff10\u3000Average \uff11\uff10\uff11\u304b\u3089\uff11\uff15\uff10 little bad \uff11\uff15\uff11\u304b\u3089\uff12\uff10\uff10 bad \uff12\uff10\uff11\u304b\u3089\uff13\uff10\uff10 worse \uff13\uff10\uff11\u304b\u3089\uff15\uff10\uff10 very bad \u6e7f\u5ea6\u30bb\u30f3\u30b5\u30fc \u52d5\u4f5c\u6e29\u5ea6\uff1a-\uff14\uff15\u2103\u304b\u3089\uff18\uff15\u2103(\uff12\uff15\u2103) \u6e7f\u5ea6\u7bc4\u56f2\u3000\uff10\u304b\u3089\uff11\uff10\uff10\uff05\uff08\u7cbe\u5ea6\u3000\u00b1\uff13\uff05\uff09 \u89e3\u50cf\u5ea6\u30000.008% \u9577\u671f\u5b89\u5b9a\u6027 6\u30f6\u6708 \u5927\u6c17\u5727\u30bb\u30f3\u30b5\u30fc \u52d5\u4f5c\u6e29\u5ea6\uff1a-\uff14\uff15\u2103\u304b\u3089\uff18\uff15\u2103(\uff12\uff15\u2103) \u6e2c\u5b9a\u7bc4\u56f2:\uff13\uff10\uff10Pa\u304b\u3089\uff11\uff11\uff10\uff10Pa\uff08\u7cbe\u5ea6\u00b1\uff10.\uff11\uff12hPa\uff09 \u9577\u671f\u5b89\u5b9a\u6027\u3000\uff11hPa(\u5e74\u306b\u3064\u304d) \u6e29\u5ea6\u30bb\u30f3\u30b5\u30fc \u52d5\u4f5c\u6e29\u5ea6\uff1a-\uff14\uff15\u2103\u304b\u3089\uff18\uff15\u2103(\uff12\uff15\u2103) \u7cbe\u5ea6\u3000\u00b1\uff10.\uff15\u2103\uff08\uff12\uff15\u2103\uff09\u3001\u00b1\uff11.\uff10\u2103\uff08\uff10\u304b\u3089\uff16\uff15\u2103\uff09 \u89e3\u50cf\u5ea6\u3000\uff10.\uff10\uff11\u2103 \u7d76\u5bfe\u5b9a\u683c\u3000\u2212\uff10.3V\u304b\u3089\uff14.\uff12\uff15V \u96fb\u6e90\u30e2\u30fc\u30c9\u306f\u30b9\u30ea\u30fc\u30d7\u30e2\u30fc\u30c9\u3068\u5f37\u5236\u30e2\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 \u30b9\u30ea\u30fc\u30d7\u30e2\u30fc\u30c9\u306f\u3001\u975e\u5e38\u306b\u4f4e\u3044\u96fb\u529b\u3067\u6e2c\u5b9a\u306f\u3057\u307e\u305b\u3093\u3002 \u5f37\u5236\u30e2\u30fc\u30c9\u306f\u3001\u30ac\u30b9\u30bb\u30f3\u30b5\u30fc\u304c\u6e2c\u5b9a\u4e2d\u306e\u307f\u52d5\u4f5c\u3057\u307e\u3059\u3002\u6e29\u5ea6\u3001\u5727\u529b\u3001\u6e7f\u5ea6\u3001\u30ac\u30b9\u3000\u306e\u6e2c\u5b9a\u30b5\u30a4\u30af\u30eb\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 \u30ac\u30b9\u30bb\u30f3\u30b5\u30fc\u306e\u6e29\u5ea6\u8a2d\u5b9a\u306f\u6700\u5927\uff11\uff10\u306e\u6e29\u5ea6\u8a2d\u5b9a\u304c\u3067\u304d\u307e\u3059\u3002 BME680\u624b\u9806 Connecting Parts Specification Schematic Sample Code \u69cb\u6210Parts","title":"? Shinobi_Environment"},{"location":"#? Environment /#shinobi_environment","text":"","title":"#? Shinobi_Environment"},{"location":"#? Environment /#overview","text":"\u30ac\u30b9,\u5927\u6c17\u5727,\u6e29\u5ea6,\u6e7f\u5ea6,UV,\u660e\u308b\u3055\u304c\u6e2c\u5b9a\u3067\u304d\u308b\u30dc\u30fc\u30c9\u3067\u3042\u308a\u307e\u3059\u3002 \u5408\u8a08\uff13\u3064\u306e\u30bb\u30f3\u30b5\u30fc\u304c\u642d\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30dc\u30c3\u30b7\u30e5\u3000BME680 \u4f4e\u96fb\u529b\u306a\u30ac\u30b9\u3001\u5727\u529b\u3001\u6e29\u5ea6\u3001\u6e7f\u5ea6\u30bb\u30f3\u30b5\u30fc\u3067\u3059\u3002 \u975e\u5e38\u306b\u5c0f\u3055\u304f\u3001\u4f4e\u96fb\u529b\u306a\u30bb\u30f3\u30b5\u30fc\u3067\u30a6\u30a7\u30a2\u30e9\u30d6\u30eb\u7b49\u306b\u642d\u8f09\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002 I2C\u306f\u30013.4MHz\u307e\u3067\u53ef\u80fd\u3002\u4f9b\u7d66\u96fb\u5727\u306f\u30011.71V\u304b\u30893.6V BME680 \u30bb\u30f3\u30b5\u30fc\u30a2\u30c9\u30ec\u30b9\u30000x76","title":"Overview"},{"location":"#? Environment /#_1","text":"\u52d5\u4f5c\u6e29\u5ea6\uff1a-45\u2103\u304b\u308985\u2103 \u63ee\u767a\u6027\u7269\u8cea\u6fc3\u5ea6 \u5ba4\u5185\u7a7a\u6c17\u8cea\uff08IAQ)\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 IAQ\u306f\uff10\u304b\u3089\uff15\uff10\uff10\u3067\u3042\u308a\u3001 \uff10\u304b\u3089\uff15\uff10\u3000GOOD \uff15\uff11\u304b\u3089\uff11\uff10\uff10\u3000Average \uff11\uff10\uff11\u304b\u3089\uff11\uff15\uff10 little bad \uff11\uff15\uff11\u304b\u3089\uff12\uff10\uff10 bad \uff12\uff10\uff11\u304b\u3089\uff13\uff10\uff10 worse \uff13\uff10\uff11\u304b\u3089\uff15\uff10\uff10 very bad","title":"\u30ac\u30b9\u30bb\u30f3\u30b5\u30fc"},{"location":"#? Environment /#_2","text":"\u52d5\u4f5c\u6e29\u5ea6\uff1a-\uff14\uff15\u2103\u304b\u3089\uff18\uff15\u2103(\uff12\uff15\u2103) \u6e7f\u5ea6\u7bc4\u56f2\u3000\uff10\u304b\u3089\uff11\uff10\uff10\uff05\uff08\u7cbe\u5ea6\u3000\u00b1\uff13\uff05\uff09 \u89e3\u50cf\u5ea6\u30000.008% \u9577\u671f\u5b89\u5b9a\u6027 6\u30f6\u6708","title":"\u6e7f\u5ea6\u30bb\u30f3\u30b5\u30fc"},{"location":"#? Environment /#_3","text":"\u52d5\u4f5c\u6e29\u5ea6\uff1a-\uff14\uff15\u2103\u304b\u3089\uff18\uff15\u2103(\uff12\uff15\u2103) \u6e2c\u5b9a\u7bc4\u56f2:\uff13\uff10\uff10Pa\u304b\u3089\uff11\uff11\uff10\uff10Pa\uff08\u7cbe\u5ea6\u00b1\uff10.\uff11\uff12hPa\uff09 \u9577\u671f\u5b89\u5b9a\u6027\u3000\uff11hPa(\u5e74\u306b\u3064\u304d)","title":"\u5927\u6c17\u5727\u30bb\u30f3\u30b5\u30fc"},{"location":"#? Environment /#_4","text":"\u52d5\u4f5c\u6e29\u5ea6\uff1a-\uff14\uff15\u2103\u304b\u3089\uff18\uff15\u2103(\uff12\uff15\u2103) \u7cbe\u5ea6\u3000\u00b1\uff10.\uff15\u2103\uff08\uff12\uff15\u2103\uff09\u3001\u00b1\uff11.\uff10\u2103\uff08\uff10\u304b\u3089\uff16\uff15\u2103\uff09 \u89e3\u50cf\u5ea6\u3000\uff10.\uff10\uff11\u2103 \u7d76\u5bfe\u5b9a\u683c\u3000\u2212\uff10.3V\u304b\u3089\uff14.\uff12\uff15V \u96fb\u6e90\u30e2\u30fc\u30c9\u306f\u30b9\u30ea\u30fc\u30d7\u30e2\u30fc\u30c9\u3068\u5f37\u5236\u30e2\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 \u30b9\u30ea\u30fc\u30d7\u30e2\u30fc\u30c9\u306f\u3001\u975e\u5e38\u306b\u4f4e\u3044\u96fb\u529b\u3067\u6e2c\u5b9a\u306f\u3057\u307e\u305b\u3093\u3002 \u5f37\u5236\u30e2\u30fc\u30c9\u306f\u3001\u30ac\u30b9\u30bb\u30f3\u30b5\u30fc\u304c\u6e2c\u5b9a\u4e2d\u306e\u307f\u52d5\u4f5c\u3057\u307e\u3059\u3002\u6e29\u5ea6\u3001\u5727\u529b\u3001\u6e7f\u5ea6\u3001\u30ac\u30b9\u3000\u306e\u6e2c\u5b9a\u30b5\u30a4\u30af\u30eb\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002 \u30ac\u30b9\u30bb\u30f3\u30b5\u30fc\u306e\u6e29\u5ea6\u8a2d\u5b9a\u306f\u6700\u5927\uff11\uff10\u306e\u6e29\u5ea6\u8a2d\u5b9a\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u6e29\u5ea6\u30bb\u30f3\u30b5\u30fc"},{"location":"#? Environment /#bme680","text":"","title":"BME680\u624b\u9806"},{"location":"#? Environment /#connecting","text":"","title":"Connecting"},{"location":"#? Environment /#parts-specification","text":"","title":"Parts Specification"},{"location":"#? Environment /#schematic","text":"","title":"Schematic"},{"location":"#? Environment /#sample-code","text":"","title":"Sample Code"},{"location":"#? Environment /#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/1.AboutSDK/","text":"SDK\u306b\u3064\u3044\u3066 NRF5 SDK NRF5 SDK\u3092\u7528\u3044\u308b\u4e8b\u3067\u30de\u30a4\u30b3\u30f3\u7279\u6709\u306e\u30ec\u30b8\u30b9\u30bf\u64cd\u4f5c\u306a\u3069\u306f\u4e0d\u8981\u3068\u306a\u308a\u3001SDK\u306b\u542b\u307e\u308c\u308b\u8c4a\u5bcc\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u958b\u767a\u6642\u306e\u53c2\u8003\u306b\u3059\u308b\u4e8b\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 \u4e3b\u8981\u306aSDK\u3068\u3057\u3066\u3001\u4e0b\u8a18\u306e4\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u822c\u7684\u306a\u30a2\u30d7\u30ea\u958b\u767a\u3067\u306f\u3001nRF5 SDK\u3092\u7528\u3044\u3066\u304a\u3053\u306a\u3044\u307e\u3059\u3002 nRF5 SDK nRF5 SDK for HomeKit nRF5 SDK for Thread nRF5 SDK for Mesh Github Nordic\u306eGithub\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u306f\u3001\u69d8\u3005\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Nordic\u306eGithub https://github.com/NordicSemiconductor \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html","title":"SDK\u306b\u3064\u3044\u3066"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/1.AboutSDK/#sdk","text":"","title":"SDK\u306b\u3064\u3044\u3066"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/1.AboutSDK/#nrf5-sdk","text":"NRF5 SDK\u3092\u7528\u3044\u308b\u4e8b\u3067\u30de\u30a4\u30b3\u30f3\u7279\u6709\u306e\u30ec\u30b8\u30b9\u30bf\u64cd\u4f5c\u306a\u3069\u306f\u4e0d\u8981\u3068\u306a\u308a\u3001SDK\u306b\u542b\u307e\u308c\u308b\u8c4a\u5bcc\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u958b\u767a\u6642\u306e\u53c2\u8003\u306b\u3059\u308b\u4e8b\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 \u4e3b\u8981\u306aSDK\u3068\u3057\u3066\u3001\u4e0b\u8a18\u306e4\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u822c\u7684\u306a\u30a2\u30d7\u30ea\u958b\u767a\u3067\u306f\u3001nRF5 SDK\u3092\u7528\u3044\u3066\u304a\u3053\u306a\u3044\u307e\u3059\u3002 nRF5 SDK nRF5 SDK for HomeKit nRF5 SDK for Thread nRF5 SDK for Mesh","title":"NRF5 SDK"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/1.AboutSDK/#github","text":"Nordic\u306eGithub\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u306f\u3001\u69d8\u3005\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Nordic\u306eGithub https://github.com/NordicSemiconductor \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html","title":"Github"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/2.Hardware/","text":"\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30c7\u30b6\u30a4\u30f3 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u56de\u8def\u3001\u30a2\u30f3\u30c6\u30ca\u30c7\u30b6\u30a4\u30f3\u306f\u3001\u516c\u958b\u3055\u308c\u3066\u304a\u308a\u307e\u3059\u3002\u4e8b\u7d30\u304b\u304f\u8a18\u8f09\u304c\u3042\u308a\u3001\u975e\u5e38\u306b\u90e8\u54c1\u304c\u5c11\u306a\u3044\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u306f\u3001\u4f7f\u308f\u308c\u3066\u3044\u308bBOM(\u90e8\u54c1\u8868)\u3001\u56de\u8def\u56f3\u3001\u30ec\u30a4\u30a2\u30a6\u30c8\u56f3\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html NR52\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ec\u30a4\u30a2\u30a6\u30c8 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html","title":"\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30c7\u30b6\u30a4\u30f3"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/2.Hardware/#_1","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u56de\u8def\u3001\u30a2\u30f3\u30c6\u30ca\u30c7\u30b6\u30a4\u30f3\u306f\u3001\u516c\u958b\u3055\u308c\u3066\u304a\u308a\u307e\u3059\u3002\u4e8b\u7d30\u304b\u304f\u8a18\u8f09\u304c\u3042\u308a\u3001\u975e\u5e38\u306b\u90e8\u54c1\u304c\u5c11\u306a\u3044\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u306f\u3001\u4f7f\u308f\u308c\u3066\u3044\u308bBOM(\u90e8\u54c1\u8868)\u3001\u56de\u8def\u56f3\u3001\u30ec\u30a4\u30a2\u30a6\u30c8\u56f3\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html NR52\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ec\u30a4\u30a2\u30a6\u30c8 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html","title":"\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30c7\u30b6\u30a4\u30f3"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/3.board/","text":"Board \u958b\u767a\u30dc\u30fc\u30c9 \u540d\u79f0 \u958b\u767a\u30dc\u30fc\u30c9\u578b\u756a \u30dc\u30fc\u30c9\u60c5\u5831 \u5199\u771f PCA10001 DevZone NRF51 DK PCA10028 DevZone NRF52 DK PCA10036 DevZone Option\u306eC/C++\u3067\u306e\u8a2d\u5b9a \u540d\u79f0 \u958b\u767a\u30dc\u30fc\u30c9\u578b\u756a \u30dc\u30fc\u30c9\u60c5\u5831 PCA10001 CUSTOM_PCA10001 NRF51 DK PCA10028 CUSTOM_PCA10028 NRF52 DK PCA10036 CUSTOM_PCA10036","title":"Board"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/3.board/#board","text":"","title":"Board"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/3.board/#_1","text":"\u540d\u79f0 \u958b\u767a\u30dc\u30fc\u30c9\u578b\u756a \u30dc\u30fc\u30c9\u60c5\u5831 \u5199\u771f PCA10001 DevZone NRF51 DK PCA10028 DevZone NRF52 DK PCA10036 DevZone","title":"\u958b\u767a\u30dc\u30fc\u30c9"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/3.board/#optioncc","text":"\u540d\u79f0 \u958b\u767a\u30dc\u30fc\u30c9\u578b\u756a \u30dc\u30fc\u30c9\u60c5\u5831 PCA10001 CUSTOM_PCA10001 NRF51 DK PCA10028 CUSTOM_PCA10028 NRF52 DK PCA10036 CUSTOM_PCA10036","title":"Option\u306eC/C++\u3067\u306e\u8a2d\u5b9a"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/SDK_version/","text":"SDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3 nRF5 SDK nRF5 SDK\u306b\u306f\u3001nRF\u30b7\u30ea\u30fc\u30ba\u306b\u958b\u767a\u306b\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30c9\u30e9\u30a4\u30d0\u3001\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3001\u7121\u7dda\u30d7\u30ed\u30c8\u30b3\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \uff33\uff24\uff2b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148 http://developer.nordicsemi.com/ \u5404\uff33\uff24\uff2b\u30d0\u30fc\u30b8\u30e7\u30f3\u4e3b\u306a\u5909\u66f4\u70b9\uff08\u629c\u7c8b\uff09 nRF52\u30b5\u30dd\u30fc\u30c8 nRF5 SDK v15.0.0 SoftDevices\u306f\u3001S112 v6.0.0\u3001S132 v6.0.0\u3001S140 v6.0.0\u3001\u304a\u3088\u3073S212 v5.0.0\u3067\u3059\u3002\u3053\u306e\u30ea\u30ea\u30fc\u30b9\u3067\u306f\u3001nRF52840\u306e\u5b8c\u5168\u306a\u30b5\u30dd\u30fc\u30c8\u3068\u3001\u3053\u306e\u30c7\u30d0\u30a4\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u751f\u7523\u54c1\u8cea\u304a\u3088\u3073\u4f8b\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4ed6\u306e\u6a5f\u80fd\u306b\u306f\u3001\u6697\u53f7\u5316\u6a5f\u80fd\u3068DFU\u6a5f\u80fd\u306e\u5927\u5e45\u306a\u5909\u66f4\u3001SDK\u3067\u306e\u5468\u8fba\u6a5f\u5668\u30c9\u30e9\u30a4\u30d0\u306e\u65b0\u3057\u3044\u51e6\u7406\u65b9\u6cd5\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002 nRF5 SDK v14.2.0 \u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5bfe\u5fdc\u3059\u308bSoftDevice\u306f\u3001S112 v5.1.0\u3001S132 v5.0.x\u3001S140 v5.0.0-2.alpha\u3001S212 v5.0.x\u3001\u304a\u3088\u3073S332 v5.0.x\u3067\u3059\u3002\u3053\u306e\u30ea\u30ea\u30fc\u30b9\u3067\u306f\u3001S112\u306e\u4f8b\u304cS112 SoftDevice v5.1.0\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002 nRF5 SDK v14.1.0 IoT SDK\u3068nRF5 SDK\u304c\u7d71\u5408\u3001Segger Embedded Studio\u30b5\u30dd\u30fc\u30c8\u3001PCA10040\u3067\u306enRF52810\u958b\u767a\u306e\u30b5\u30dd\u30fc\u30c8 nRF5 SDK v14.0.0 nRF5281\u5468\u8fba\u6a5f\u80fd\u306e\u30b5\u30dd\u30fc\u30c8\u3001\u30dc\u30bf\u30f3\u306a\u3057\u306eDFU\u3068\u30b7\u30ea\u30a2\u30ebDFU\u306e\u6a5f\u80fd\u3001L2CAP\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u6307\u5411\u30c1\u30e3\u30cd\u30eb\u6a5f\u80fd nRF5 SDK v13.1.0 \u30b7\u30ea\u30a2\u30eb\u3067BLE\u3068ANT\u3092\u5236\u5fa1 nRF5 SDK v13.0.0 Bluetooth 5\u306e\u30b5\u30dd\u30fc\u30c8\u3001802.15.4\u30b9\u30bf\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3001ANT SoftDevice\u306e\u30b7\u30ea\u30a2\u30eb\u5236\u5fa1\uff08S212\uff09\u3001\u30b7\u30ea\u30a2\u30eb\u30ea\u30f3\u30afDFU, NFC Type 4,Eddystone\u30b5\u30f3\u30d7\u30eb\u3002 nRF51,52\u30b5\u30dd\u30fc\u30c8 nRF5 SDK v12.3.0 nRF52840\u3092\u542b\u3080 \u88fd\u54c1\u54c1\u8cea\u306aEddystone\u30d3\u30fc\u30b3\u30f3\u30b5\u30f3\u30d7\u30eb\u3002 nRF5 SDK v12.2.0 nRF52840\u3092\u542b\u3080 \u6539\u826fEddystone\u30d3\u30fc\u30b3\u30f3\u30b5\u30f3\u30d7\u30eb\u3001USB\u3001QSPI\u3001NFC Type 4\u30bf\u30b0\u3001Cryptocell\u306e\u30b5\u30dd\u30fc\u30c8\u3002 nRF5 SDK v12.0.0,nRF5 SDK v12.0.1 \u30e9\u30a4\u30d6\u30e9\u30ea\u3001FPU\u30c9\u30e9\u30a4\u30d0\u3001\u5b89\u5168\u306aDFU\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u30b5\u30f3\u30d7\u30eb\u3001\u69cb\u6210\u30aa\u30d7\u30b7\u30e7\u30f3 S132\u3067\u306e\u30b7\u30ea\u30a2\u30eb\u5236\u5fa1 nRF5 SDK v11.0.0 \u30d4\u30a2\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3068NFC\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306f\u3001\u88fd\u54c1\u54c1\u8cea\u3002 nRF51\u30b5\u30dd\u30fc\u30c8 nRF51 SDK v10.0.0 \u65b0\u3057\u3044BLE\u30d4\u30a2\u30de\u30cd\u30fc\u30b8\u30e3\uff08BLE\u30c7\u30d0\u30a4\u30b9\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u7f6e\u304d\u63db\u3048\u308b\uff09\u3001FreeRTOS\u306e\u30b5\u30dd\u30fc\u30c8\u3001ANT\u30b5\u30f3\u30d7\u30eb\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u3001ANT +\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb nRF51 SDK v9.0.0 nRF51\u306e\u958b\u767a\u306b\u5fc5\u8981\u306a\u30c9\u30e9\u30a4\u30d0\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30b5\u30f3\u30d7\u30eb\u3001API\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3002 \u305d\u308c\u305e\u308c\u306e\uff33\uff24\uff2b\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u304c\u9055\u3044\u307e\u3059\u3002\u304f\u308f\u3057\u304f\u306f\u3001\u4ee5\u4e0b\u3092\u53c2\u7167 http://infocenter.nordicsemi.com/index.jsp Software Development Kit >","title":"SDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/SDK_version/#sdk","text":"","title":"SDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/SDK_version/#nrf5-sdk","text":"nRF5 SDK\u306b\u306f\u3001nRF\u30b7\u30ea\u30fc\u30ba\u306b\u958b\u767a\u306b\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30c9\u30e9\u30a4\u30d0\u3001\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3001\u7121\u7dda\u30d7\u30ed\u30c8\u30b3\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \uff33\uff24\uff2b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148 http://developer.nordicsemi.com/ \u5404\uff33\uff24\uff2b\u30d0\u30fc\u30b8\u30e7\u30f3\u4e3b\u306a\u5909\u66f4\u70b9\uff08\u629c\u7c8b\uff09","title":"nRF5 SDK"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/SDK_version/#nrf52","text":"nRF5 SDK v15.0.0 SoftDevices\u306f\u3001S112 v6.0.0\u3001S132 v6.0.0\u3001S140 v6.0.0\u3001\u304a\u3088\u3073S212 v5.0.0\u3067\u3059\u3002\u3053\u306e\u30ea\u30ea\u30fc\u30b9\u3067\u306f\u3001nRF52840\u306e\u5b8c\u5168\u306a\u30b5\u30dd\u30fc\u30c8\u3068\u3001\u3053\u306e\u30c7\u30d0\u30a4\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u751f\u7523\u54c1\u8cea\u304a\u3088\u3073\u4f8b\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4ed6\u306e\u6a5f\u80fd\u306b\u306f\u3001\u6697\u53f7\u5316\u6a5f\u80fd\u3068DFU\u6a5f\u80fd\u306e\u5927\u5e45\u306a\u5909\u66f4\u3001SDK\u3067\u306e\u5468\u8fba\u6a5f\u5668\u30c9\u30e9\u30a4\u30d0\u306e\u65b0\u3057\u3044\u51e6\u7406\u65b9\u6cd5\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002 nRF5 SDK v14.2.0 \u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5bfe\u5fdc\u3059\u308bSoftDevice\u306f\u3001S112 v5.1.0\u3001S132 v5.0.x\u3001S140 v5.0.0-2.alpha\u3001S212 v5.0.x\u3001\u304a\u3088\u3073S332 v5.0.x\u3067\u3059\u3002\u3053\u306e\u30ea\u30ea\u30fc\u30b9\u3067\u306f\u3001S112\u306e\u4f8b\u304cS112 SoftDevice v5.1.0\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002 nRF5 SDK v14.1.0 IoT SDK\u3068nRF5 SDK\u304c\u7d71\u5408\u3001Segger Embedded Studio\u30b5\u30dd\u30fc\u30c8\u3001PCA10040\u3067\u306enRF52810\u958b\u767a\u306e\u30b5\u30dd\u30fc\u30c8 nRF5 SDK v14.0.0 nRF5281\u5468\u8fba\u6a5f\u80fd\u306e\u30b5\u30dd\u30fc\u30c8\u3001\u30dc\u30bf\u30f3\u306a\u3057\u306eDFU\u3068\u30b7\u30ea\u30a2\u30ebDFU\u306e\u6a5f\u80fd\u3001L2CAP\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u6307\u5411\u30c1\u30e3\u30cd\u30eb\u6a5f\u80fd nRF5 SDK v13.1.0 \u30b7\u30ea\u30a2\u30eb\u3067BLE\u3068ANT\u3092\u5236\u5fa1 nRF5 SDK v13.0.0 Bluetooth 5\u306e\u30b5\u30dd\u30fc\u30c8\u3001802.15.4\u30b9\u30bf\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3001ANT SoftDevice\u306e\u30b7\u30ea\u30a2\u30eb\u5236\u5fa1\uff08S212\uff09\u3001\u30b7\u30ea\u30a2\u30eb\u30ea\u30f3\u30afDFU, NFC Type 4,Eddystone\u30b5\u30f3\u30d7\u30eb\u3002","title":"nRF52\u30b5\u30dd\u30fc\u30c8"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/SDK_version/#nrf5152","text":"nRF5 SDK v12.3.0 nRF52840\u3092\u542b\u3080 \u88fd\u54c1\u54c1\u8cea\u306aEddystone\u30d3\u30fc\u30b3\u30f3\u30b5\u30f3\u30d7\u30eb\u3002 nRF5 SDK v12.2.0 nRF52840\u3092\u542b\u3080 \u6539\u826fEddystone\u30d3\u30fc\u30b3\u30f3\u30b5\u30f3\u30d7\u30eb\u3001USB\u3001QSPI\u3001NFC Type 4\u30bf\u30b0\u3001Cryptocell\u306e\u30b5\u30dd\u30fc\u30c8\u3002 nRF5 SDK v12.0.0,nRF5 SDK v12.0.1 \u30e9\u30a4\u30d6\u30e9\u30ea\u3001FPU\u30c9\u30e9\u30a4\u30d0\u3001\u5b89\u5168\u306aDFU\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u30b5\u30f3\u30d7\u30eb\u3001\u69cb\u6210\u30aa\u30d7\u30b7\u30e7\u30f3 S132\u3067\u306e\u30b7\u30ea\u30a2\u30eb\u5236\u5fa1 nRF5 SDK v11.0.0 \u30d4\u30a2\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3068NFC\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306f\u3001\u88fd\u54c1\u54c1\u8cea\u3002","title":"nRF51,52\u30b5\u30dd\u30fc\u30c8"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/SDK_version/#nrf51","text":"nRF51 SDK v10.0.0 \u65b0\u3057\u3044BLE\u30d4\u30a2\u30de\u30cd\u30fc\u30b8\u30e3\uff08BLE\u30c7\u30d0\u30a4\u30b9\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u7f6e\u304d\u63db\u3048\u308b\uff09\u3001FreeRTOS\u306e\u30b5\u30dd\u30fc\u30c8\u3001ANT\u30b5\u30f3\u30d7\u30eb\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u3001ANT +\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb nRF51 SDK v9.0.0 nRF51\u306e\u958b\u767a\u306b\u5fc5\u8981\u306a\u30c9\u30e9\u30a4\u30d0\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u30b5\u30f3\u30d7\u30eb\u3001API\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3002 \u305d\u308c\u305e\u308c\u306e\uff33\uff24\uff2b\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u304c\u9055\u3044\u307e\u3059\u3002\u304f\u308f\u3057\u304f\u306f\u3001\u4ee5\u4e0b\u3092\u53c2\u7167 http://infocenter.nordicsemi.com/index.jsp Software Development Kit >","title":"nRF51\u30b5\u30dd\u30fc\u30c8"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/nRF5Series/","text":"nRF52\u30b7\u30ea\u30fc\u30ba nRF52\u30b7\u30ea\u30fc\u30ba\u306b\u306f\u3001\uff13\u7a2e\u985e\uff082018\u5e743\u6708\u73fe\u5728\uff09 Bluetooth 5\u306b\u3082\u5bfe\u5fdc\u3002 Bluetooth5\u306f\u3001\u3088\u308a\u9060\u304f\u307e\u3067\u30ec\u30f3\u30b8\u304c\u5e83\u304c\u3063\u305f\u4f4e\u901f\u306aLongRage(nRF52840) \u30682Mpbs\u3067\u9ad8\u901f\u901a\u4fe1\u53ef\u80fd,\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306b\u3088\u308a\u3053\u308c\u307e\u3067\u306e\uff18\u500d\u306e\u60c5\u5831\u304c\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002 \u3044\u305a\u308c\u3082\u3001Buletooth,ANT\u306b\u5bfe\u5fdc ARM Cortex-M4\u642d\u8f09 nRF52840 \u30d5\u30e9\u30c3\u30b0\u30b7\u30c3\u30d7\u30e2\u30c7\u30eb\u3002 Cortex-M4F\u642d\u8f09 64 MHz\u3067\u52d5\u4f5c 1MB\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u30e1\u30e2\u30ea\u3068256kB\u306eRAM\u3092\u5185\u8535 \u72ec\u81ea\u306e2.4GHz\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u30b5\u30dd\u30fc\u30c8 \uff35\uff33\uff22\u96fb\u6e90\u5165\u529b\u3000\u5916\u90e8\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u306a\u3057\u3067\uff15V\u4f7f\u7528\u53ef\u80fd 3.3V\u3082\u53d6\u308a\u51fa\u3059\u3053\u3068\u3092\u53ef\u80fd\u3068\u3057\u3066\u3044\u308b\u3002 \uff0b\uff18dBm\u3067\u9001\u4fe1\u53ef\u80fd ARM Cryptocell-310\u642d\u8f09\uff08\u6697\u53f7\u5316\u306e\u30a8\u30f3\u30b8\u30f3\uff09 NFC-\uff21\u30bf\u30b0\u3000\u30bf\u30a4\u30d72\u304a\u3088\u3073\u30bf\u30a4\u30d74\u306b\u5bfe\u5fdc USB2.0\u6a5f\u80fd\u642d\u8f09 \uff21\uff31\uff26\uff2e\u30d1\u30c3\u30b1\u30fc\u30b8 \uff27\uff30\uff29\uff2f\u3000\uff14\uff18\u30d4\u30f3 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\u3001\uff33\uff11\uff14\uff10\u4f7f\u7528\uff08\u5f8c\u308d\u306e\uff12\u6841\u304c\u305d\u306e\u4f7f\u3046\u3079\u304dSD\uff09 https://www.nordicsemi.com/eng/Products/nRF52840 nRF52832 \u901a\u5e38\u7248\u3002 Cortex-M4F\u642d\u8f09\u3000\u30d5\u30e9\u30c3\u30b7\u30e5\u30e1\u30e2\u30ea512kB\u3000RAM 64kB RAM\u3092\u5185\u8535 NFC-A \u30d1\u30c3\u30b1\u30fc\u30b8\u3000QFN\u30d1\u30c3\u30b1\u30fc\u30b8\u307e\u305f\u306f\u3001WL-CSP\u30d1\u30c3\u30b1\u30fc\u30b8 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\uff33\uff11\uff13\uff12\u4f7f\u7528 https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF52832 nRF52810 \u5ec9\u4fa1\u7248\u3001\u4f7f\u3044\u6368\u3066\u7528\u9014\u306b\u3082\u5fdc\u7528\u304c\u671f\u5f85\u30e2\u30c7\u30eb\u3002 Cortex-M4\u642d\u8f09 QFN-48\u30d1\u30c3\u30b1\u30fc\u30b8\u307e\u305f\u306f\u3001QFN-3\u30d1\u30c3\u30b1\u30fc\u30b8 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\uff33\uff11\uff11\uff12\u4f7f\u7528 https://www.nordicsemi.com/eng/Products/nRF52810 \u4f7f\u7528\u306f\u5404\u81ea\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002","title":"nRF52\u30b7\u30ea\u30fc\u30ba"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/nRF5Series/#nrf52","text":"nRF52\u30b7\u30ea\u30fc\u30ba\u306b\u306f\u3001\uff13\u7a2e\u985e\uff082018\u5e743\u6708\u73fe\u5728\uff09 Bluetooth 5\u306b\u3082\u5bfe\u5fdc\u3002 Bluetooth5\u306f\u3001\u3088\u308a\u9060\u304f\u307e\u3067\u30ec\u30f3\u30b8\u304c\u5e83\u304c\u3063\u305f\u4f4e\u901f\u306aLongRage(nRF52840) \u30682Mpbs\u3067\u9ad8\u901f\u901a\u4fe1\u53ef\u80fd,\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306b\u3088\u308a\u3053\u308c\u307e\u3067\u306e\uff18\u500d\u306e\u60c5\u5831\u304c\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002 \u3044\u305a\u308c\u3082\u3001Buletooth,ANT\u306b\u5bfe\u5fdc ARM Cortex-M4\u642d\u8f09 nRF52840 \u30d5\u30e9\u30c3\u30b0\u30b7\u30c3\u30d7\u30e2\u30c7\u30eb\u3002 Cortex-M4F\u642d\u8f09 64 MHz\u3067\u52d5\u4f5c 1MB\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u30e1\u30e2\u30ea\u3068256kB\u306eRAM\u3092\u5185\u8535 \u72ec\u81ea\u306e2.4GHz\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u30b5\u30dd\u30fc\u30c8 \uff35\uff33\uff22\u96fb\u6e90\u5165\u529b\u3000\u5916\u90e8\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u306a\u3057\u3067\uff15V\u4f7f\u7528\u53ef\u80fd 3.3V\u3082\u53d6\u308a\u51fa\u3059\u3053\u3068\u3092\u53ef\u80fd\u3068\u3057\u3066\u3044\u308b\u3002 \uff0b\uff18dBm\u3067\u9001\u4fe1\u53ef\u80fd ARM Cryptocell-310\u642d\u8f09\uff08\u6697\u53f7\u5316\u306e\u30a8\u30f3\u30b8\u30f3\uff09 NFC-\uff21\u30bf\u30b0\u3000\u30bf\u30a4\u30d72\u304a\u3088\u3073\u30bf\u30a4\u30d74\u306b\u5bfe\u5fdc USB2.0\u6a5f\u80fd\u642d\u8f09 \uff21\uff31\uff26\uff2e\u30d1\u30c3\u30b1\u30fc\u30b8 \uff27\uff30\uff29\uff2f\u3000\uff14\uff18\u30d4\u30f3 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\u3001\uff33\uff11\uff14\uff10\u4f7f\u7528\uff08\u5f8c\u308d\u306e\uff12\u6841\u304c\u305d\u306e\u4f7f\u3046\u3079\u304dSD\uff09 https://www.nordicsemi.com/eng/Products/nRF52840 nRF52832 \u901a\u5e38\u7248\u3002 Cortex-M4F\u642d\u8f09\u3000\u30d5\u30e9\u30c3\u30b7\u30e5\u30e1\u30e2\u30ea512kB\u3000RAM 64kB RAM\u3092\u5185\u8535 NFC-A \u30d1\u30c3\u30b1\u30fc\u30b8\u3000QFN\u30d1\u30c3\u30b1\u30fc\u30b8\u307e\u305f\u306f\u3001WL-CSP\u30d1\u30c3\u30b1\u30fc\u30b8 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\uff33\uff11\uff13\uff12\u4f7f\u7528 https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF52832 nRF52810 \u5ec9\u4fa1\u7248\u3001\u4f7f\u3044\u6368\u3066\u7528\u9014\u306b\u3082\u5fdc\u7528\u304c\u671f\u5f85\u30e2\u30c7\u30eb\u3002 Cortex-M4\u642d\u8f09 QFN-48\u30d1\u30c3\u30b1\u30fc\u30b8\u307e\u305f\u306f\u3001QFN-3\u30d1\u30c3\u30b1\u30fc\u30b8 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\uff33\uff11\uff11\uff12\u4f7f\u7528 https://www.nordicsemi.com/eng/Products/nRF52810 \u4f7f\u7528\u306f\u5404\u81ea\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002","title":"nRF52\u30b7\u30ea\u30fc\u30ba"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/nrf/","text":"NRF52\u30b7\u30ea\u30fc\u30ba \u30ce\u30eb\u30c7\u30a3\u30c3\u30af\u30bb\u30df\u30b3\u30f3\u30c0\u30af\u30bf\u30fc\u88fdNRF52\u30b7\u30ea\u30fc\u30ba\u306fBluetooth,ANT\u3068\u3044\u3063\u305f\u7121\u7dda\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u3092\u642d\u8f09\u3057\u305fARM\u30de\u30a4\u30b3\u30f3\u3067\u3059\u3002\u7121\u7dda\u5468\u8fba\u6a5f\u80fd\u3082\u5185\u8535\u3057\u3066\u304a\u308a\u30ef\u30f3\u30c1\u30c3\u30d7\u3001\u4f4e\u4fa1\u683c\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u3002 CPU\u30b3\u30a2\u306f\u3001ARM\u30de\u30a4\u30b3\u30f3\u3092\u642d\u8f09\u3002\u72ec\u81ea\u306e\u5468\u8fba\u6a5f\u80fd\u3092\u5229\u7528\u3067\u304d\u308b\u3002 \u30d3\u30fc\u30b3\u30f3\u7528\u9014\u4ee5\u5916\u306b\u3082\u8c4a\u5bcc\u306a\u5468\u8fba\u6a5f\u80fd\u3067\u30bb\u30f3\u30b7\u30f3\u30b0\u3068\u3057\u3066\u3082\u3001\u30de\u30a4\u30b3\u30f3\u3068\u3057\u3066\u3082\u6d3b\u8e8d\u304c\u671f\u5f85\u3055\u308c\u308b\u3002 \u524d\u30e2\u30c7\u30ebNRF51\u3068\u6bd4\u3079\u3066\u9ad8\u6027\u80fd\u5316\u3057\u3066\u3044\u308b\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u9001\u53d7\u4fe1\u306e\u4f4e\u6d88\u8cbb\u96fb\u529b\u3001CortexM4\u306e\u63a1\u7528\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6a5f\u80fd\u8ffd\u52a0\uff09\u3001\u30e1\u30e2\u30ea\u3092\u5897\u52a0\u3001NFC\u306b\u3082\u5bfe\u5fdc\u3002 \u30cf\u30fc\u30d0\u30fc\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u63a1\u7528\u3067\u9ad8\u901f\u5316\u306b\u3002 \u9ad8\u901f\u306b\u8d77\u52d5\u3001\u52d5\u4f5c\u3057\u3066\u3059\u3050\u3055\u307e\u3001\u30b9\u30ea\u30fc\u30d7\u30e2\u30fc\u30c9\u306b\u5165\u308a\u6d88\u8cbb\u96fb\u529b\u3092\u4f4e\u6e1b\u3057\u3066\u3044\u308b\u3002 \u65e5\u672c\u306e\u6280\u9069\u53d6\u5f97\u6e08\u307f\u3000NRF52\u3092\u63a1\u7528\u3057\u3066\u3044\u308bBLE\u30e2\u30b8\u30e5\u30fc\u30eb\u30e1\u30fc\u30ab\u30fc\u304c\u65e5\u672c\u306b\u3082\u6570\u793e\u5b58\u5728\u3057\u3001\u96fb\u5b50\u90e8\u54c1\u5e97\u304b\u3089\u8cfc\u5165\u53ef\u80fd\u3002 \u98db\u8ddd\u96e2\u306f\u3001\u304a\u304a\u3088\u305d\u30aa\u30d5\u30a3\u30b9\u5185\u3000\u5b9f\u969b\u306f\u304a\u304a\u3088\u305d\uff12\uff10\uff4d\uff5e\uff13\uff10\uff4d\u7a0b\u5ea6\u306b\u306a\u308b\u3002\uff08\u5efa\u7269\u74b0\u5883\u3001\u5929\u5019\u74b0\u5883\u3084\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\u80fd\u306b\u3088\u308b\uff09 \u30b3\u30a2\u306fARM\u30de\u30a4\u30b3\u30f3\u3067\u3042\u308a\u3001\u5468\u8fba\u6a5f\u80fd\u306f\u3001I2C(TWI),I2S,SPI,UART\u3068\u3044\u3063\u305f\u901a\u4fe1\u306b\u3082\u5bfe\u5fdc\u3002\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30af\u30ed\u30c3\u30af\u3001A/D\u30b3\u30f3\u30d0\u30fc\u30bf\u3082\u642d\u8f09\u3057\u3066\u3044\u308b\u3002 Bluetooth \u514d\u8a31\u306a\u3057\u3067\u4f7f\u3048\u308b2.4GHz\u5e2f\u57df\u4f7f\u7528\u3000\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\uff08\u6280\u9069\u30de\u30fc\u30af\u3042\u308a\u306e\u5834\u5408\uff09 Bluetooth SIG\u304c\u8a8d\u8a3c\u307e\u305f\u306f\u7ba1\u7406\u3057\u3066\u3044\u308b\u3002 Bluetooth\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f\u3001BR,EDR,HS,LE\u30e2\u30fc\u30c9\u306e\uff14\u7a2e\u985e\u5b58\u5728\u3002NRF52\u306fLE\u30e2\u30fc\u30c9\u306e\u307f\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u901a\u4fe1\u901f\u5ea6\u306f\u6700\u5927\uff11Mbps\u3068\u306a\u308a\u307e\u3059\u3002 Bluetooth\u306f\u3001\u643a\u5e2f\u96fb\u8a71\u304a\u3088\u3073\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3068\u9023\u643a\u304c\u3067\u304d\u3001WiFi\u3068\u6bd4\u3079\u3066\u4f4e\u6d88\u8cbb\u96fb\u529b\u3067\u3053\u308c\u304b\u3089\u81a8\u5927\u3068\u306a\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u5bfe\u3057\u3066\u3001\u5468\u6ce2\u6570\u30db\u30c3\u30d4\u30f3\u30b0\u306b\u3088\u308a\u6709\u9650\u306a\u7121\u7dda\u5e2f\u57df\u9069\u5fdc\u3000IoT\u793e\u4f1a\u306b\u9069\u3057\u305f\u7121\u7dda\u6280\u8853\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u30d4\u30b3\u30cd\u30c3\u30c8\u3068\u547c\u3070\u308c\u308b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002 \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a\u3002 Bluetooth\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb LE\u30e2\u30fc\u30c9\u306e\u5834\u5408\u306f\u3001GATT\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 GATT\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u3084\u30ad\u30e3\u30e9\u30af\u30bf\u30b9\u30c6\u30a3\u30af\u3067\u69cb\u6210\u3055\u308c\u3001\u3042\u3089\u304b\u3058\u3081BluetoothSIG\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30b5\u30fc\u30d3\u30b9\u306f\u3001\u756a\u53f7\u304c\u6c7a\u3081\u3089\u308c\u3066\u3044\u3066\u3001\u72ec\u81ea\u3067\u6c7a\u3081\u308b\u30b5\u30fc\u30d3\u30b9\u306b\u306f\u3001UUID\u3067\u756a\u53f7\u3092\u632f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 GATT\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u7a2e\u985e \u30a2\u30e9\u30fc\u30c8\u30ce\u30fc\u30c6\u30a3\u30d5\u30a3\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d3\u30b9 \u4f8b\uff1a\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u304b\u3089\u30c7\u30d0\u30a4\u30b9\u306b\u901a\u77e5\u3092\u9001\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3002 \u8840\u5727\u306e\u30b5\u30fc\u30d3\u30b9 \u8840\u7cd6\u5024\u306e\u30b5\u30fc\u30d3\u30b9 \u306a\u3069 BLE\u30e2\u30b8\u30e5\u30fc\u30eb\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc https://www.nordicsemi.com/jpn/node_176/3D-Party-Bluetooth-low-energy \u30b5\u30fc\u30d3\u30b9\u3068\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30af\u3067\u69cb\u6210\u3002 \u30da\u30a2\u30ea\u30f3\u30b0\u3042\u308a\u3001\u30da\u30a2\u30ea\u30f3\u30b0\u306a\u3057\u3069\u3061\u3089\u3067\u3082\u30ea\u30fc\u30c9\u30e9\u30a4\u30c8\u3067\u304d\u308b\u3002\uff08\u30da\u30a2\u30ea\u30f3\u30b0\u3042\u308a\u306e\u5834\u5408\u306f\u901a\u4fe1\u306f\u6697\u53f7\u5316\u3055\u308c\u308b\u3002\uff09","title":"Nrf"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/nrf/#nrf52","text":"\u30ce\u30eb\u30c7\u30a3\u30c3\u30af\u30bb\u30df\u30b3\u30f3\u30c0\u30af\u30bf\u30fc\u88fdNRF52\u30b7\u30ea\u30fc\u30ba\u306fBluetooth,ANT\u3068\u3044\u3063\u305f\u7121\u7dda\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u3092\u642d\u8f09\u3057\u305fARM\u30de\u30a4\u30b3\u30f3\u3067\u3059\u3002\u7121\u7dda\u5468\u8fba\u6a5f\u80fd\u3082\u5185\u8535\u3057\u3066\u304a\u308a\u30ef\u30f3\u30c1\u30c3\u30d7\u3001\u4f4e\u4fa1\u683c\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u3002 CPU\u30b3\u30a2\u306f\u3001ARM\u30de\u30a4\u30b3\u30f3\u3092\u642d\u8f09\u3002\u72ec\u81ea\u306e\u5468\u8fba\u6a5f\u80fd\u3092\u5229\u7528\u3067\u304d\u308b\u3002 \u30d3\u30fc\u30b3\u30f3\u7528\u9014\u4ee5\u5916\u306b\u3082\u8c4a\u5bcc\u306a\u5468\u8fba\u6a5f\u80fd\u3067\u30bb\u30f3\u30b7\u30f3\u30b0\u3068\u3057\u3066\u3082\u3001\u30de\u30a4\u30b3\u30f3\u3068\u3057\u3066\u3082\u6d3b\u8e8d\u304c\u671f\u5f85\u3055\u308c\u308b\u3002 \u524d\u30e2\u30c7\u30ebNRF51\u3068\u6bd4\u3079\u3066\u9ad8\u6027\u80fd\u5316\u3057\u3066\u3044\u308b\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u9001\u53d7\u4fe1\u306e\u4f4e\u6d88\u8cbb\u96fb\u529b\u3001CortexM4\u306e\u63a1\u7528\uff08\u6d6e\u52d5\u5c0f\u6570\u70b9\u6a5f\u80fd\u8ffd\u52a0\uff09\u3001\u30e1\u30e2\u30ea\u3092\u5897\u52a0\u3001NFC\u306b\u3082\u5bfe\u5fdc\u3002 \u30cf\u30fc\u30d0\u30fc\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u63a1\u7528\u3067\u9ad8\u901f\u5316\u306b\u3002 \u9ad8\u901f\u306b\u8d77\u52d5\u3001\u52d5\u4f5c\u3057\u3066\u3059\u3050\u3055\u307e\u3001\u30b9\u30ea\u30fc\u30d7\u30e2\u30fc\u30c9\u306b\u5165\u308a\u6d88\u8cbb\u96fb\u529b\u3092\u4f4e\u6e1b\u3057\u3066\u3044\u308b\u3002 \u65e5\u672c\u306e\u6280\u9069\u53d6\u5f97\u6e08\u307f\u3000NRF52\u3092\u63a1\u7528\u3057\u3066\u3044\u308bBLE\u30e2\u30b8\u30e5\u30fc\u30eb\u30e1\u30fc\u30ab\u30fc\u304c\u65e5\u672c\u306b\u3082\u6570\u793e\u5b58\u5728\u3057\u3001\u96fb\u5b50\u90e8\u54c1\u5e97\u304b\u3089\u8cfc\u5165\u53ef\u80fd\u3002 \u98db\u8ddd\u96e2\u306f\u3001\u304a\u304a\u3088\u305d\u30aa\u30d5\u30a3\u30b9\u5185\u3000\u5b9f\u969b\u306f\u304a\u304a\u3088\u305d\uff12\uff10\uff4d\uff5e\uff13\uff10\uff4d\u7a0b\u5ea6\u306b\u306a\u308b\u3002\uff08\u5efa\u7269\u74b0\u5883\u3001\u5929\u5019\u74b0\u5883\u3084\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\u80fd\u306b\u3088\u308b\uff09 \u30b3\u30a2\u306fARM\u30de\u30a4\u30b3\u30f3\u3067\u3042\u308a\u3001\u5468\u8fba\u6a5f\u80fd\u306f\u3001I2C(TWI),I2S,SPI,UART\u3068\u3044\u3063\u305f\u901a\u4fe1\u306b\u3082\u5bfe\u5fdc\u3002\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30af\u30ed\u30c3\u30af\u3001A/D\u30b3\u30f3\u30d0\u30fc\u30bf\u3082\u642d\u8f09\u3057\u3066\u3044\u308b\u3002","title":"NRF52\u30b7\u30ea\u30fc\u30ba"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/nrf/#bluetooth","text":"\u514d\u8a31\u306a\u3057\u3067\u4f7f\u3048\u308b2.4GHz\u5e2f\u57df\u4f7f\u7528\u3000\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\uff08\u6280\u9069\u30de\u30fc\u30af\u3042\u308a\u306e\u5834\u5408\uff09 Bluetooth SIG\u304c\u8a8d\u8a3c\u307e\u305f\u306f\u7ba1\u7406\u3057\u3066\u3044\u308b\u3002 Bluetooth\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f\u3001BR,EDR,HS,LE\u30e2\u30fc\u30c9\u306e\uff14\u7a2e\u985e\u5b58\u5728\u3002NRF52\u306fLE\u30e2\u30fc\u30c9\u306e\u307f\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u901a\u4fe1\u901f\u5ea6\u306f\u6700\u5927\uff11Mbps\u3068\u306a\u308a\u307e\u3059\u3002 Bluetooth\u306f\u3001\u643a\u5e2f\u96fb\u8a71\u304a\u3088\u3073\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3068\u9023\u643a\u304c\u3067\u304d\u3001WiFi\u3068\u6bd4\u3079\u3066\u4f4e\u6d88\u8cbb\u96fb\u529b\u3067\u3053\u308c\u304b\u3089\u81a8\u5927\u3068\u306a\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u5bfe\u3057\u3066\u3001\u5468\u6ce2\u6570\u30db\u30c3\u30d4\u30f3\u30b0\u306b\u3088\u308a\u6709\u9650\u306a\u7121\u7dda\u5e2f\u57df\u9069\u5fdc\u3000IoT\u793e\u4f1a\u306b\u9069\u3057\u305f\u7121\u7dda\u6280\u8853\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u30d4\u30b3\u30cd\u30c3\u30c8\u3068\u547c\u3070\u308c\u308b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002 \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a\u3002","title":"Bluetooth"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/nrf/#bluetooth_1","text":"LE\u30e2\u30fc\u30c9\u306e\u5834\u5408\u306f\u3001GATT\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 GATT\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u3084\u30ad\u30e3\u30e9\u30af\u30bf\u30b9\u30c6\u30a3\u30af\u3067\u69cb\u6210\u3055\u308c\u3001\u3042\u3089\u304b\u3058\u3081BluetoothSIG\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30b5\u30fc\u30d3\u30b9\u306f\u3001\u756a\u53f7\u304c\u6c7a\u3081\u3089\u308c\u3066\u3044\u3066\u3001\u72ec\u81ea\u3067\u6c7a\u3081\u308b\u30b5\u30fc\u30d3\u30b9\u306b\u306f\u3001UUID\u3067\u756a\u53f7\u3092\u632f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 GATT\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u7a2e\u985e \u30a2\u30e9\u30fc\u30c8\u30ce\u30fc\u30c6\u30a3\u30d5\u30a3\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d3\u30b9 \u4f8b\uff1a\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u304b\u3089\u30c7\u30d0\u30a4\u30b9\u306b\u901a\u77e5\u3092\u9001\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3002 \u8840\u5727\u306e\u30b5\u30fc\u30d3\u30b9 \u8840\u7cd6\u5024\u306e\u30b5\u30fc\u30d3\u30b9 \u306a\u3069","title":"Bluetooth\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb"},{"location":"0.\u958b\u767a\u74b0\u5883(\u5171\u6709)/nrf/#ble","text":"https://www.nordicsemi.com/jpn/node_176/3D-Party-Bluetooth-low-energy \u30b5\u30fc\u30d3\u30b9\u3068\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30af\u3067\u69cb\u6210\u3002 \u30da\u30a2\u30ea\u30f3\u30b0\u3042\u308a\u3001\u30da\u30a2\u30ea\u30f3\u30b0\u306a\u3057\u3069\u3061\u3089\u3067\u3082\u30ea\u30fc\u30c9\u30e9\u30a4\u30c8\u3067\u304d\u308b\u3002\uff08\u30da\u30a2\u30ea\u30f3\u30b0\u3042\u308a\u306e\u5834\u5408\u306f\u901a\u4fe1\u306f\u6697\u53f7\u5316\u3055\u308c\u308b\u3002\uff09","title":"BLE\u30e2\u30b8\u30e5\u30fc\u30eb\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/1.Keil_MDK-ARM_install/","text":"KEIL MDK-ARM\uff4d\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b NRF5X\u30b7\u30ea\u30fc\u30ba \u306f\u3001\u7d14\u6b63ARM\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u4f7f\u7528\u3067\u304d\u308bKEIL\u3001\u69d8\u3005\u306a\u30de\u30a4\u30b3\u30f3\u306b\u5bfe\u5fdc\u3057\u305fIAR\u3084EmbedStduio\u3067\u958b\u767a\u304c\u3067\u304d\u307e\u3059\u3002GCC\u3067\u306e\u958b\u767a\u3082\u53ef\u80fd\u3067\u3059\u3002 \u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001KEIL\uff08\u30ab\u30a4\u30eb\uff09\u3092\u4f7f\u7528\u3057\u3066\u958b\u767a\u3057\u307e\u3059\u3002 KEIL\u3000\u03bcVersion \u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7ba1\u7406\u3001\u5b9f\u884c\u74b0\u5883\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7de8\u96c6\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u30c7\u30d0\u30c3\u30af\u3092\u3059\u3079\u3066\u63c3\u3063\u305fARM\u306e\u7d14\u6b63\u30b3\u30f3\u30d1\u30a4\u30e9\u642d\u8f09\u306e\u7d71\u5408\u958b\u767a\u74b0\u5883IDE\u3067\u3059\u3002 KEIL\u306b\u306f\u3001\u6709\u511f\u7248\u3068\u30b3\u30fc\u30c9\u5bb9\u91cf\u5236\u9650\u4ed8\u304d\u306e\u4f53\u9a13\u7248(32KB)\u3001\u671f\u9650\u4ed8\u304d\u30b3\u30fc\u30c9\u30b5\u30a4\u30ba\u7121\u5236\u9650\uff08KEIL\u8a2d\u5b9a\u5fc5\u8981\uff09\u304c\u3042\u308a\u307e\u3059\u3002 Note Keil\u306f\u3001\u6700\u65b0\u306e\u30de\u30a4\u30b3\u30f3\u306b\u5bfe\u5fdc\u3057\u3066\u3001\u6709\u511f\u7248\u306f\u30b5\u30dd\u30fc\u30c8\u304c\u53d7\u3051\u3089\u308c\u307e\u3059\u3002\u958b\u767a\u6642\u9593\u306e\u77ed\u7e2e\u304c\u5fc5\u8981\u306a\u3068\u304d\u3084\u958b\u767a\u8cbb\u306b\u4f59\u88d5\u304c\u3042\u308b\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u304a\u52e7\u3081\u3067\u3059\u3002 MDK-ARM\u4fa1\u683c\u4e00\u89a7 \u30e9\u30a4\u30bb\u30f3\u30b9 \u4fa1\u683c \u8a73\u7d30 MDK-Professional 30-40\u4e07\u5186(1\u5e74\u30e9\u30a4\u30bb\u30f3\u30b9) Middleware Libraries\u3082\u4ed8\u5c5e MDK-Standard \u7d0425-30\u4e07\u5186(1\u5e74\u30e9\u30a4\u30bb\u30f3\u30b9) Cortex\u00ae-M\u30b7\u30ea\u30fc\u30ba, ARM7,ARM9,Cortex\u00ae-R, SecureCore\u3000 MDK-Cortex-M \u7d0420\u4e07\u5186(1\u5e74\u30e9\u30a4\u30bb\u30f3\u30b9\uff09 Cortex\u00ae-M\u30b7\u30ea\u30fc\u30ba\u9650\u5b9a MDK-Lite \u7121\u6599 32K\u5236\u9650 Keil MDK-ARM\u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30e2\u30b8\u30e5\u30fc\u30eb DA14580 CYBL10X6X nrf51822 Keil uVersion\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u305d\u308c\u3067\u306f\u3001Download\u30b5\u30a4\u30c8\u3088\u308a\u3001Keil uVersion\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u307e\u3059\u3002 https://www.keil.com/download/","title":"KEIL MDK-ARM\uff4d\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/1.Keil_MDK-ARM_install/#keil-mdk-armm","text":"\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b NRF5X\u30b7\u30ea\u30fc\u30ba \u306f\u3001\u7d14\u6b63ARM\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u4f7f\u7528\u3067\u304d\u308bKEIL\u3001\u69d8\u3005\u306a\u30de\u30a4\u30b3\u30f3\u306b\u5bfe\u5fdc\u3057\u305fIAR\u3084EmbedStduio\u3067\u958b\u767a\u304c\u3067\u304d\u307e\u3059\u3002GCC\u3067\u306e\u958b\u767a\u3082\u53ef\u80fd\u3067\u3059\u3002 \u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001KEIL\uff08\u30ab\u30a4\u30eb\uff09\u3092\u4f7f\u7528\u3057\u3066\u958b\u767a\u3057\u307e\u3059\u3002 KEIL\u3000\u03bcVersion \u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7ba1\u7406\u3001\u5b9f\u884c\u74b0\u5883\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7de8\u96c6\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u30c7\u30d0\u30c3\u30af\u3092\u3059\u3079\u3066\u63c3\u3063\u305fARM\u306e\u7d14\u6b63\u30b3\u30f3\u30d1\u30a4\u30e9\u642d\u8f09\u306e\u7d71\u5408\u958b\u767a\u74b0\u5883IDE\u3067\u3059\u3002 KEIL\u306b\u306f\u3001\u6709\u511f\u7248\u3068\u30b3\u30fc\u30c9\u5bb9\u91cf\u5236\u9650\u4ed8\u304d\u306e\u4f53\u9a13\u7248(32KB)\u3001\u671f\u9650\u4ed8\u304d\u30b3\u30fc\u30c9\u30b5\u30a4\u30ba\u7121\u5236\u9650\uff08KEIL\u8a2d\u5b9a\u5fc5\u8981\uff09\u304c\u3042\u308a\u307e\u3059\u3002 Note Keil\u306f\u3001\u6700\u65b0\u306e\u30de\u30a4\u30b3\u30f3\u306b\u5bfe\u5fdc\u3057\u3066\u3001\u6709\u511f\u7248\u306f\u30b5\u30dd\u30fc\u30c8\u304c\u53d7\u3051\u3089\u308c\u307e\u3059\u3002\u958b\u767a\u6642\u9593\u306e\u77ed\u7e2e\u304c\u5fc5\u8981\u306a\u3068\u304d\u3084\u958b\u767a\u8cbb\u306b\u4f59\u88d5\u304c\u3042\u308b\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u304a\u52e7\u3081\u3067\u3059\u3002","title":"KEIL MDK-ARM\uff4d\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/1.Keil_MDK-ARM_install/#mdk-arm","text":"\u30e9\u30a4\u30bb\u30f3\u30b9 \u4fa1\u683c \u8a73\u7d30 MDK-Professional 30-40\u4e07\u5186(1\u5e74\u30e9\u30a4\u30bb\u30f3\u30b9) Middleware Libraries\u3082\u4ed8\u5c5e MDK-Standard \u7d0425-30\u4e07\u5186(1\u5e74\u30e9\u30a4\u30bb\u30f3\u30b9) Cortex\u00ae-M\u30b7\u30ea\u30fc\u30ba, ARM7,ARM9,Cortex\u00ae-R, SecureCore\u3000 MDK-Cortex-M \u7d0420\u4e07\u5186(1\u5e74\u30e9\u30a4\u30bb\u30f3\u30b9\uff09 Cortex\u00ae-M\u30b7\u30ea\u30fc\u30ba\u9650\u5b9a MDK-Lite \u7121\u6599 32K\u5236\u9650","title":"MDK-ARM\u4fa1\u683c\u4e00\u89a7"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/1.Keil_MDK-ARM_install/#keil-mdk-arm","text":"DA14580 CYBL10X6X nrf51822","title":"Keil MDK-ARM\u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30e2\u30b8\u30e5\u30fc\u30eb"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/1.Keil_MDK-ARM_install/#keil-uversion","text":"\u305d\u308c\u3067\u306f\u3001Download\u30b5\u30a4\u30c8\u3088\u308a\u3001Keil uVersion\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u307e\u3059\u3002 https://www.keil.com/download/","title":"Keil uVersion\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/2.SDK_Download/","text":"2.nRF52 SDK\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 nRF5\u30b7\u30ea\u30fc\u30ba Noric\u30bb\u30df\u30b3\u30f3\u30c0\u30af\u30bf\u793e\u958b\u767a\u306eBluetooth low energy/2.4GHz\u5bfe\u5fdc\u306eSoC\u306f\u3001nRF51822(nRF51\u7cfb)\u3084nRF52832(nRF52\u7cfb)\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002 nRF5 SDK nRF5 SDK\u306f\u3001nRF5\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e\u958b\u767a\u74b0\u5883\u3067\u3059\u3002\u30c9\u30e9\u30a4\u30d0\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3001SoftDevices\u3001\u72ec\u81ea\u306e\u7121\u7dda\u30d7\u30ed\u30c8\u30b3\u30eb\u306a\u3069\u304c\u542b\u307e\u308c\u307e\u3059\u3002 \u672c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001nRF5 SDK Version 15\u3092\u4f7f\u7528\u3057\u307e\u3059\u30022018\u5e743\u6708\u73fe\u5728\u3067\u3001\u6700\u65b0\u7248\u306eSDK\u306fVersion 15\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 https://developer.nordicsemi.com/nRF5_SDK/ SDK\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 NRF52\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306b\u5fc5\u8981\u306aSDK\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 SDK\u306b\u306f\u3001\u5fc5\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30c4\u30fc\u30eb\u30c1\u30a7\u30fc\u30f3\u3001\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\u3001BLE\u958b\u767a\u306e\u6642\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u7fa4\u3084\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u304a\u3088\u3073\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9,\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002 SDK Version 15\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148 https://developer.nordicsemi.com/nRF5_SDK/","title":"2.nRF52 SDK\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/2.SDK_Download/#2nrf52-sdk","text":"","title":"2.nRF52 SDK\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/2.SDK_Download/#nrf5","text":"Noric\u30bb\u30df\u30b3\u30f3\u30c0\u30af\u30bf\u793e\u958b\u767a\u306eBluetooth low energy/2.4GHz\u5bfe\u5fdc\u306eSoC\u306f\u3001nRF51822(nRF51\u7cfb)\u3084nRF52832(nRF52\u7cfb)\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002","title":"nRF5\u30b7\u30ea\u30fc\u30ba"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/2.SDK_Download/#nrf5-sdk","text":"nRF5 SDK\u306f\u3001nRF5\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e\u958b\u767a\u74b0\u5883\u3067\u3059\u3002\u30c9\u30e9\u30a4\u30d0\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3001SoftDevices\u3001\u72ec\u81ea\u306e\u7121\u7dda\u30d7\u30ed\u30c8\u30b3\u30eb\u306a\u3069\u304c\u542b\u307e\u308c\u307e\u3059\u3002 \u672c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001nRF5 SDK Version 15\u3092\u4f7f\u7528\u3057\u307e\u3059\u30022018\u5e743\u6708\u73fe\u5728\u3067\u3001\u6700\u65b0\u7248\u306eSDK\u306fVersion 15\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 https://developer.nordicsemi.com/nRF5_SDK/","title":"nRF5 SDK"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/2.SDK_Download/#sdk","text":"NRF52\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306b\u5fc5\u8981\u306aSDK\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 SDK\u306b\u306f\u3001\u5fc5\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30c4\u30fc\u30eb\u30c1\u30a7\u30fc\u30f3\u3001\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\u3001BLE\u958b\u767a\u306e\u6642\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u7fa4\u3084\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u304a\u3088\u3073\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9,\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002 SDK Version 15\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148 https://developer.nordicsemi.com/nRF5_SDK/","title":"SDK\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/","text":"nRFgo Stduio\uff08Windows\uff09 nRFgo Stduio\u306f\u3001Nordic\u30bb\u30df\u30b3\u30f3\u30c0\u30af\u30bf\u30fc\u793e\u306eSOC\u3067\u3042\u308bRF51,nRF52\u306e\u958b\u767a\u7528\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002 \u30c6\u30b9\u30c8\u3084\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u66f8\u304d\u8fbc\u307f\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fWindows(32bit,64bit)\u5bfe\u5fdc\u3067\u3059\u3002 \u958b\u767a\u3067\u306f\u3001\u30de\u30a4\u30b3\u30f3\u5185\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3092\u66f8\u8fbc\u307f\u3001\u6d88\u53bb\u3001\u30d7\u30ed\u30c6\u30af\u30c8\u3001\u30d9\u30ea\u30d5\u30a1\u30a4\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002 \u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u66f8\u304d\u8fbc\u307f \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304cSoftDevice\uff08\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\uff09\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u306e\u3042\u3068\u3001\u4e0a\u4f4d\u7a7a\u304d\u9818\u57df\u306b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u66f8\u304d\u8fbc\u307f\u3092\u8a08\uff12\u56de\u884c\u3044\u307e\u3059\u3002SoftDevice\u306b\u306f\u3001\uff13\u7a2e\u985e\u3042\u308a\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3001\u30bb\u30f3\u30c8\u30e9\u30eb\u3001\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u307e\u305f\u306f\u30bb\u30f3\u30c8\u30e9\u30eb\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002 \uff0a\u5927\u91cf\u66f8\u8fbc\u307f\u306e\u3068\u304d\u306f\u3001SoftDevice\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d50\u5408\u3057\u3072\u3068\u3064\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u6700\u65b0\u306enRFgo Studio-Win64\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 nRFgo Studio-Win64\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148 https://www.nordicsemi.com/eng/nordic/Products/nRFgo-Studio/nRFgo-Studio-Win64/14964 \u89e3\u51cd\u3057\u3001nRFgoStudio\u3000\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u7d42\u4e86\u5f8c\u3001\u81ea\u52d5\u7684\u306b\u30c0\u30a4\u30e4\u30ed\u30b0\u304c\u958b\u304d\u3001J-link\u30c9\u30e9\u30a4\u30d0\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 SDK\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u958b\u767a\u306b\u5fc5\u8981\u306a\u30b5\u30f3\u30d7\u30eb\u53ca\u3073\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306a\u3069\uff09\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 nRFgo Studio-Win64\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148 https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF5-SDK \u4eca\u56de\u306f\u300112.3\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 nRFgoStduio\u3067\u30d5\u30a1\u30fc\u30a6\u30a7\u30a2\u66f8\u304d\u8fbc\u307f \u4e0b\u8a18\u306e\u3088\u3046\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002J-link lite\u3092Shinobi\u306b\u63a5\u7d9a\u3057\u3001Shinobi\u306e\u96fb\u6e90\uff083V\uff09\u3082ON\u306b\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u304b\u3089\u30d3\u30eb\u30c9\u3057\u305f\u3001hex\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3001nRFgoStudio\u3092\u8d77\u52d5\u3001\u5de6\u306e\u753b\u9762\u3000DeviceManeger\u306enRF5x Programming\u3092\u30af\u30ea\u30c3\u30af\u3002 \u3057\u3070\u3089\u304f\u3059\u308b\u3068\u3001\u6b63\u5e38\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001Region1,\u307e\u305f\u306fRegion0,Region1\u306a\u3069\u9818\u57df\u3092\u8868\u3059\u753b\u9762\u304c\u51fa\u3066\u304d\u307e\u3059\u3002 \u6d88\u53bb Erase all\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3002\u63a5\u7d9a\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3068\u304d\u306f\u3001Refresh\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001Browse\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001ProgramSoftDeivce\u30bf\u30d6\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3055\u304d\u307b\u3069\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fSDK\u306e\u4e2d\u306b\\components\\softdevice\\s132\\hex\u304b\u3089\u5bfe\u8c61\u3068\u306a\u308b\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\uff08hex\u30d5\u30a1\u30a4\u30eb\uff09\u3092Program\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Program Application\u30bf\u30d6\u3092\u30af\u30ea\u30c3\u30af\u3057Browse\u5bfe\u8c61\u306ehex\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u9078\u629e\u3057\u3001Program\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u753b\u9762\u306e\u4e0b\u306bsuccessfully\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002","title":"nRFgo Stduio\uff08Windows\uff09"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/#nrfgo-stduiowindows","text":"nRFgo Stduio\u306f\u3001Nordic\u30bb\u30df\u30b3\u30f3\u30c0\u30af\u30bf\u30fc\u793e\u306eSOC\u3067\u3042\u308bRF51,nRF52\u306e\u958b\u767a\u7528\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002 \u30c6\u30b9\u30c8\u3084\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u66f8\u304d\u8fbc\u307f\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fWindows(32bit,64bit)\u5bfe\u5fdc\u3067\u3059\u3002 \u958b\u767a\u3067\u306f\u3001\u30de\u30a4\u30b3\u30f3\u5185\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3092\u66f8\u8fbc\u307f\u3001\u6d88\u53bb\u3001\u30d7\u30ed\u30c6\u30af\u30c8\u3001\u30d9\u30ea\u30d5\u30a1\u30a4\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002","title":"nRFgo Stduio\uff08Windows\uff09"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/#_1","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304cSoftDevice\uff08\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\uff09\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u306e\u3042\u3068\u3001\u4e0a\u4f4d\u7a7a\u304d\u9818\u57df\u306b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u66f8\u304d\u8fbc\u307f\u3092\u8a08\uff12\u56de\u884c\u3044\u307e\u3059\u3002SoftDevice\u306b\u306f\u3001\uff13\u7a2e\u985e\u3042\u308a\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3001\u30bb\u30f3\u30c8\u30e9\u30eb\u3001\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u307e\u305f\u306f\u30bb\u30f3\u30c8\u30e9\u30eb\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002 \uff0a\u5927\u91cf\u66f8\u8fbc\u307f\u306e\u3068\u304d\u306f\u3001SoftDevice\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d50\u5408\u3057\u3072\u3068\u3064\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u66f8\u304d\u8fbc\u307f"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/#_2","text":"\u6700\u65b0\u306enRFgo Studio-Win64\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 nRFgo Studio-Win64\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148 https://www.nordicsemi.com/eng/nordic/Products/nRFgo-Studio/nRFgo-Studio-Win64/14964 \u89e3\u51cd\u3057\u3001nRFgoStudio\u3000\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u7d42\u4e86\u5f8c\u3001\u81ea\u52d5\u7684\u306b\u30c0\u30a4\u30e4\u30ed\u30b0\u304c\u958b\u304d\u3001J-link\u30c9\u30e9\u30a4\u30d0\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/#sdk","text":"\u958b\u767a\u306b\u5fc5\u8981\u306a\u30b5\u30f3\u30d7\u30eb\u53ca\u3073\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306a\u3069\uff09\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 nRFgo Studio-Win64\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5148 https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF5-SDK \u4eca\u56de\u306f\u300112.3\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002","title":"SDK\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/#nrfgostduio","text":"\u4e0b\u8a18\u306e\u3088\u3046\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002J-link lite\u3092Shinobi\u306b\u63a5\u7d9a\u3057\u3001Shinobi\u306e\u96fb\u6e90\uff083V\uff09\u3082ON\u306b\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u304b\u3089\u30d3\u30eb\u30c9\u3057\u305f\u3001hex\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3001nRFgoStudio\u3092\u8d77\u52d5\u3001\u5de6\u306e\u753b\u9762\u3000DeviceManeger\u306enRF5x Programming\u3092\u30af\u30ea\u30c3\u30af\u3002 \u3057\u3070\u3089\u304f\u3059\u308b\u3068\u3001\u6b63\u5e38\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001Region1,\u307e\u305f\u306fRegion0,Region1\u306a\u3069\u9818\u57df\u3092\u8868\u3059\u753b\u9762\u304c\u51fa\u3066\u304d\u307e\u3059\u3002","title":"nRFgoStduio\u3067\u30d5\u30a1\u30fc\u30a6\u30a7\u30a2\u66f8\u304d\u8fbc\u307f"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/#_3","text":"Erase all\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3002\u63a5\u7d9a\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3068\u304d\u306f\u3001Refresh\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002","title":"\u6d88\u53bb"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/#_4","text":"\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001Browse\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001ProgramSoftDeivce\u30bf\u30d6\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3055\u304d\u307b\u3069\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fSDK\u306e\u4e2d\u306b\\components\\softdevice\\s132\\hex\u304b\u3089\u5bfe\u8c61\u3068\u306a\u308b\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\uff08hex\u30d5\u30a1\u30a4\u30eb\uff09\u3092Program\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/3.NRFgoStudio_install/#_5","text":"Program Application\u30bf\u30d6\u3092\u30af\u30ea\u30c3\u30af\u3057Browse\u5bfe\u8c61\u306ehex\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u9078\u629e\u3057\u3001Program\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u753b\u9762\u306e\u4e0b\u306bsuccessfully\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/4.SDK_Preparation/","text":"\u958b\u767a\u306e\u4e8b\u524d\u6e96\u5099 SDK\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u30b3\u30d4\u30fc \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fSDK\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u7fa4\u3092\u30b3\u30d4\u30fc\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u3064\u304f\u308a\u307e\u3057\u3087\u3046\u3002 \u3053\u3053\u3067\u306f\u5229\u7528\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u30fc\u3092\u4f5c\u6210\u3057\u3001\u540d\u524d\u3092NRF_ensyu\u3068\u540d\u524d\u3092\u4ed8\u3051\u3066\u307e\u3059\u3002 SDK\u306e\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3092NRF_ensyu\u30d5\u30a9\u30eb\u30c0\u3078\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 SDK_Config.h\u3092\u30b3\u30d4\u30fc \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6709\u52b9\u7121\u52b9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308bSDK_Config.h\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304d\u307e\u3059\u3002 nRF5_SDK_12.3.0_d7731ad\u306e\u4e2d\u306eexample/ble_peripheral/ble_app_template/pca10040/s132/config/sdk_config.h\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0a\u8a18\u3067\u4f5c\u3063\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u5185\u3078\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002","title":"\u958b\u767a\u306e\u4e8b\u524d\u6e96\u5099"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/4.SDK_Preparation/#_1","text":"","title":"\u958b\u767a\u306e\u4e8b\u524d\u6e96\u5099"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/4.SDK_Preparation/#sdk","text":"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fSDK\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u7fa4\u3092\u30b3\u30d4\u30fc\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u3064\u304f\u308a\u307e\u3057\u3087\u3046\u3002 \u3053\u3053\u3067\u306f\u5229\u7528\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u30fc\u3092\u4f5c\u6210\u3057\u3001\u540d\u524d\u3092NRF_ensyu\u3068\u540d\u524d\u3092\u4ed8\u3051\u3066\u307e\u3059\u3002 SDK\u306e\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3092NRF_ensyu\u30d5\u30a9\u30eb\u30c0\u3078\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002","title":"SDK\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u30b3\u30d4\u30fc"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/4.SDK_Preparation/#sdk_configh","text":"\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6709\u52b9\u7121\u52b9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3067\u3042\u308bSDK_Config.h\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304d\u307e\u3059\u3002 nRF5_SDK_12.3.0_d7731ad\u306e\u4e2d\u306eexample/ble_peripheral/ble_app_template/pca10040/s132/config/sdk_config.h\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0a\u8a18\u3067\u4f5c\u3063\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u5185\u3078\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002","title":"SDK_Config.h\u3092\u30b3\u30d4\u30fc"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/","text":"Debuger ARM\u304c\u4ed5\u69d8\u6c7a\u3081\u3066\u3044\u308bCMSIS(CortexMicrocontrollerSoftwareInterfaceStandard)\u898f\u683c\u306eCMSIS-DAP\u306b\u3088\u308a\u534a\u5c0e\u4f53\u30e1\u30fc\u30ab\u30fc\u3084\u6a5f\u7a2e\u304c\u7570\u306a\u3063\u3066\u3082\u540c\u3058\u65b9\u6cd5\u3067\u30c7\u30d0\u30c3\u30af\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30ab\u306f\u3001\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u66f8\u304d\u63db\u3048\u308b\u4ee5\u5916\u306b\u3082\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5834\u6240\u3092\u6307\u5b9a(\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8)\u3057\u3066\u9014\u4e2d\u3067\u30b9\u30c8\u30c3\u30d7\u3057\u305f\u308a\u3001\u3042\u308b\u3044\u306f\u3001\u4e00\u884c\u3065\u3064\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u5206\u6790\u89e3\u6790\u3067\u304d\u308b\u3002\u305d\u306e\u7d50\u679c\u3001\u958b\u767a\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\u5909\u6570\u3084\u5b9a\u6570\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u305f\u308a\u3001\u5909\u66f4\u3082\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 ARM\u30de\u30a4\u30b3\u30f3\u306e\u30c7\u30d0\u30c3\u30af\u306b\u306f\u3001JTAG\u3068\u547c\u3070\u308c\u308b\u901a\u4fe1\u898f\u683c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002ARM\u30de\u30a4\u30b3\u30f3\u306e\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002 \u672c\u6765JTAG\u306f\u3001IC\u306e\u5185\u90e8\u3092\u76e3\u8996\u3057\u305f\u308a\u3001\u30c6\u30b9\u30c8\u56de\u8def\u306b\u3088\u308bIC\u691c\u67fb\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u898f\u683c\u3067\u30d0\u30a6\u30f3\u30c0\u30ea\u30b9\u30ad\u30e3\u30f3\u3068\u3088\u3070\u308c\u308b\u6a5f\u80fd\u3067\u3059\u3002 \u4e3b\u306b\u5de5\u5834\u3067\u4f7f\u308f\u308c\u308bIC\u691c\u67fb\u7528\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3057\u305f\u304c\u3001\u305d\u306e\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u30c7\u30d0\u30c3\u30af\u306b\u3082\u4f7f\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u30c7\u30d0\u30c3\u30ab\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u306fJTAG\uff08\uff17\u7dda\uff09\u3068SWD\uff08\uff15\u7dda\uff09\u304c\u3042\u308a\u3001Shinobi\u306b\u306f\u3001\u63a5\u7d9a\u672c\u6570\u304c\u5c11\u306a\u304f\u3066\u6e08\u3080SWD\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30ab\u306e\u30e1\u30fc\u30ab\u30fc U-Link J-Link ST-Link \u4fa1\u683c\u306f\u6570\u5343\u5186\uff5e\u6570\u4e07\u5186\u3002EDU\u30e9\u30a4\u30bb\u30f3\u30b9\uff08\u6559\u80b2\u7528\uff09\u4f4e\u4fa1\u683c\u3067\u3059\u304c\u3001\u30d3\u30b8\u30cd\u30b9\u306b\u306f\u4f7f\u3048\u306a\u3044\u898f\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u308c\u305e\u308c\u30b0\u30ec\u30fc\u30c9\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u3001Cortex\u30b7\u30ea\u30fc\u30ba\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30de\u30a4\u30b3\u30f3\u3084\u7d71\u5408\u74b0\u5883\u306a\u3069\u78ba\u8a8d\u304c\u5fc5\u8981\u3067\u3059\u3002 uv5\u5bfe\u5fdc\u306e\u30c7\u30d0\u30c3\u30ab J-LINK/J-TRACE Cortex \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 J-Link Pro $998 SEGGER J-Link ULTRA+2 $748 SEGGER J-Link PLUS $598 SEGGER J-Link BASE $378 SEGGER J-Link EDU $60 SEGGER J-Trace Cortex-M5 $1248 SEGGER J-Trace ARM6 $1248 SEGGER \u6700\u3082\u5b89\u3044 J-Link BASE\u3067\u3001\u65e5\u672c\u8cfc\u5165\u306e\u5834\u5408 7\u4e07\u5186\u7a0b\u5ea6\u3002 ULINK2 \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 ULINK2 \u00a552,985.3 mouser Stellaris\u00ae ICDC Stellaris\u00ae\u30a4\u30f3\u30b5\u30fc\u30ad\u30c3\u30c8\u30fb\u30c7\u30d0\u30c3\u30b0\u30fb\u30a4\u30f3\u30bf\u30fc \u30d5\u30a7\u30a4\u30b9 (ICDI)\u306e\u7565\u3002LM4F \u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u3002 JTAGjet \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 ULINK2 $2,100 SIGNUM Systems ULINK Pro \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 ULINK Pro \u00a5167,675 mouser NULINK \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 NULINK Pro $49 digikey Silicon Lab UDA Debugger \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 UDA Debugger $40.32 mouser STLINK \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 STLINK $22.28 ST Micro CMSIS DAP Debugger CMSIS-DAP\u306fARM\u306b\u3088\u3063\u3066\u30c7\u30b6\u30a4\u30f3\u3001\u6a19\u6e96\u5316\u3055\u308c\u305fUSB\u306e\u30c7\u30d0\u30c3\u30b0\u30a4\u30f3\u30d5\u30a1\u30fc\u30d5\u30a7\u30fc\u30b9\u30fb\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2 \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 LPC2 \u00a52,682.8 mouser PEMicro Debugger \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 PEMicro Debugger $699 PEMicro","title":"Debuger"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#debuger","text":"ARM\u304c\u4ed5\u69d8\u6c7a\u3081\u3066\u3044\u308bCMSIS(CortexMicrocontrollerSoftwareInterfaceStandard)\u898f\u683c\u306eCMSIS-DAP\u306b\u3088\u308a\u534a\u5c0e\u4f53\u30e1\u30fc\u30ab\u30fc\u3084\u6a5f\u7a2e\u304c\u7570\u306a\u3063\u3066\u3082\u540c\u3058\u65b9\u6cd5\u3067\u30c7\u30d0\u30c3\u30af\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30ab\u306f\u3001\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u66f8\u304d\u63db\u3048\u308b\u4ee5\u5916\u306b\u3082\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5834\u6240\u3092\u6307\u5b9a(\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8)\u3057\u3066\u9014\u4e2d\u3067\u30b9\u30c8\u30c3\u30d7\u3057\u305f\u308a\u3001\u3042\u308b\u3044\u306f\u3001\u4e00\u884c\u3065\u3064\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u5206\u6790\u89e3\u6790\u3067\u304d\u308b\u3002\u305d\u306e\u7d50\u679c\u3001\u958b\u767a\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\u5909\u6570\u3084\u5b9a\u6570\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u305f\u308a\u3001\u5909\u66f4\u3082\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 ARM\u30de\u30a4\u30b3\u30f3\u306e\u30c7\u30d0\u30c3\u30af\u306b\u306f\u3001JTAG\u3068\u547c\u3070\u308c\u308b\u901a\u4fe1\u898f\u683c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002ARM\u30de\u30a4\u30b3\u30f3\u306e\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002 \u672c\u6765JTAG\u306f\u3001IC\u306e\u5185\u90e8\u3092\u76e3\u8996\u3057\u305f\u308a\u3001\u30c6\u30b9\u30c8\u56de\u8def\u306b\u3088\u308bIC\u691c\u67fb\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u898f\u683c\u3067\u30d0\u30a6\u30f3\u30c0\u30ea\u30b9\u30ad\u30e3\u30f3\u3068\u3088\u3070\u308c\u308b\u6a5f\u80fd\u3067\u3059\u3002 \u4e3b\u306b\u5de5\u5834\u3067\u4f7f\u308f\u308c\u308bIC\u691c\u67fb\u7528\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3057\u305f\u304c\u3001\u305d\u306e\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u30c7\u30d0\u30c3\u30af\u306b\u3082\u4f7f\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u30c7\u30d0\u30c3\u30ab\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u306fJTAG\uff08\uff17\u7dda\uff09\u3068SWD\uff08\uff15\u7dda\uff09\u304c\u3042\u308a\u3001Shinobi\u306b\u306f\u3001\u63a5\u7d9a\u672c\u6570\u304c\u5c11\u306a\u304f\u3066\u6e08\u3080SWD\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Debuger"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#_1","text":"U-Link J-Link ST-Link \u4fa1\u683c\u306f\u6570\u5343\u5186\uff5e\u6570\u4e07\u5186\u3002EDU\u30e9\u30a4\u30bb\u30f3\u30b9\uff08\u6559\u80b2\u7528\uff09\u4f4e\u4fa1\u683c\u3067\u3059\u304c\u3001\u30d3\u30b8\u30cd\u30b9\u306b\u306f\u4f7f\u3048\u306a\u3044\u898f\u7d04\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u308c\u305e\u308c\u30b0\u30ec\u30fc\u30c9\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u3001Cortex\u30b7\u30ea\u30fc\u30ba\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30de\u30a4\u30b3\u30f3\u3084\u7d71\u5408\u74b0\u5883\u306a\u3069\u78ba\u8a8d\u304c\u5fc5\u8981\u3067\u3059\u3002","title":"\u30c7\u30d0\u30c3\u30ab\u306e\u30e1\u30fc\u30ab\u30fc"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#uv5","text":"","title":"uv5\u5bfe\u5fdc\u306e\u30c7\u30d0\u30c3\u30ab"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#j-linkj-trace-cortex","text":"\u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 J-Link Pro $998 SEGGER J-Link ULTRA+2 $748 SEGGER J-Link PLUS $598 SEGGER J-Link BASE $378 SEGGER J-Link EDU $60 SEGGER J-Trace Cortex-M5 $1248 SEGGER J-Trace ARM6 $1248 SEGGER \u6700\u3082\u5b89\u3044 J-Link BASE\u3067\u3001\u65e5\u672c\u8cfc\u5165\u306e\u5834\u5408 7\u4e07\u5186\u7a0b\u5ea6\u3002","title":"J-LINK/J-TRACE Cortex"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#ulink2","text":"\u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 ULINK2 \u00a552,985.3 mouser","title":"ULINK2"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#stellaris-icdc","text":"Stellaris\u00ae\u30a4\u30f3\u30b5\u30fc\u30ad\u30c3\u30c8\u30fb\u30c7\u30d0\u30c3\u30b0\u30fb\u30a4\u30f3\u30bf\u30fc \u30d5\u30a7\u30a4\u30b9 (ICDI)\u306e\u7565\u3002LM4F \u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u3002","title":"Stellaris\u00ae ICDC"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#jtagjet","text":"\u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 ULINK2 $2,100 SIGNUM Systems","title":"JTAGjet"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#ulink-pro","text":"\u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 ULINK Pro \u00a5167,675 mouser","title":"ULINK Pro"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#nulink","text":"\u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 NULINK Pro $49 digikey","title":"NULINK"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#silicon-lab-uda-debugger","text":"\u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 UDA Debugger $40.32 mouser","title":"Silicon Lab UDA Debugger"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#stlink","text":"\u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 STLINK $22.28 ST Micro","title":"STLINK"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#cmsis-dap-debugger","text":"CMSIS-DAP\u306fARM\u306b\u3088\u3063\u3066\u30c7\u30b6\u30a4\u30f3\u3001\u6a19\u6e96\u5316\u3055\u308c\u305fUSB\u306e\u30c7\u30d0\u30c3\u30b0\u30a4\u30f3\u30d5\u30a1\u30fc\u30d5\u30a7\u30fc\u30b9\u30fb\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2 \u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 LPC2 \u00a52,682.8 mouser","title":"CMSIS DAP Debugger"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/5.Debuger/#pemicro-debugger","text":"\u6a5f\u7a2e \u4fa1\u683c \u8a73\u7d30 PEMicro Debugger $699 PEMicro","title":"PEMicro Debugger"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Programming/","text":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c4\u30fc\u30eb \u30de\u30a4\u30b3\u30f3\u3078\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u306e\u306b\uff12\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002 \u5b9f\u88c5\u524d\u5f8c\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3002 \u30de\u30a4\u30b3\u30f3\u5b9f\u88c5\u524d\u306b\u30bd\u30b1\u30c3\u30c8\u4f7f\u7528\u3057\u3066\u30de\u30a4\u30b3\u30f3\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3002 \u88fd\u9020\u3067\u306f\u3053\u3061\u3089\u3067\u884c\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\u30d4\u30f3\u3092\u51fa\u3059\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002 \u63d0\u4f9b\u3057\u3066\u3044\u308b\u4f1a\u793e\u306fElnec\u3001Hi-Lo Systems \u30de\u30a4\u30b3\u30f3\u5b9f\u88c5\u5f8c\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u65b9\u6cd5(ISP) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306b\u306f\u901a\u5e38\u3053\u3061\u3089\u3092\u4f7f\u3044\u307e\u3059\u3002 \u63d0\u4f9b\u3057\u3066\u3044\u308b\u4f1a\u793e\u306f\u3001SEGGER,PEmicro SEGGER\u4f7f\u7528\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u304c\u3042\u308a\u3001nrfjprog\u3092\u4f7f\u3048\u3070\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3067\u30de\u30a4\u30b3\u30f3\u3078\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002\u30cf\u30fc\u30c9\u3054\u3068\u306b\u7570\u306a\u3063\u305f\u5024\u3092ROM\u306b\u66f8\u304d\u8fbc\u307f\u306a\u3069\u304c\u3067\u304d\u3066\u4fbf\u5229\u3067\u3059\u3002 \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html \u30c0\u30a4\u30ec\u30af\u30c8\u30c6\u30b9\u30c8\u30e2\u30fc\u30c9\uff08DTM\uff09 , \u9001\u4fe1\u96fb\u529b\u3068\u53d7\u4fe1\u611f\u5ea6,\u5468\u6ce2\u6570\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u30c9\u30ea\u30d5\u30c8,\u5909\u8abf\u7279\u6027,\u30d1\u30b1\u30c3\u30c8\u30a8\u30e9\u30fc\u7387,\u76f8\u4e92\u5909\u8abf\u6027\u80fd\u306a\u3069\u30cf\u30fc\u30c9\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30e2\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 \u53c2\u8003URL \u30c0\u30a4\u30ec\u30af\u30c8\u30c6\u30b9\u30c8\u30e2\u30fc\u30c9 https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk52.v0.9.1%2Fble_sdk_app_dtm_serial.html \u96fb\u529b\u8a08\u7b97 \u5b9f\u6e2c\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u304a\u304a\u3088\u305d\u306e\u96fb\u529b\u304c\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5b9f\u88c5\u306b\u3088\u308a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4f5c\u6210\u5f8c\u306f\u5fc5\u305aPowerProfilerKit\u7b49\u3067\u5b9f\u969b\u306e\u96fb\u529b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u53c2\u8003URL https://devzone.nordicsemi.com/power/","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c4\u30fc\u30eb"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Programming/#_1","text":"\u30de\u30a4\u30b3\u30f3\u3078\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u306e\u306b\uff12\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c4\u30fc\u30eb"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Programming/#_2","text":"\u30de\u30a4\u30b3\u30f3\u5b9f\u88c5\u524d\u306b\u30bd\u30b1\u30c3\u30c8\u4f7f\u7528\u3057\u3066\u30de\u30a4\u30b3\u30f3\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3002 \u88fd\u9020\u3067\u306f\u3053\u3061\u3089\u3067\u884c\u3046\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\u30d4\u30f3\u3092\u51fa\u3059\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3067\u304d\u307e\u3059\u3002 \u63d0\u4f9b\u3057\u3066\u3044\u308b\u4f1a\u793e\u306fElnec\u3001Hi-Lo Systems","title":"\u5b9f\u88c5\u524d\u5f8c\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3002"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Programming/#isp","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306b\u306f\u901a\u5e38\u3053\u3061\u3089\u3092\u4f7f\u3044\u307e\u3059\u3002 \u63d0\u4f9b\u3057\u3066\u3044\u308b\u4f1a\u793e\u306f\u3001SEGGER,PEmicro SEGGER\u4f7f\u7528\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u304c\u3042\u308a\u3001nrfjprog\u3092\u4f7f\u3048\u3070\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3067\u30de\u30a4\u30b3\u30f3\u3078\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002\u30cf\u30fc\u30c9\u3054\u3068\u306b\u7570\u306a\u3063\u305f\u5024\u3092ROM\u306b\u66f8\u304d\u8fbc\u307f\u306a\u3069\u304c\u3067\u304d\u3066\u4fbf\u5229\u3067\u3059\u3002 \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html","title":"\u30de\u30a4\u30b3\u30f3\u5b9f\u88c5\u5f8c\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u65b9\u6cd5(ISP)"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Programming/#dtm","text":", \u9001\u4fe1\u96fb\u529b\u3068\u53d7\u4fe1\u611f\u5ea6,\u5468\u6ce2\u6570\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u30c9\u30ea\u30d5\u30c8,\u5909\u8abf\u7279\u6027,\u30d1\u30b1\u30c3\u30c8\u30a8\u30e9\u30fc\u7387,\u76f8\u4e92\u5909\u8abf\u6027\u80fd\u306a\u3069\u30cf\u30fc\u30c9\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30e2\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002 \u53c2\u8003URL \u30c0\u30a4\u30ec\u30af\u30c8\u30c6\u30b9\u30c8\u30e2\u30fc\u30c9 https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk52.v0.9.1%2Fble_sdk_app_dtm_serial.html","title":"\u30c0\u30a4\u30ec\u30af\u30c8\u30c6\u30b9\u30c8\u30e2\u30fc\u30c9\uff08DTM\uff09"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Programming/#_3","text":"\u5b9f\u6e2c\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u304a\u304a\u3088\u305d\u306e\u96fb\u529b\u304c\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5b9f\u88c5\u306b\u3088\u308a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4f5c\u6210\u5f8c\u306f\u5fc5\u305aPowerProfilerKit\u7b49\u3067\u5b9f\u969b\u306e\u96fb\u529b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u53c2\u8003URL https://devzone.nordicsemi.com/power/","title":"\u96fb\u529b\u8a08\u7b97"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Protocol/","text":"NRF\uff15\u30b7\u30ea\u30fc\u30ba\u3000\u30d7\u30ed\u30c8\u30b3\u30eb NRF\uff15\u30b7\u30ea\u30fc\u30ba\u306f\u30012.4GHz\u5e2f\uff082.400\u20132.483 GHz\u3000ISM\u30d0\u30f3\u30c9\uff09\u3000Bluetooth,ANT,IEEE802.15.4,Thred\u304c\u4f7f\u3048\u307e\u3059\u3002 Bluetooth\uff15\u306e\u5bfe\u5fdc\u6a5f\u5668\u306f \u63a5\u7d9a\u6570\u306f\u6700\u5927\uff12\uff10\u307e\u3067\u30c7\u30fc\u30bf\u30ec\u30fc\u30c8 \u6700\u59272Mpbs \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u306f\u3001\u30a6\u30a8\u30a2\u30e9\u30d6\u30eb\u3001\u81ea\u52d5\u8eca\u3001\u30bb\u30f3\u30b5\u30fc\u30d5\u30a3\u30c3\u30c8\u30cd\u30b9\u3001\u304a\u3082\u3061\u3083\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3001\u5468\u8fba\u6a5f\u5668\u3001\u30ea\u30e2\u30b3\u30f3\u7b49\u306b\u5fdc\u7528\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html","title":"NRF\uff15\u30b7\u30ea\u30fc\u30ba\u3000\u30d7\u30ed\u30c8\u30b3\u30eb"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Protocol/#nrf5","text":"NRF\uff15\u30b7\u30ea\u30fc\u30ba\u306f\u30012.4GHz\u5e2f\uff082.400\u20132.483 GHz\u3000ISM\u30d0\u30f3\u30c9\uff09\u3000Bluetooth,ANT,IEEE802.15.4,Thred\u304c\u4f7f\u3048\u307e\u3059\u3002 Bluetooth\uff15\u306e\u5bfe\u5fdc\u6a5f\u5668\u306f \u63a5\u7d9a\u6570\u306f\u6700\u5927\uff12\uff10\u307e\u3067\u30c7\u30fc\u30bf\u30ec\u30fc\u30c8 \u6700\u59272Mpbs \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u306f\u3001\u30a6\u30a8\u30a2\u30e9\u30d6\u30eb\u3001\u81ea\u52d5\u8eca\u3001\u30bb\u30f3\u30b5\u30fc\u30d5\u30a3\u30c3\u30c8\u30cd\u30b9\u3001\u304a\u3082\u3061\u3083\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3001\u5468\u8fba\u6a5f\u5668\u3001\u30ea\u30e2\u30b3\u30f3\u7b49\u306b\u5fdc\u7528\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html","title":"NRF\uff15\u30b7\u30ea\u30fc\u30ba\u3000\u30d7\u30ed\u30c8\u30b3\u30eb"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Shinobi/Shinobi_CustomBoard/","text":"Shinobi\u30dc\u30fc\u30c9\u5b9a\u7fa9 \u30de\u30a4\u30b3\u30f3\u3092\u4f7f\u3046\u306b\u306f\u69d8\u3005\u306a\u30d4\u30f3\u8a2d\u5b9a\u3084\u767a\u632f\u56de\u8def\u8a2d\u5b9a\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 LED\u30d4\u30f3\u3001\u30dc\u30bf\u30f3\u3001UART\u30d4\u30f3\u306e\u5b9a\u7fa9 \u767a\u632f\u5668\u306e\u5b9a\u7fa9 Shinobi\u56de\u8def\u56f3 shinobi\u306f\uff11\uff18\u30d4\u30f3\u306f\u3001LED\u3001\u5916\u90e8\u6c34\u667632kHz\u642d\u8f09 UART\u30d4\u30f3 I2C(TWI)\u30d4\u30f3 \u30dc\u30fc\u30c9\u306e\u5b9a\u7fa9 \u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u3069\u3053\u304b\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002 \u30b5\u30f3\u30d7\u30eb\u3054\u5229\u7528\u3067\u306f\u3001\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://github.com/FaBoPlatform/NRFDocs/blob/master/brick_analog/101_brick_analog_led.md custom_borad.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // Shinobi Dev Board #ifndef CUSTOM_BOARD_H #define CUSTOM_BOARD_H #define LEDS_NUMBER 1 #define LED_1 18 #define LEDS_LIST { LED_1 } #define LEDS_ACTIVE_STATE 1 #define BSP_LED_0 LED_1 #define BUTTONS_NUMBER 1 #define BUTTON_0 16 #define BUTTONS_ACTIVE_STATE 0 #define BSP_BUTTON_0 BUTTON_0 #define BUTTONS_LIST { BUTTON_0 } #define BUTTON_PULL NRF_GPIO_PIN_PULLUP #define LEDS_INV_MASK 0 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 10 #define RTS_PIN_NUMBER 8 #define HWFC false #define SPIS_MISO_PIN 20 // SPI MISO signal. #define SPIS_CSN_PIN 21 // SPI CSN signal. #define SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SPIS_SCK_PIN 23 // SPI SCK signal. #define SPIM0_SCK_PIN 23u /**< SPI clock GPIO pin number. */ #define SPIM0_MOSI_PIN 20u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM0_MISO_PIN 22u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM0_SS_PIN 21u /**< SPI Slave Select GPIO pin number. */ #define SPIM1_SCK_PIN 29u /**< SPI clock GPIO pin number. */ #define SPIM1_MOSI_PIN 24u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM1_MISO_PIN 28u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM1_SS_PIN 25u /**< SPI Slave Select GPIO pin number. */ // serialization APPLICATION board // UART // this configuration works with the SPI wires setup #define SER_APP_RX_PIN 20 // UART RX pin number. #define SER_APP_TX_PIN 22 // UART TX pin number. #define SER_APP_CTS_PIN 23 // UART Clear To Send pin number. #define SER_APP_RTS_PIN 21 // UART Request To Send pin number. // serialization CONNECTIVITY board // UART #if 0 #define SER_CON_RX_PIN 22 // UART RX pin number. #define SER_CON_TX_PIN 20 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #else // this configuration works with the SPI wires setup #define SER_CON_RX_PIN 20 // UART RX pin number. #define SER_CON_TX_PIN 22 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #endif #define SER_CONN_ASSERT_LED_PIN LED_0 #define NRF_CLOCK_LFCLKSRC {.source = NRF_CLOCK_LF_SRC_XTAL, \\ .rc_ctiv = 0, \\ .rc_temp_ctiv = 0, \\ .xtal_accuracy = NRF_CLOCK_LF_XTAL_ACCURACY_20_PPM} #endif","title":"Shinobi\u30dc\u30fc\u30c9\u5b9a\u7fa9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Shinobi/Shinobi_CustomBoard/#shinobi","text":"\u30de\u30a4\u30b3\u30f3\u3092\u4f7f\u3046\u306b\u306f\u69d8\u3005\u306a\u30d4\u30f3\u8a2d\u5b9a\u3084\u767a\u632f\u56de\u8def\u8a2d\u5b9a\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 LED\u30d4\u30f3\u3001\u30dc\u30bf\u30f3\u3001UART\u30d4\u30f3\u306e\u5b9a\u7fa9 \u767a\u632f\u5668\u306e\u5b9a\u7fa9","title":"Shinobi\u30dc\u30fc\u30c9\u5b9a\u7fa9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Shinobi/Shinobi_CustomBoard/#shinobi_1","text":"shinobi\u306f\uff11\uff18\u30d4\u30f3\u306f\u3001LED\u3001\u5916\u90e8\u6c34\u667632kHz\u642d\u8f09 UART\u30d4\u30f3 I2C(TWI)\u30d4\u30f3","title":"Shinobi\u56de\u8def\u56f3"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Shinobi/Shinobi_CustomBoard/#_1","text":"\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u3069\u3053\u304b\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002 \u30b5\u30f3\u30d7\u30eb\u3054\u5229\u7528\u3067\u306f\u3001\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://github.com/FaBoPlatform/NRFDocs/blob/master/brick_analog/101_brick_analog_led.md custom_borad.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // Shinobi Dev Board #ifndef CUSTOM_BOARD_H #define CUSTOM_BOARD_H #define LEDS_NUMBER 1 #define LED_1 18 #define LEDS_LIST { LED_1 } #define LEDS_ACTIVE_STATE 1 #define BSP_LED_0 LED_1 #define BUTTONS_NUMBER 1 #define BUTTON_0 16 #define BUTTONS_ACTIVE_STATE 0 #define BSP_BUTTON_0 BUTTON_0 #define BUTTONS_LIST { BUTTON_0 } #define BUTTON_PULL NRF_GPIO_PIN_PULLUP #define LEDS_INV_MASK 0 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 10 #define RTS_PIN_NUMBER 8 #define HWFC false #define SPIS_MISO_PIN 20 // SPI MISO signal. #define SPIS_CSN_PIN 21 // SPI CSN signal. #define SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SPIS_SCK_PIN 23 // SPI SCK signal. #define SPIM0_SCK_PIN 23u /**< SPI clock GPIO pin number. */ #define SPIM0_MOSI_PIN 20u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM0_MISO_PIN 22u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM0_SS_PIN 21u /**< SPI Slave Select GPIO pin number. */ #define SPIM1_SCK_PIN 29u /**< SPI clock GPIO pin number. */ #define SPIM1_MOSI_PIN 24u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM1_MISO_PIN 28u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM1_SS_PIN 25u /**< SPI Slave Select GPIO pin number. */ // serialization APPLICATION board // UART // this configuration works with the SPI wires setup #define SER_APP_RX_PIN 20 // UART RX pin number. #define SER_APP_TX_PIN 22 // UART TX pin number. #define SER_APP_CTS_PIN 23 // UART Clear To Send pin number. #define SER_APP_RTS_PIN 21 // UART Request To Send pin number. // serialization CONNECTIVITY board // UART #if 0 #define SER_CON_RX_PIN 22 // UART RX pin number. #define SER_CON_TX_PIN 20 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #else // this configuration works with the SPI wires setup #define SER_CON_RX_PIN 20 // UART RX pin number. #define SER_CON_TX_PIN 22 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #endif #define SER_CONN_ASSERT_LED_PIN LED_0 #define NRF_CLOCK_LFCLKSRC {.source = NRF_CLOCK_LF_SRC_XTAL, \\ .rc_ctiv = 0, \\ .rc_temp_ctiv = 0, \\ .xtal_accuracy = NRF_CLOCK_LF_XTAL_ACCURACY_20_PPM} #endif","title":"\u30dc\u30fc\u30c9\u306e\u5b9a\u7fa9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer/","text":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a \u5fc5\u8981\u306a\u30cf\u30fc\u30c9 CC2540 USB Evaluation Module Kit http://www.ti.com/tool/cc2540emk-usb \u5fc5\u8981\u306a\u30bd\u30d5\u30c8 SmartRF Protocol Packet Sniffer http://www.tij.co.jp/tool/jp/packet-sniffer \u624b\u9806 \u4ee5\u4e0b\u306eURL\u3088\u308a\u3001SmartRF Protocol Packet Sniffer\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 http://www.tij.co.jp/tool/jp/packet-sniffer \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u3001\u300cSetup_SmartRF_Packet_Sniffer_2.18.1.exe\u300d\u3092\u5b9f\u884c \u898f\u7d04\u306b\u540c\u610f\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5b8c\u4e86\u5f8c\u3001Packet Sniffer\u3092\u8d77\u52d5 select Protocol and chip type\u304b\u3089\u300cBluetooth Low Energy\u300d\u3092\u9078\u629e CC2540 USB Evaluation Module Kit\u3092PC\u306eUSB\u30dd\u30fc\u30c8\u306b\u63a5\u7d9a \u753b\u9762\u4e0b\u90e8\u306b\u30c7\u30d0\u30a4\u30b9\u540d\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3001\u753b\u9762\u4e0a\u90e8\u306e\u300c\u25b6\ufe0e\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u4e0b \u753b\u9762\u4e0a\u306b\u30d1\u30b1\u30c3\u30c8\u306e\u60c5\u5831\u304c\u8868\u793a","title":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer/#_1","text":"","title":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer/#_2","text":"CC2540 USB Evaluation Module Kit http://www.ti.com/tool/cc2540emk-usb","title":"\u5fc5\u8981\u306a\u30cf\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer/#_3","text":"SmartRF Protocol Packet Sniffer http://www.tij.co.jp/tool/jp/packet-sniffer","title":"\u5fc5\u8981\u306a\u30bd\u30d5\u30c8"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer/#_4","text":"\u4ee5\u4e0b\u306eURL\u3088\u308a\u3001SmartRF Protocol Packet Sniffer\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 http://www.tij.co.jp/tool/jp/packet-sniffer \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u3001\u300cSetup_SmartRF_Packet_Sniffer_2.18.1.exe\u300d\u3092\u5b9f\u884c \u898f\u7d04\u306b\u540c\u610f\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5b8c\u4e86\u5f8c\u3001Packet Sniffer\u3092\u8d77\u52d5 select Protocol and chip type\u304b\u3089\u300cBluetooth Low Energy\u300d\u3092\u9078\u629e CC2540 USB Evaluation Module Kit\u3092PC\u306eUSB\u30dd\u30fc\u30c8\u306b\u63a5\u7d9a \u753b\u9762\u4e0b\u90e8\u306b\u30c7\u30d0\u30a4\u30b9\u540d\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3001\u753b\u9762\u4e0a\u90e8\u306e\u300c\u25b6\ufe0e\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u4e0b \u753b\u9762\u4e0a\u306b\u30d1\u30b1\u30c3\u30c8\u306e\u60c5\u5831\u304c\u8868\u793a","title":"\u624b\u9806"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer_nrf/","text":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a \u5fc5\u8981\u306a\u30cf\u30fc\u30c9 \u578b\u756a \u5199\u771f PCA10000 PCA10031 \u5fc5\u8981\u306a\u30bd\u30d5\u30c8 Windows7\u4ee5\u964d nRFgo Studio nRF-Sniffer Wireshark v1.10.1\u4ee5\u964d USB Dongle\u306e\u8a8d\u8b58 VirtualBox\u3067\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067USB Dongle\u3092\u8a8d\u8a3c\u3055\u305b\u308b\u3002 USB Dongle\u3092\u3055\u3057\u305f\u72b6\u614b\u3067\u3001USB\u306e\u8a2d\u5b9a\u3092\u958b\u304d\u3001USB \u30d5\u30a3\u30eb\u30bf\u306b\u8ffd\u52a0\u3059\u308b 2.USB\u30d5\u30a3\u30eb\u30bf\u306e\u7de8\u96c6\u3092\u9078\u629e\u3057\u3001\u30e1\u30fc\u30ab\u30fc\u540d\u3001\u88fd\u54c1\u540d\u3001\u30b7\u30ea\u30a2\u30ebNo\u3092\u524a\u9664\u3059\u308b USB Dongle\u3092\u30de\u30b7\u30f3\u304b\u3089\u629c\u304d\u3001Windows10\u3092\u518d\u8d77\u52d5\u3057\u305f\u306e\u3061\u3001USB Dongle\u3092\u3055\u3059\u3002\u8a8d\u8b58\u3055\u308c\u308b\u3068\u3001SEGGER J-LINK[0100]\u306e\u524d\u306b\u30c1\u30a7\u30c3\u30af\u30de\u30fc\u30af\u304c\u73fe\u308c\u308b\u3002 \u6e96\u5099 nRFgoStudio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u5bfe\u5fdc\u30cf\u30fc\u30c9\u3092USB\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u30b9\u30cb\u30d5\u30a1\u5bfe\u8c61\u306eBLE\u6a5f\u5668\u3092\u5468\u8fba\u3067\u4f5c\u52d5\u3055\u305b\u307e\u3059\u3002 nRF-Sniffer\u306ezip\u3092\u89e3\u51cd\u3057\u307e\u3059\u3002 nRFgo Studio\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \u5de6\u306eDeviceManager\u304b\u3089\u63a5\u7d9a\u3057\u305f\u6a5f\u5668\u3092\u9078\u3073\u307e\u3059\u3002 \u300cErase all\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u65e2\u5b58\u306e\u30d5\u30a1\u30fc\u30e0\u3092\u524a\u9664\u3057\u307e\u3059\u3002 Program Application\u306e\u30bf\u30d6\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Browse\u304b\u3089nRF-Sniffer\u306eFirmware\u30d5\u30a9\u30eb\u30c0\u5185\u306ehex\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Program \u3067\u30d5\u30a1\u30fc\u30e0\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 \u63a5\u7d9a\u3057\u3066\u3044\u308bBLE\u6a5f\u5668\u306f\u30d1\u30b1\u30c3\u30c8\u53d7\u4fe1\u6642\u306bLED\u304c\u70b9\u706f\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Wireshark\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u30b9\u30cb\u30d5 ble-sniffer_xxx_Sniffer.exe \u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u30e1\u30cb\u30e5\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u4e2d\u6bb5\u306b\u4f7f\u7528\u53ef\u80fd\u306a\u30b3\u30de\u30f3\u30c9\u3001\u4e0b\u6bb5\u306b\u691c\u51fa\u3055\u308c\u305f\u30c7\u30d0\u30a4\u30b9\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u4e0a\u4e0b\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3057\u3001Enter\u30ad\u30fc\u3067\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e\u3057\u307e\u3059\u3002 w\u30ad\u30fc\u3067Wireshark\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002 \u9078\u629e\u3057\u305f\u30c7\u30d0\u30a4\u30b9\u306e\u30d1\u30b1\u30c3\u30c8\u8a73\u7d30\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002","title":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer_nrf/#_1","text":"","title":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer_nrf/#_2","text":"\u578b\u756a \u5199\u771f PCA10000 PCA10031","title":"\u5fc5\u8981\u306a\u30cf\u30fc\u30c9"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer_nrf/#_3","text":"Windows7\u4ee5\u964d nRFgo Studio nRF-Sniffer Wireshark v1.10.1\u4ee5\u964d","title":"\u5fc5\u8981\u306a\u30bd\u30d5\u30c8"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer_nrf/#usb-dongle","text":"VirtualBox\u3067\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067USB Dongle\u3092\u8a8d\u8a3c\u3055\u305b\u308b\u3002 USB Dongle\u3092\u3055\u3057\u305f\u72b6\u614b\u3067\u3001USB\u306e\u8a2d\u5b9a\u3092\u958b\u304d\u3001USB \u30d5\u30a3\u30eb\u30bf\u306b\u8ffd\u52a0\u3059\u308b 2.USB\u30d5\u30a3\u30eb\u30bf\u306e\u7de8\u96c6\u3092\u9078\u629e\u3057\u3001\u30e1\u30fc\u30ab\u30fc\u540d\u3001\u88fd\u54c1\u540d\u3001\u30b7\u30ea\u30a2\u30ebNo\u3092\u524a\u9664\u3059\u308b USB Dongle\u3092\u30de\u30b7\u30f3\u304b\u3089\u629c\u304d\u3001Windows10\u3092\u518d\u8d77\u52d5\u3057\u305f\u306e\u3061\u3001USB Dongle\u3092\u3055\u3059\u3002\u8a8d\u8b58\u3055\u308c\u308b\u3068\u3001SEGGER J-LINK[0100]\u306e\u524d\u306b\u30c1\u30a7\u30c3\u30af\u30de\u30fc\u30af\u304c\u73fe\u308c\u308b\u3002","title":"USB Dongle\u306e\u8a8d\u8b58"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer_nrf/#_4","text":"nRFgoStudio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u5bfe\u5fdc\u30cf\u30fc\u30c9\u3092USB\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u30b9\u30cb\u30d5\u30a1\u5bfe\u8c61\u306eBLE\u6a5f\u5668\u3092\u5468\u8fba\u3067\u4f5c\u52d5\u3055\u305b\u307e\u3059\u3002 nRF-Sniffer\u306ezip\u3092\u89e3\u51cd\u3057\u307e\u3059\u3002 nRFgo Studio\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \u5de6\u306eDeviceManager\u304b\u3089\u63a5\u7d9a\u3057\u305f\u6a5f\u5668\u3092\u9078\u3073\u307e\u3059\u3002 \u300cErase all\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u65e2\u5b58\u306e\u30d5\u30a1\u30fc\u30e0\u3092\u524a\u9664\u3057\u307e\u3059\u3002 Program Application\u306e\u30bf\u30d6\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Browse\u304b\u3089nRF-Sniffer\u306eFirmware\u30d5\u30a9\u30eb\u30c0\u5185\u306ehex\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Program \u3067\u30d5\u30a1\u30fc\u30e0\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 \u63a5\u7d9a\u3057\u3066\u3044\u308bBLE\u6a5f\u5668\u306f\u30d1\u30b1\u30c3\u30c8\u53d7\u4fe1\u6642\u306bLED\u304c\u70b9\u706f\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Wireshark\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"\u6e96\u5099"},{"location":"1.\u958b\u767a\u74b0\u5883(Win)/Sniffer/sniffer_nrf/#_5","text":"ble-sniffer_xxx_Sniffer.exe \u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u30e1\u30cb\u30e5\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u4e2d\u6bb5\u306b\u4f7f\u7528\u53ef\u80fd\u306a\u30b3\u30de\u30f3\u30c9\u3001\u4e0b\u6bb5\u306b\u691c\u51fa\u3055\u308c\u305f\u30c7\u30d0\u30a4\u30b9\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u4e0a\u4e0b\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3057\u3001Enter\u30ad\u30fc\u3067\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e\u3057\u307e\u3059\u3002 w\u30ad\u30fc\u3067Wireshark\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002 \u9078\u629e\u3057\u305f\u30c7\u30d0\u30a4\u30b9\u306e\u30d1\u30b1\u30c3\u30c8\u8a73\u7d30\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002","title":"\u30b9\u30cb\u30d5"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/0.EmbedStudio/","text":"SEGGER Embed Stduio\u306e\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9 SEGGER\u793e\u304c\u63d0\u4f9b\u3059\u308bIDE\u3067\u3059\u3002\u4ed6\u306eARM\u30de\u30a4\u30b3\u30f3\u306b\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001Nordic\u793e\u3068SEGGER\u793e\u304c\u5951\u7d04\u3092\u7d50\u3073\u3001 \u30bf\u30fc\u30b2\u30c3\u30c8\u304cNRF51,NRF52\u306a\u3089\u3070\u30b3\u30fc\u30c9\u7121\u5236\u9650\u3001\u7121\u511f\u3067\u4f7f\u3048\u308b\u5927\u5909\u3042\u308a\u304c\u305f\u3044\u30c4\u30fc\u30eb\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u8a2d\u5b9a\u3084\u4f7f\u3046\u3079\u304d\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3082\u81ea\u52d5\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u3066\u5927\u5909\u4fbf\u5229\u3067\u3059\u3002 Windows,Mac,Linux\u3067\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u6ce8\u610f\u3059\u3079\u304d\u70b9:\u5bfe\u5fdc\u3057\u3066\u3044\u308bSDK\u30d0\u30fc\u30b8\u30e7\u30f3\u304cV1\uff14\u4ee5\u964d\u3068\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u540d\u306f\u3001ses\u3068\u306a\u308a\u307e\u3059\u3002 \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html Keil\u306b\u306f\u3001nRFConfig.h\u3092\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3067\u7ba1\u7406\u3067\u304d\u308b\u6a5f\u80fd\u304c\u3059\u3067\u306b\u3042\u308a\u307e\u3059\u304c\u3001Embed Stduio\u306b\u306f\u3001\u5225\u30a2\u30d7\u30ea\u306b\u306a\u308a\u307e\u3059\u304c\u3001CMSIS_Configuration_Wizard\u304c\u3042\u308a\u307e\u3059\u3002Java\u30a2\u30d7\u30ea\u306b\u306a\u308a\u307e\u3059\u3002 SDK\u5185\u306b\u3042\u308a\u307e\u3059\u3002CMSIS_Configuration_Wizard.jar\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u301c/Downloads/nRF5_SDK_15.0-3.0_a53641a/external_tools/cmsisconfig","title":"SEGGER Embed Stduio\u306e\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/0.EmbedStudio/#segger-embed-stduio","text":"SEGGER\u793e\u304c\u63d0\u4f9b\u3059\u308bIDE\u3067\u3059\u3002\u4ed6\u306eARM\u30de\u30a4\u30b3\u30f3\u306b\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001Nordic\u793e\u3068SEGGER\u793e\u304c\u5951\u7d04\u3092\u7d50\u3073\u3001 \u30bf\u30fc\u30b2\u30c3\u30c8\u304cNRF51,NRF52\u306a\u3089\u3070\u30b3\u30fc\u30c9\u7121\u5236\u9650\u3001\u7121\u511f\u3067\u4f7f\u3048\u308b\u5927\u5909\u3042\u308a\u304c\u305f\u3044\u30c4\u30fc\u30eb\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u8a2d\u5b9a\u3084\u4f7f\u3046\u3079\u304d\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3082\u81ea\u52d5\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u3066\u5927\u5909\u4fbf\u5229\u3067\u3059\u3002 Windows,Mac,Linux\u3067\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u6ce8\u610f\u3059\u3079\u304d\u70b9:\u5bfe\u5fdc\u3057\u3066\u3044\u308bSDK\u30d0\u30fc\u30b8\u30e7\u30f3\u304cV1\uff14\u4ee5\u964d\u3068\u306a\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u540d\u306f\u3001ses\u3068\u306a\u308a\u307e\u3059\u3002 \u53c2\u8003URL http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.gs%2Fdita%2Fgs%2Fnordic_tools.html Keil\u306b\u306f\u3001nRFConfig.h\u3092\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3067\u7ba1\u7406\u3067\u304d\u308b\u6a5f\u80fd\u304c\u3059\u3067\u306b\u3042\u308a\u307e\u3059\u304c\u3001Embed Stduio\u306b\u306f\u3001\u5225\u30a2\u30d7\u30ea\u306b\u306a\u308a\u307e\u3059\u304c\u3001CMSIS_Configuration_Wizard\u304c\u3042\u308a\u307e\u3059\u3002Java\u30a2\u30d7\u30ea\u306b\u306a\u308a\u307e\u3059\u3002 SDK\u5185\u306b\u3042\u308a\u307e\u3059\u3002CMSIS_Configuration_Wizard.jar\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u301c/Downloads/nRF5_SDK_15.0-3.0_a53641a/external_tools/cmsisconfig","title":"SEGGER Embed Stduio\u306e\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/1.Segger/","text":"Segger\u3067\u306e\u74b0\u5883\u69cb\u7bc9 Document http://infocenter.nordicsemi.com/pdf/getting_started_ses.pdf Segger Embedded Studio\u306eDownload https://www.segger.com/downloads/embedded-studio nRF5 SDK\u306eDownload https://developer.nordicsemi.com/nRF5_SDK/ Segger Embedded Studio\u306eLicense\u306eActivate Segger Embedded Studio\u3092\u8d77\u52d5\u3002License\u306eActivate\u3092\u304a\u3053\u306a\u3046\u3002[Build]-[Build and Debug]\u3092\u5b9f\u884c\u3059\u308b\u3002 \u30e1\u30fc\u30eb\u3067\u3001License\u30b3\u30fc\u30c9\u304c\u5c4a\u304f\u306e\u3067\u3001\u305d\u308c\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3001Activate\u3059\u308b\u3002","title":"Segger\u3067\u306e\u74b0\u5883\u69cb\u7bc9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/1.Segger/#segger","text":"","title":"Segger\u3067\u306e\u74b0\u5883\u69cb\u7bc9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/1.Segger/#document","text":"http://infocenter.nordicsemi.com/pdf/getting_started_ses.pdf","title":"Document"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/1.Segger/#segger-embedded-studiodownload","text":"https://www.segger.com/downloads/embedded-studio","title":"Segger Embedded Studio\u306eDownload"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/1.Segger/#nrf5-sdkdownload","text":"https://developer.nordicsemi.com/nRF5_SDK/","title":"nRF5 SDK\u306eDownload"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/1.Segger/#segger-embedded-studiolicenseactivate","text":"Segger Embedded Studio\u3092\u8d77\u52d5\u3002License\u306eActivate\u3092\u304a\u3053\u306a\u3046\u3002[Build]-[Build and Debug]\u3092\u5b9f\u884c\u3059\u308b\u3002 \u30e1\u30fc\u30eb\u3067\u3001License\u30b3\u30fc\u30c9\u304c\u5c4a\u304f\u306e\u3067\u3001\u305d\u308c\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3001Activate\u3059\u308b\u3002","title":"Segger Embedded Studio\u306eLicense\u306eActivate"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/2.Segger_board/","text":"Segger\u5bfe\u5fdc\u306e\u958b\u767a\u30dc\u30fc\u30c9 Segger\u5bfe\u5fdc\u306e\u958b\u767a\u30dc\u30fc\u30c9 |\u30dc\u30fc\u30c9\u540d|\u5546\u54c1\u540d|CHIP| |:--|:--|:--|:--| |PCA10056| nRF52840 DK |nRF52840| |PCA10059| nRF52840 Dongle |nRF52840| |PCA10040| nRF52 DK |nRF52832| |PCA10028| nRF51 DK |nRF51422| |PCA10032| nRF51 Dongle |nRF51422| Shinobi \u30dc\u30fc\u30c9\u540d CHIP #1 nRF52832 Shinobi #1\u306f\u3001nRF52832\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001PCA10040\u306eProfile\u304c\u4f7f\u3048\u308b\u3002","title":"Segger\u5bfe\u5fdc\u306e\u958b\u767a\u30dc\u30fc\u30c9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/2.Segger_board/#segger","text":"","title":"Segger\u5bfe\u5fdc\u306e\u958b\u767a\u30dc\u30fc\u30c9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/2.Segger_board/#segger_1","text":"|\u30dc\u30fc\u30c9\u540d|\u5546\u54c1\u540d|CHIP| |:--|:--|:--|:--| |PCA10056| nRF52840 DK |nRF52840| |PCA10059| nRF52840 Dongle |nRF52840| |PCA10040| nRF52 DK |nRF52832| |PCA10028| nRF51 DK |nRF51422| |PCA10032| nRF51 Dongle |nRF51422|","title":"Segger\u5bfe\u5fdc\u306e\u958b\u767a\u30dc\u30fc\u30c9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/2.Segger_board/#shinobi","text":"\u30dc\u30fc\u30c9\u540d CHIP #1 nRF52832 Shinobi #1\u306f\u3001nRF52832\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001PCA10040\u306eProfile\u304c\u4f7f\u3048\u308b\u3002","title":"Shinobi"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/3.NRF5_SDK/","text":"nRF5\u30b7\u30ea\u30fc\u30ba Noric\u30bb\u30df\u30b3\u30f3\u30c0\u30af\u30bf\u793e\u306e\u958b\u767a\u306eBluetooth low energy/2.4GHz\u5bfe\u5fdc\u306eSoC\u306f\u3001nRF51822(nRF51\u7cfb)\u3084nRF52832(nRF52\u7cfb)\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002 nRF5 SDK nRF5 SDK\u306f\u3001nRF5\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e\u958b\u767a\u74b0\u5883\u3067\u3059\u3002\u30c9\u30e9\u30a4\u30d0\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3001SoftDevices\u3001\u72ec\u81ea\u306e\u7121\u7dda\u30d7\u30ed\u30c8\u30b3\u30eb\u306a\u3069\u304c\u542b\u307e\u308c\u307e\u3059\u3002 \u672c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001nRF5 SDK Version 12\u3092\u4f7f\u7528\u3057\u307e\u3059\u30022018\u5e743\u6708\u73fe\u5728\u3067\u3001\u6700\u65b0\u7248\u306eSDK\u306fVersion 14\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 https://developer.nordicsemi.com/nRF5_SDK/ SDK\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 NRF52\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306b\u5fc5\u8981\u306aSDK\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 SDK\u306b\u306f\u3001\u5fc5\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30c4\u30fc\u30eb\u30c1\u30a7\u30fc\u30f3\u3001\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\u3001BLE\u958b\u767a\u306e\u6642\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 nRF5 SDK\u306eVersion 14\u4ee5\u964d\u304b\u3089\u3001Segger Embedded Studio\u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002","title":"nRF5\u30b7\u30ea\u30fc\u30ba"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/3.NRF5_SDK/#nrf5","text":"Noric\u30bb\u30df\u30b3\u30f3\u30c0\u30af\u30bf\u793e\u306e\u958b\u767a\u306eBluetooth low energy/2.4GHz\u5bfe\u5fdc\u306eSoC\u306f\u3001nRF51822(nRF51\u7cfb)\u3084nRF52832(nRF52\u7cfb)\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002","title":"nRF5\u30b7\u30ea\u30fc\u30ba"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/3.NRF5_SDK/#nrf5-sdk","text":"nRF5 SDK\u306f\u3001nRF5\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e\u958b\u767a\u74b0\u5883\u3067\u3059\u3002\u30c9\u30e9\u30a4\u30d0\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3001SoftDevices\u3001\u72ec\u81ea\u306e\u7121\u7dda\u30d7\u30ed\u30c8\u30b3\u30eb\u306a\u3069\u304c\u542b\u307e\u308c\u307e\u3059\u3002 \u672c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001nRF5 SDK Version 12\u3092\u4f7f\u7528\u3057\u307e\u3059\u30022018\u5e743\u6708\u73fe\u5728\u3067\u3001\u6700\u65b0\u7248\u306eSDK\u306fVersion 14\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 https://developer.nordicsemi.com/nRF5_SDK/","title":"nRF5 SDK"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/3.NRF5_SDK/#sdk","text":"NRF52\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u306b\u5fc5\u8981\u306aSDK\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 SDK\u306b\u306f\u3001\u5fc5\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3001\u30c4\u30fc\u30eb\u30c1\u30a7\u30fc\u30f3\u3001\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306f\u3001BLE\u958b\u767a\u306e\u6642\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 nRF5 SDK\u306eVersion 14\u4ee5\u964d\u304b\u3089\u3001Segger Embedded Studio\u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002","title":"SDK\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/4.JLINK/","text":"J-LINK https://www.segger.com/downloads/jlink#J-LinkSoftwareAndDocumentationPack J-LinkSoftwareAndDocumentationPack\u306e J-Link Software and Documentation pack for macOS\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002","title":"J-LINK"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/4.JLINK/#j-link","text":"https://www.segger.com/downloads/jlink#J-LinkSoftwareAndDocumentationPack J-LinkSoftwareAndDocumentationPack\u306e J-Link Software and Documentation pack for macOS\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002","title":"J-LINK"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/","text":"CommandLineTool Install \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089J-Link\u306e\u8a2d\u5b9a\u306a\u3057\u3067\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u7c21\u5358\u306b\u713c\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 J-Link\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb https://www.segger.com/downloads/jlink J-Link Software and Documentation pack\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3002 J-Link Software and Documentation pack for macOS\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb https://www.nordicsemi.com/eng/nordic/Products/nRF52840/nRF5x-Command-Line-Tools-OSX/58855 PC\u306e\u8a2d\u5b9a export PATH=~/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9/nrfjprog:$PATH \u3042\u308b\u3044\u306f\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u30bd\u30d5\u30c8Brew\u3092\u5165\u308c\u3066\u305d\u306e\u5f8c\u4ee5\u4e0b\u3092\u5b9f\u884c\uff08\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306a\u3057\u3067\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5b9f\u884c\uff09 brew cask install nrf5x-command-line-tools \u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u4ee5\u4e0b\u5b9f\u884c \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u3001\u524d\u3082\u3063\u3066\u4ee5\u4e0b\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb nrfjprog --program s132_nrf52_3.0.0_softdevice.hex -f nrf52 --chiperase \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306a\u3057\u306e\u5834\u5408 nrfjprog --program \u30d5\u30a1\u30a4\u30eb\u540d.hex -f nrf52 --chiperase \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3042\u308a\u306e\u5834\u5408 nrfjprog --program \u30d5\u30a1\u30a4\u30eb\u540d.hex -f nrf52 --sectorerase \u6700\u5f8c\u306b\u30ea\u30bb\u30c3\u30c8\u547d\u4ee4 nrfjprog --reset -f nrf52 \u66f8\u304d\u8fbc\u3081\u306a\u3044\u3068\u304d\u306f nrfjprog --rbp ALL -f nrf52","title":"CommandLineTool Install"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#commandlinetool-install","text":"\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089J-Link\u306e\u8a2d\u5b9a\u306a\u3057\u3067\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u7c21\u5358\u306b\u713c\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"CommandLineTool Install"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#j-link","text":"https://www.segger.com/downloads/jlink J-Link Software and Documentation pack\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3002 J-Link Software and Documentation pack for macOS\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"J-Link\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#_1","text":"https://www.nordicsemi.com/eng/nordic/Products/nRF52840/nRF5x-Command-Line-Tools-OSX/58855","title":"\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#pc","text":"export PATH=~/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9/nrfjprog:$PATH \u3042\u308b\u3044\u306f\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u30bd\u30d5\u30c8Brew\u3092\u5165\u308c\u3066\u305d\u306e\u5f8c\u4ee5\u4e0b\u3092\u5b9f\u884c\uff08\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306a\u3057\u3067\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5b9f\u884c\uff09 brew cask install nrf5x-command-line-tools","title":"PC\u306e\u8a2d\u5b9a"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#_2","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u3001\u524d\u3082\u3063\u3066\u4ee5\u4e0b\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb nrfjprog --program s132_nrf52_3.0.0_softdevice.hex -f nrf52 --chiperase","title":"\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u4ee5\u4e0b\u5b9f\u884c"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#_3","text":"","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#_4","text":"nrfjprog --program \u30d5\u30a1\u30a4\u30eb\u540d.hex -f nrf52 --chiperase","title":"\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u306a\u3057\u306e\u5834\u5408"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#_5","text":"nrfjprog --program \u30d5\u30a1\u30a4\u30eb\u540d.hex -f nrf52 --sectorerase","title":"\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3042\u308a\u306e\u5834\u5408"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#_6","text":"nrfjprog --reset -f nrf52","title":"\u6700\u5f8c\u306b\u30ea\u30bb\u30c3\u30c8\u547d\u4ee4"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/5.CommandLineTool_install/#_7","text":"nrfjprog --rbp ALL -f nrf52","title":"\u66f8\u304d\u8fbc\u3081\u306a\u3044\u3068\u304d\u306f"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/6.Sample/","text":"Sample \u4f7f\u7528\u3067\u304d\u308b\u30b5\u30f3\u30d7\u30eb BLE\u306a\u3057\u306e\u30b5\u30f3\u30d7\u30eb 1 nRF5_SDK_14.2.0_17b948a/examples/peripheral BLE\u3042\u308a\u306e\u30b5\u30f3\u30d7\u30eb 1 nRF5_SDK_14.2.0_17b948a/examples/ble_central Blink nRF5_SDK_14.2.0_17b948a/examples/peripheral/blinky/pca10040/s132/ses \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u958b\u304f\u3002 main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"nrf_delay.h\" #include \"nrf_gpio.h\" const uint8_t led_pin = 18 ; /*P0.03\u4f7f\u7528\u3000const\u3067\u4fee\u98fe\u3059\u308b\u5834\u5408\u306f\u5b9a\u6570\u306fROM\u306b\u683c\u7d0d\u3055\u308cRAM\u9818\u57df\u306e\u7bc0\u7d04\u306b\u306a\u308b*/ int main ( void ) { nrf_gpio_cfg_output ( led_pin ); /*\u30dd\u30fc\u30c8\u3092\u51fa\u529b\u306b\u8a2d\u5b9a*/ while ( true ) { uint32_t gpio_state = NRF_GPIO -> OUT ; /*\u30dd\u30fc\u30c8\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u3092\u53d6\u5f97*/ NRF_GPIO -> OUTSET = (( 1 << led_pin ) & ~ gpio_state ); NRF_GPIO -> OUTCLR = (( 1 << led_pin ) & gpio_state ); nrf_delay_ms ( 1000 ); /*\uff11\u79d2\u7121\u3057\u3082\u3057\u306a\u3044*/ } }","title":"Sample"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/6.Sample/#sample","text":"","title":"Sample"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/6.Sample/#_1","text":"BLE\u306a\u3057\u306e\u30b5\u30f3\u30d7\u30eb 1 nRF5_SDK_14.2.0_17b948a/examples/peripheral BLE\u3042\u308a\u306e\u30b5\u30f3\u30d7\u30eb 1 nRF5_SDK_14.2.0_17b948a/examples/ble_central","title":"\u4f7f\u7528\u3067\u304d\u308b\u30b5\u30f3\u30d7\u30eb"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/6.Sample/#blink","text":"nRF5_SDK_14.2.0_17b948a/examples/peripheral/blinky/pca10040/s132/ses \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u958b\u304f\u3002 main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"nrf_delay.h\" #include \"nrf_gpio.h\" const uint8_t led_pin = 18 ; /*P0.03\u4f7f\u7528\u3000const\u3067\u4fee\u98fe\u3059\u308b\u5834\u5408\u306f\u5b9a\u6570\u306fROM\u306b\u683c\u7d0d\u3055\u308cRAM\u9818\u57df\u306e\u7bc0\u7d04\u306b\u306a\u308b*/ int main ( void ) { nrf_gpio_cfg_output ( led_pin ); /*\u30dd\u30fc\u30c8\u3092\u51fa\u529b\u306b\u8a2d\u5b9a*/ while ( true ) { uint32_t gpio_state = NRF_GPIO -> OUT ; /*\u30dd\u30fc\u30c8\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u3092\u53d6\u5f97*/ NRF_GPIO -> OUTSET = (( 1 << led_pin ) & ~ gpio_state ); NRF_GPIO -> OUTCLR = (( 1 << led_pin ) & gpio_state ); nrf_delay_ms ( 1000 ); /*\uff11\u79d2\u7121\u3057\u3082\u3057\u306a\u3044*/ } }","title":"Blink"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/7.cmsis/","text":"CMSIS-CORE Support Package\u3092Import [Tools] > [Package Manager]\u3092\u9078\u629e\u3057\u3001CMSIS-CORE Support Package\u3092Import\u3059\u308b\u3002","title":"CMSIS-CORE Support Package\u3092Import"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/7.cmsis/#cmsis-core-support-packageimport","text":"[Tools] > [Package Manager]\u3092\u9078\u629e\u3057\u3001CMSIS-CORE Support Package\u3092Import\u3059\u308b\u3002","title":"CMSIS-CORE Support Package\u3092Import"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/","text":"Visual Studio\u306e\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9 CommandLineTool Install \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089J-Link\u306e\u8a2d\u5b9a\u306a\u3057\u3067\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u7c21\u5358\u306b\u713c\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 J-Link\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb https://www.segger.com/downloads/jlink \u3088\u308a J-Link Software and Documentation pack for macOS\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 gcc-arm\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb brew cask install gcc-arm-embedded nrf5x-tools\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb brew cask install nrf5x-command-line-tools Visual Studio Code\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb https://code.visualstudio.com/ \u304b\u3089Visual Studio Code\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u30d5\u30a9\u30eb\u30c0\u306e\u4f5c\u6210 config, nRF51822, nRF52832, src\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 task\u306e\u4f5c\u6210 [Shift + Command + P]\u3092\u5b9f\u884c\u3057\u3001\u30bf\u30b9\u30af\u69cb\u6210\u306e\u4f5c\u6210\u3092\u9078\u629e\u3057\u307e\u3059\u3002 ./src/.vscode/tasks.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"Build 51\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF51822/gcc/ DEBUG=YES\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Clean 51\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF51822/gcc/ clean\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Flash 51\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF51822/gcc/ flash\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Flash SoftDevice 51\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF51822/gcc/ flash_softdevice\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Run GDB-Server 51\" , \"type\" : \"shell\" , \"command\" : \"JLinkGDBServer -select USB -device nrf51822 -if SWD -speed 1000 -noir\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Build 52\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF52832/gcc/ DEBUG=YES\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Clean 52\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF52832/gcc/ clean\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Flash 52\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF52832/gcc/ flash\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Flash SoftDevice 52\" , \"type\" : \"shell\" , \"command\" : \"make -C ./nRF52832/gcc/ flash_softdevice\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Run GDB-Server 52\" , \"type\" : \"shell\" , \"command\" : \"JLinkGDBServer -select USB -device nrf52 -if SWD -speed 1000 -noir\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } } ] } gcc\u95a2\u9023\u30d5\u30a1\u30a4\u30eb(nRF51821) nRF51822/gcc/Makefile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 PROJECT_NAME : = BLETest TARGETS : = $ ( PROJECT_NAME ) OUTPUT_DIRECTORY : = _build SDK_ROOT : = . / .. / .. / .. / Test / sdk12 PROJ_DIR : = .. / .. $ ( OUTPUT_DIRECTORY ) / $ ( TARGETS ). out : \\ LINKER_SCRIPT : = gcc_nrf51 . ld # Source files common to all targets SRC_FILES += \\ $ ( SDK_ROOT ) / components / toolchain / gcc / gcc_startup_nrf51 . S \\ $ ( SDK_ROOT ) / components / toolchain / system_nrf51 . c \\ $ ( PROJ_DIR ) / src / main . c \\ $ ( PROJ_DIR ) / src / beacon . c \\ $ ( SDK_ROOT ) / components / libraries / timer / app_timer . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_error . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_error_weak . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_util_platform . c \\ $ ( SDK_ROOT ) / components / softdevice / common / softdevice_handler / softdevice_handler . c \\ $ ( SDK_ROOT ) / components / drivers_nrf / clock / nrf_drv_clock . c \\ $ ( SDK_ROOT ) / components / drivers_nrf / common / nrf_drv_common . c \\ $ ( SDK_ROOT ) / components / ble / common / ble_advdata . c \\ # Include folders common to all targets INC_FOLDERS += \\ $ ( PROJ_DIR ) / config \\ $ ( PROJ_DIR ) / src \\ $ ( SDK_ROOT ) / components / device \\ $ ( SDK_ROOT ) / components / toolchain \\ $ ( SDK_ROOT ) / components / toolchain / cmsis / include \\ $ ( SDK_ROOT ) / examples / bsp \\ $ ( SDK_ROOT ) / components / drivers_nrf / hal \\ $ ( SDK_ROOT ) / components / libraries / button \\ $ ( SDK_ROOT ) / components / libraries / util \\ $ ( SDK_ROOT ) / components / softdevice / s130 / headers \\ $ ( SDK_ROOT ) / components / libraries / timer \\ $ ( SDK_ROOT ) / components / drivers_nrf / delay \\ $ ( SDK_ROOT ) / components / softdevice / common / softdevice_handler \\ $ ( SDK_ROOT ) / components / libraries / log \\ $ ( SDK_ROOT ) / components / libraries / log / src \\ $ ( SDK_ROOT ) / components / drivers_nrf / clock \\ $ ( SDK_ROOT ) / components / drivers_nrf / common \\ $ ( SDK_ROOT ) / components / ble / common \\ # Libraries common to all targets LIB_FILES += \\ # C flags common to all targets CFLAGS += - DBOARD_CUSTOM CFLAGS += - DSOFTDEVICE_PRESENT CFLAGS += - DNRF51 CFLAGS += - DS130 CFLAGS += - DBLE_STACK_SUPPORT_REQD CFLAGS += - DNRF51822 CFLAGS += - DNRF_SD_BLE_API_VERSION = 2 CFLAGS += - DBLE_ADVERTISING_ENABLED CFLAGS += - DBSP_DEFINES_ONLY CFLAGS += - mcpu = cortex - m0 CFLAGS += - mthumb - mabi = aapcs CFLAGS += - Wall - Werror - O3 CFLAGS += - mfloat - abi = soft # keep every function in separate section, this allows linker to discard unused ones CFLAGS += - ffunction - sections - fdata - sections - fno - strict - aliasing CFLAGS += - fno - builtin -- short - enums # generate dependency output file CFLAGS += - MP - MD ifeq ( $ ( DEBUG ), yes ) CFLAGS += - O - g3 else CFLAGS += - O3 endif # C++ flags common to all targets CXXFLAGS += \\ # Assembler flags common to all targets ASMFLAGS += - x assembler - with - cpp ASMFLAGS += - DBOARD_CUSTOM ASMFLAGS += - DSOFTDEVICE_PRESENT ASMFLAGS += - DNRF51 ASMFLAGS += - DS130 ASMFLAGS += - DBLE_STACK_SUPPORT_REQD ASMFLAGS += - DNRF51822 ASMFLAGS += - DNRF_SD_BLE_API_VERSION = 2 # Linker flags LDFLAGS += - mthumb - mabi = aapcs - L $ ( TEMPLATE_PATH ) - T $ ( LINKER_SCRIPT ) LDFLAGS += - mcpu = cortex - m0 # let linker to dump unused sections LDFLAGS += - Wl , -- gc - sections # use newlib in nano version LDFLAGS += -- specs = nano . specs - lc - lnosys . PHONY : $ ( TARGETS ) default all clean help flash # Default target - first one defined default : $ ( TARGETS ) # Print all targets that can be built help : @ echo following targets are available : @ echo $ ( TARGETS ) @ echo flash_softdevice TEMPLATE_PATH : = $ ( SDK_ROOT ) / components / toolchain / gcc include $ ( TEMPLATE_PATH ) / Makefile . common $ ( foreach target , $ ( TARGETS ), $ ( call define_target , $ ( target ))) - include $ ( foreach target , $ ( TARGETS ), $ ( $ ( target ) _dependencies )) # Flash the program flash : $ ( OUTPUT_DIRECTORY ) / $ ( TARGETS ). hex @ echo Flashing : $ < nrfjprog -- program $ < - f nrf51 -- sectorerase nrfjprog -- reset - f nrf51 # Flash softdevice flash_softdevice : @ echo Flashing : s130_nrf51_2 .0.1 _softdevice . hex nrfjprog -- program $ ( SDK_ROOT ) / components / softdevice / s130 / hex / s130_nrf51_2 .0.1 _softdevice . hex - f nrf51 -- chiperase nrfjprog -- reset - f nrf51 nRF51822/gcc/gcc_nrf51.ld 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* Linker script to configure memory regions. */ SEARCH_DIR (.) GROUP ( - lgcc - lc - lnosys ) MEMORY { FLASH ( rx ) : ORIGIN = 0x1b000 , LENGTH = 0x25000 RAM ( rwx ) : ORIGIN = 0x20001FE8 , LENGTH = 0x6018 } SECTIONS { . fs_data : { PROVIDE ( __start_fs_data = .); KEEP ( * (. fs_data )) PROVIDE ( __stop_fs_data = .); } > RAM } INSERT AFTER . data ; INCLUDE \"nrf5x_common.ld\" gcc\u95a2\u9023\u30d5\u30a1\u30a4\u30eb(nRF51821) nRF51832/gcc/Makefile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 PROJECT_NAME : = BLETest TARGETS : = $ ( PROJECT_NAME ) OUTPUT_DIRECTORY : = _build SDK_ROOT : = . / .. / .. / .. / Test / sdk12 PROJ_DIR : = .. / .. $ ( OUTPUT_DIRECTORY ) / $ ( TARGETS ). out : \\ LINKER_SCRIPT : = gcc_nrf52 . ld # Source files common to all targets SRC_FILES += \\ $ ( SDK_ROOT ) / components / toolchain / gcc / gcc_startup_nrf52 . S \\ $ ( SDK_ROOT ) / components / toolchain / system_nrf52 . c \\ $ ( PROJ_DIR ) / src / main . c \\ $ ( PROJ_DIR ) / src / beacon . c \\ $ ( SDK_ROOT ) / components / libraries / timer / app_timer . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_error . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_error_weak . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_util_platform . c \\ $ ( SDK_ROOT ) / components / softdevice / common / softdevice_handler / softdevice_handler . c \\ $ ( SDK_ROOT ) / components / drivers_nrf / clock / nrf_drv_clock . c \\ $ ( SDK_ROOT ) / components / drivers_nrf / common / nrf_drv_common . c \\ $ ( SDK_ROOT ) / components / ble / common / ble_advdata . c \\ # Include folders common to all targets INC_FOLDERS += \\ $ ( PROJ_DIR ) / config \\ $ ( PROJ_DIR ) / src \\ $ ( SDK_ROOT ) / components / device \\ $ ( SDK_ROOT ) / components / toolchain \\ $ ( SDK_ROOT ) / components / toolchain / cmsis / include \\ $ ( SDK_ROOT ) / examples / bsp \\ $ ( SDK_ROOT ) / components / drivers_nrf / hal \\ $ ( SDK_ROOT ) / components / libraries / button \\ $ ( SDK_ROOT ) / components / libraries / util \\ $ ( SDK_ROOT ) / components / softdevice / s132 / headers \\ $ ( SDK_ROOT ) / components / libraries / timer \\ $ ( SDK_ROOT ) / components / drivers_nrf / delay \\ $ ( SDK_ROOT ) / components / softdevice / common / softdevice_handler \\ $ ( SDK_ROOT ) / components / libraries / log \\ $ ( SDK_ROOT ) / components / libraries / log / src \\ $ ( SDK_ROOT ) / components / drivers_nrf / clock \\ $ ( SDK_ROOT ) / components / drivers_nrf / common \\ $ ( SDK_ROOT ) / components / ble / common \\ # Libraries common to all targets LIB_FILES += \\ # C flags common to all targets CFLAGS += - DNRF52 CFLAGS += - DBOARD_CUSTOM CFLAGS += - DNRF52832 CFLAGS += - DNRF52_PAN_64 CFLAGS += - DNRF52_PAN_12 CFLAGS += - DNRF52_PAN_15 CFLAGS += - DNRF52_PAN_58 CFLAGS += - DNRF52_PAN_55 CFLAGS += - DNRF52_PAN_54 CFLAGS += - DNRF52_PAN_31 CFLAGS += - DNRF52_PAN_30 CFLAGS += - DNRF52_PAN_51 CFLAGS += - DNRF52_PAN_36 CFLAGS += - DNRF52_PAN_53 CFLAGS += - DS132 CFLAGS += - DCONFIG_GPIO_AS_PINRESET CFLAGS += - DBLE_STACK_SUPPORT_REQD CFLAGS += - DNRF_SD_BLE_API_VERSION = 3 CFLAGS += - DSWI_DISABLE0 CFLAGS += - DNRF52_PAN_20 CFLAGS += - DSOFTDEVICE_PRESENT CFLAGS += - DNRF52_PAN_62 CFLAGS += - DNRF52_PAN_63 CFLAGS += - mcpu = cortex - m4 CFLAGS += - mthumb - mabi = aapcs CFLAGS += - Wall - Werror CFLAGS += - mfloat - abi = hard - mfpu = fpv4 - sp - d16 # keep every function in separate section, this allows linker to discard unused ones CFLAGS += - ffunction - sections - fdata - sections - fno - strict - aliasing CFLAGS += - fno - builtin -- short - enums # generate dependency output file CFLAGS += - MP - MD ifeq ( $ ( DEBUG ), yes ) CFLAGS += - O - g else CFLAGS += - O3 endif # C++ flags common to all targets CXXFLAGS += \\ # Assembler flags common to all targets ASMFLAGS += - x assembler - with - cpp ASMFLAGS += - DNRF52 ASMFLAGS += - DBOARD_PCA10040 ASMFLAGS += - DNRF52832 ASMFLAGS += - DNRF52_PAN_64 ASMFLAGS += - DNRF52_PAN_12 ASMFLAGS += - DNRF52_PAN_15 ASMFLAGS += - DNRF52_PAN_58 ASMFLAGS += - DNRF52_PAN_55 ASMFLAGS += - DNRF52_PAN_54 ASMFLAGS += - DNRF52_PAN_31 ASMFLAGS += - DNRF52_PAN_30 ASMFLAGS += - DNRF52_PAN_51 ASMFLAGS += - DNRF52_PAN_36 ASMFLAGS += - DNRF52_PAN_53 ASMFLAGS += - DS132 ASMFLAGS += - DCONFIG_GPIO_AS_PINRESET ASMFLAGS += - DBLE_STACK_SUPPORT_REQD ASMFLAGS += - DNRF_SD_BLE_API_VERSION = 3 ASMFLAGS += - DSWI_DISABLE0 ASMFLAGS += - DNRF52_PAN_20 ASMFLAGS += - DSOFTDEVICE_PRESENT ASMFLAGS += - DNRF52_PAN_62 ASMFLAGS += - DNRF52_PAN_63 # Linker flags LDFLAGS += - mthumb - mabi = aapcs - L $ ( TEMPLATE_PATH ) - T $ ( LINKER_SCRIPT ) LDFLAGS += - mcpu = cortex - m4 LDFLAGS += - mfloat - abi = hard - mfpu = fpv4 - sp - d16 # let linker to dump unused sections LDFLAGS += - Wl , -- gc - sections # use newlib in nano version LDFLAGS += -- specs = nano . specs - lc - lnosys . PHONY : $ ( TARGETS ) default all clean help flash flash_softdevice # Default target - first one defined default : $ ( TARGETS ) # Print all targets that can be built help : @ echo following targets are available : @ echo $ ( TARGETS ) @ echo flash_softdevice TEMPLATE_PATH : = $ ( SDK_ROOT ) / components / toolchain / gcc include $ ( TEMPLATE_PATH ) / Makefile . common $ ( foreach target , $ ( TARGETS ), $ ( call define_target , $ ( target ))) - include $ ( foreach target , $ ( TARGETS ), $ ( $ ( target ) _dependencies )) # Flash the program # Flash the program flash : $ ( OUTPUT_DIRECTORY ) / $ ( TARGETS ). hex @ echo Flashing : $ < nrfjprog -- program $ < - f nrf52 -- sectorerase nrfjprog -- reset - f nrf52 # Flash softdevice flash_softdevice : @ echo Flashing : s132_nrf52_3 .0.0 _softdevice . hex nrfjprog -- program $ ( SDK_ROOT ) / components / softdevice / s132 / hex / s132_nrf52_3 .0.0 _softdevice . hex - f nrf52 -- chiperase nrfjprog -- reset - f nrf52 ./nRF52832/gcc_nrf52.ld 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* Linker script to configure memory regions. */ SEARCH_DIR (.) GROUP ( - lgcc - lc - lnosys ) MEMORY { FLASH ( rx ) : ORIGIN = 0x1f000 , LENGTH = 0x61000 RAM ( rwx ) : ORIGIN = 0x20002128 , LENGTH = 0xDED8 } SECTIONS { . fs_data : { PROVIDE ( __start_fs_data = .); KEEP ( * (. fs_data )) PROVIDE ( __stop_fs_data = .); } > RAM } INSERT AFTER . data ; INCLUDE \"nrf5x_common.ld\" Config\u30d5\u30a9\u30eb\u30c0 sdk_config.h \u3092 https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v12.x.x/ \u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fSDK\u3088\u308a\u3001config\u30d5\u30a9\u30eb\u30c0\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 config/custom_board.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 // Akabeacon Dev Board #ifndef CUSTOM_BOARD_H #define CUSTOM_BOARD_H #define LED_START 18 #define LED_0 18 #define LED_1 19 #define LED_STOP 19 #define BSP_LED_0 LED_0 #define BSP_LED_1 LED_1 #define BUTTON_START 16 #define BUTTON_0 16 #define BUTTON_1 17 #define BUTTON_STOP 17 #define BUTTON_PULL NRF_GPIO_PIN_PULLUP #define BSP_BUTTON_0 BUTTON_0 #define BSP_BUTTON_1 BUTTON_1 #define BUTTONS_NUMBER 2 #define LEDS_NUMBER 2 #define BUTTONS_MASK 0x00030000 #define LEDS_MASK 0x000C0000 #define LEDS_INV_MASK 0 #define BSP_BUTTON_0_MASK (1<<BSP_BUTTON_0) #define BSP_BUTTON_1_MASK (1<<BSP_BUTTON_1) #define BUTTONS_LIST { BUTTON_0, BUTTON_1 } #define LEDS_LIST { LED_0, LED_1 } #define BSP_LED_0_MASK (1<<LED_0) #define BSP_LED_1_MASK (1<<LED_1) //#define RX_PIN_NUMBER 11 //#define TX_PIN_NUMBER 9 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 10 #define RTS_PIN_NUMBER 8 #define HWFC false #define SPIS_MISO_PIN 20 // SPI MISO signal. #define SPIS_CSN_PIN 21 // SPI CSN signal. #define SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SPIS_SCK_PIN 23 // SPI SCK signal. #define SPIM0_SCK_PIN 23u /**< SPI clock GPIO pin number. */ #define SPIM0_MOSI_PIN 20u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM0_MISO_PIN 22u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM0_SS_PIN 21u /**< SPI Slave Select GPIO pin number. */ #define SPIM1_SCK_PIN 29u /**< SPI clock GPIO pin number. */ #define SPIM1_MOSI_PIN 24u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM1_MISO_PIN 28u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM1_SS_PIN 25u /**< SPI Slave Select GPIO pin number. */ // serialization APPLICATION board // UART // this configuration works with the SPI wires setup #define SER_APP_RX_PIN 20 // UART RX pin number. #define SER_APP_TX_PIN 22 // UART TX pin number. #define SER_APP_CTS_PIN 23 // UART Clear To Send pin number. #define SER_APP_RTS_PIN 21 // UART Request To Send pin number. // SPI #if 0 #define SER_APP_SPIM0_SCK_PIN 20 // SPI clock GPIO pin number. #define SER_APP_SPIM0_MOSI_PIN 17 // SPI Master Out Slave In GPIO pin number #define SER_APP_SPIM0_MISO_PIN 16 // SPI Master In Slave Out GPIO pin number #define SER_APP_SPIM0_SS_PIN 21 // SPI Slave Select GPIO pin number #define SER_APP_SPIM0_RDY_PIN 19 // SPI READY GPIO pin number #define SER_APP_SPIM0_REQ_PIN 18 // SPI REQUEST GPIO pin number #else #define SER_APP_SPIM0_SCK_PIN 23 // SPI clock GPIO pin number. #define SER_APP_SPIM0_MOSI_PIN 20 // SPI Master Out Slave In GPIO pin number #define SER_APP_SPIM0_MISO_PIN 22 // SPI Master In Slave Out GPIO pin number #define SER_APP_SPIM0_SS_PIN 21 // SPI Slave Select GPIO pin number #define SER_APP_SPIM0_RDY_PIN 25 // SPI READY GPIO pin number #define SER_APP_SPIM0_REQ_PIN 24 // SPI REQUEST GPIO pin number #endif // serialization CONNECTIVITY board // UART #if 0 #define SER_CON_RX_PIN 22 // UART RX pin number. #define SER_CON_TX_PIN 20 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #else // this configuration works with the SPI wires setup #define SER_CON_RX_PIN 20 // UART RX pin number. #define SER_CON_TX_PIN 22 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #endif //SPI #if 0 #define SER_CON_SPIS_SCK_PIN 20 // SPI SCK signal. #define SER_CON_SPIS_MISO_PIN 16 // SPI MISO signal. #define SER_CON_SPIS_MOSI_PIN 17 // SPI MOSI signal. #define SER_CON_SPIS_CSN_PIN 21 // SPI CSN signal. #define SER_CON_SPIS_RDY_PIN 19 // SPI READY GPIO pin number. #define SER_CON_SPIS_REQ_PIN 18 // SPI REQUEST GPIO pin number. #else #define SER_CON_SPIS_SCK_PIN 23 // SPI SCK signal. #define SER_CON_SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SER_CON_SPIS_MISO_PIN 20 // SPI MISO signal. #define SER_CON_SPIS_CSN_PIN 21 // SPI CSN signal. #define SER_CON_SPIS_RDY_PIN 25 // SPI READY GPIO pin number. #define SER_CON_SPIS_REQ_PIN 24 // SPI REQUEST GPIO pin number. #endif #define SER_CONN_ASSERT_LED_PIN LED_0 #define NRF_CLOCK_LFCLKSRC {.source = NRF_CLOCK_LF_SRC_XTAL, \\ .rc_ctiv = 0, \\ .rc_temp_ctiv = 0, \\ .xtal_accuracy = NRF_CLOCK_LF_XTAL_ACCURACY_20_PPM} #endif","title":"Visual Studio\u306e\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#visual-studio","text":"","title":"Visual Studio\u306e\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#commandlinetool-install","text":"\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089J-Link\u306e\u8a2d\u5b9a\u306a\u3057\u3067\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u7c21\u5358\u306b\u713c\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"CommandLineTool Install"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#j-link","text":"https://www.segger.com/downloads/jlink \u3088\u308a J-Link Software and Documentation pack for macOS\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"J-Link\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#gcc-arm","text":"brew cask install gcc-arm-embedded","title":"gcc-arm\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#nrf5x-tools","text":"brew cask install nrf5x-command-line-tools","title":"nrf5x-tools\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#visual-studio-code","text":"https://code.visualstudio.com/ \u304b\u3089Visual Studio Code\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"Visual Studio Code\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#_1","text":"config, nRF51822, nRF52832, src\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","title":"\u30d5\u30a9\u30eb\u30c0\u306e\u4f5c\u6210"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#task","text":"[Shift + Command + P]\u3092\u5b9f\u884c\u3057\u3001\u30bf\u30b9\u30af\u69cb\u6210\u306e\u4f5c\u6210\u3092\u9078\u629e\u3057\u307e\u3059\u3002 ./src/.vscode/tasks.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"Build 51\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF51822/gcc/ DEBUG=YES\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Clean 51\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF51822/gcc/ clean\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Flash 51\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF51822/gcc/ flash\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Flash SoftDevice 51\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF51822/gcc/ flash_softdevice\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Run GDB-Server 51\" , \"type\" : \"shell\" , \"command\" : \"JLinkGDBServer -select USB -device nrf51822 -if SWD -speed 1000 -noir\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Build 52\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF52832/gcc/ DEBUG=YES\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Clean 52\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF52832/gcc/ clean\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Flash 52\" , \"type\" : \"shell\" , \"command\" : \"make -C ../nRF52832/gcc/ flash\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Flash SoftDevice 52\" , \"type\" : \"shell\" , \"command\" : \"make -C ./nRF52832/gcc/ flash_softdevice\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } }, { \"label\" : \"Run GDB-Server 52\" , \"type\" : \"shell\" , \"command\" : \"JLinkGDBServer -select USB -device nrf52 -if SWD -speed 1000 -noir\" , \"group\" : \"build\" , \"presentation\" : { \"reveal\" : \"always\" , \"panel\" : \"shared\" } } ] }","title":"task\u306e\u4f5c\u6210"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#gccnrf51821","text":"nRF51822/gcc/Makefile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 PROJECT_NAME : = BLETest TARGETS : = $ ( PROJECT_NAME ) OUTPUT_DIRECTORY : = _build SDK_ROOT : = . / .. / .. / .. / Test / sdk12 PROJ_DIR : = .. / .. $ ( OUTPUT_DIRECTORY ) / $ ( TARGETS ). out : \\ LINKER_SCRIPT : = gcc_nrf51 . ld # Source files common to all targets SRC_FILES += \\ $ ( SDK_ROOT ) / components / toolchain / gcc / gcc_startup_nrf51 . S \\ $ ( SDK_ROOT ) / components / toolchain / system_nrf51 . c \\ $ ( PROJ_DIR ) / src / main . c \\ $ ( PROJ_DIR ) / src / beacon . c \\ $ ( SDK_ROOT ) / components / libraries / timer / app_timer . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_error . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_error_weak . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_util_platform . c \\ $ ( SDK_ROOT ) / components / softdevice / common / softdevice_handler / softdevice_handler . c \\ $ ( SDK_ROOT ) / components / drivers_nrf / clock / nrf_drv_clock . c \\ $ ( SDK_ROOT ) / components / drivers_nrf / common / nrf_drv_common . c \\ $ ( SDK_ROOT ) / components / ble / common / ble_advdata . c \\ # Include folders common to all targets INC_FOLDERS += \\ $ ( PROJ_DIR ) / config \\ $ ( PROJ_DIR ) / src \\ $ ( SDK_ROOT ) / components / device \\ $ ( SDK_ROOT ) / components / toolchain \\ $ ( SDK_ROOT ) / components / toolchain / cmsis / include \\ $ ( SDK_ROOT ) / examples / bsp \\ $ ( SDK_ROOT ) / components / drivers_nrf / hal \\ $ ( SDK_ROOT ) / components / libraries / button \\ $ ( SDK_ROOT ) / components / libraries / util \\ $ ( SDK_ROOT ) / components / softdevice / s130 / headers \\ $ ( SDK_ROOT ) / components / libraries / timer \\ $ ( SDK_ROOT ) / components / drivers_nrf / delay \\ $ ( SDK_ROOT ) / components / softdevice / common / softdevice_handler \\ $ ( SDK_ROOT ) / components / libraries / log \\ $ ( SDK_ROOT ) / components / libraries / log / src \\ $ ( SDK_ROOT ) / components / drivers_nrf / clock \\ $ ( SDK_ROOT ) / components / drivers_nrf / common \\ $ ( SDK_ROOT ) / components / ble / common \\ # Libraries common to all targets LIB_FILES += \\ # C flags common to all targets CFLAGS += - DBOARD_CUSTOM CFLAGS += - DSOFTDEVICE_PRESENT CFLAGS += - DNRF51 CFLAGS += - DS130 CFLAGS += - DBLE_STACK_SUPPORT_REQD CFLAGS += - DNRF51822 CFLAGS += - DNRF_SD_BLE_API_VERSION = 2 CFLAGS += - DBLE_ADVERTISING_ENABLED CFLAGS += - DBSP_DEFINES_ONLY CFLAGS += - mcpu = cortex - m0 CFLAGS += - mthumb - mabi = aapcs CFLAGS += - Wall - Werror - O3 CFLAGS += - mfloat - abi = soft # keep every function in separate section, this allows linker to discard unused ones CFLAGS += - ffunction - sections - fdata - sections - fno - strict - aliasing CFLAGS += - fno - builtin -- short - enums # generate dependency output file CFLAGS += - MP - MD ifeq ( $ ( DEBUG ), yes ) CFLAGS += - O - g3 else CFLAGS += - O3 endif # C++ flags common to all targets CXXFLAGS += \\ # Assembler flags common to all targets ASMFLAGS += - x assembler - with - cpp ASMFLAGS += - DBOARD_CUSTOM ASMFLAGS += - DSOFTDEVICE_PRESENT ASMFLAGS += - DNRF51 ASMFLAGS += - DS130 ASMFLAGS += - DBLE_STACK_SUPPORT_REQD ASMFLAGS += - DNRF51822 ASMFLAGS += - DNRF_SD_BLE_API_VERSION = 2 # Linker flags LDFLAGS += - mthumb - mabi = aapcs - L $ ( TEMPLATE_PATH ) - T $ ( LINKER_SCRIPT ) LDFLAGS += - mcpu = cortex - m0 # let linker to dump unused sections LDFLAGS += - Wl , -- gc - sections # use newlib in nano version LDFLAGS += -- specs = nano . specs - lc - lnosys . PHONY : $ ( TARGETS ) default all clean help flash # Default target - first one defined default : $ ( TARGETS ) # Print all targets that can be built help : @ echo following targets are available : @ echo $ ( TARGETS ) @ echo flash_softdevice TEMPLATE_PATH : = $ ( SDK_ROOT ) / components / toolchain / gcc include $ ( TEMPLATE_PATH ) / Makefile . common $ ( foreach target , $ ( TARGETS ), $ ( call define_target , $ ( target ))) - include $ ( foreach target , $ ( TARGETS ), $ ( $ ( target ) _dependencies )) # Flash the program flash : $ ( OUTPUT_DIRECTORY ) / $ ( TARGETS ). hex @ echo Flashing : $ < nrfjprog -- program $ < - f nrf51 -- sectorerase nrfjprog -- reset - f nrf51 # Flash softdevice flash_softdevice : @ echo Flashing : s130_nrf51_2 .0.1 _softdevice . hex nrfjprog -- program $ ( SDK_ROOT ) / components / softdevice / s130 / hex / s130_nrf51_2 .0.1 _softdevice . hex - f nrf51 -- chiperase nrfjprog -- reset - f nrf51 nRF51822/gcc/gcc_nrf51.ld 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* Linker script to configure memory regions. */ SEARCH_DIR (.) GROUP ( - lgcc - lc - lnosys ) MEMORY { FLASH ( rx ) : ORIGIN = 0x1b000 , LENGTH = 0x25000 RAM ( rwx ) : ORIGIN = 0x20001FE8 , LENGTH = 0x6018 } SECTIONS { . fs_data : { PROVIDE ( __start_fs_data = .); KEEP ( * (. fs_data )) PROVIDE ( __stop_fs_data = .); } > RAM } INSERT AFTER . data ; INCLUDE \"nrf5x_common.ld\"","title":"gcc\u95a2\u9023\u30d5\u30a1\u30a4\u30eb(nRF51821)"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#gccnrf51821_1","text":"nRF51832/gcc/Makefile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 PROJECT_NAME : = BLETest TARGETS : = $ ( PROJECT_NAME ) OUTPUT_DIRECTORY : = _build SDK_ROOT : = . / .. / .. / .. / Test / sdk12 PROJ_DIR : = .. / .. $ ( OUTPUT_DIRECTORY ) / $ ( TARGETS ). out : \\ LINKER_SCRIPT : = gcc_nrf52 . ld # Source files common to all targets SRC_FILES += \\ $ ( SDK_ROOT ) / components / toolchain / gcc / gcc_startup_nrf52 . S \\ $ ( SDK_ROOT ) / components / toolchain / system_nrf52 . c \\ $ ( PROJ_DIR ) / src / main . c \\ $ ( PROJ_DIR ) / src / beacon . c \\ $ ( SDK_ROOT ) / components / libraries / timer / app_timer . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_error . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_error_weak . c \\ $ ( SDK_ROOT ) / components / libraries / util / app_util_platform . c \\ $ ( SDK_ROOT ) / components / softdevice / common / softdevice_handler / softdevice_handler . c \\ $ ( SDK_ROOT ) / components / drivers_nrf / clock / nrf_drv_clock . c \\ $ ( SDK_ROOT ) / components / drivers_nrf / common / nrf_drv_common . c \\ $ ( SDK_ROOT ) / components / ble / common / ble_advdata . c \\ # Include folders common to all targets INC_FOLDERS += \\ $ ( PROJ_DIR ) / config \\ $ ( PROJ_DIR ) / src \\ $ ( SDK_ROOT ) / components / device \\ $ ( SDK_ROOT ) / components / toolchain \\ $ ( SDK_ROOT ) / components / toolchain / cmsis / include \\ $ ( SDK_ROOT ) / examples / bsp \\ $ ( SDK_ROOT ) / components / drivers_nrf / hal \\ $ ( SDK_ROOT ) / components / libraries / button \\ $ ( SDK_ROOT ) / components / libraries / util \\ $ ( SDK_ROOT ) / components / softdevice / s132 / headers \\ $ ( SDK_ROOT ) / components / libraries / timer \\ $ ( SDK_ROOT ) / components / drivers_nrf / delay \\ $ ( SDK_ROOT ) / components / softdevice / common / softdevice_handler \\ $ ( SDK_ROOT ) / components / libraries / log \\ $ ( SDK_ROOT ) / components / libraries / log / src \\ $ ( SDK_ROOT ) / components / drivers_nrf / clock \\ $ ( SDK_ROOT ) / components / drivers_nrf / common \\ $ ( SDK_ROOT ) / components / ble / common \\ # Libraries common to all targets LIB_FILES += \\ # C flags common to all targets CFLAGS += - DNRF52 CFLAGS += - DBOARD_CUSTOM CFLAGS += - DNRF52832 CFLAGS += - DNRF52_PAN_64 CFLAGS += - DNRF52_PAN_12 CFLAGS += - DNRF52_PAN_15 CFLAGS += - DNRF52_PAN_58 CFLAGS += - DNRF52_PAN_55 CFLAGS += - DNRF52_PAN_54 CFLAGS += - DNRF52_PAN_31 CFLAGS += - DNRF52_PAN_30 CFLAGS += - DNRF52_PAN_51 CFLAGS += - DNRF52_PAN_36 CFLAGS += - DNRF52_PAN_53 CFLAGS += - DS132 CFLAGS += - DCONFIG_GPIO_AS_PINRESET CFLAGS += - DBLE_STACK_SUPPORT_REQD CFLAGS += - DNRF_SD_BLE_API_VERSION = 3 CFLAGS += - DSWI_DISABLE0 CFLAGS += - DNRF52_PAN_20 CFLAGS += - DSOFTDEVICE_PRESENT CFLAGS += - DNRF52_PAN_62 CFLAGS += - DNRF52_PAN_63 CFLAGS += - mcpu = cortex - m4 CFLAGS += - mthumb - mabi = aapcs CFLAGS += - Wall - Werror CFLAGS += - mfloat - abi = hard - mfpu = fpv4 - sp - d16 # keep every function in separate section, this allows linker to discard unused ones CFLAGS += - ffunction - sections - fdata - sections - fno - strict - aliasing CFLAGS += - fno - builtin -- short - enums # generate dependency output file CFLAGS += - MP - MD ifeq ( $ ( DEBUG ), yes ) CFLAGS += - O - g else CFLAGS += - O3 endif # C++ flags common to all targets CXXFLAGS += \\ # Assembler flags common to all targets ASMFLAGS += - x assembler - with - cpp ASMFLAGS += - DNRF52 ASMFLAGS += - DBOARD_PCA10040 ASMFLAGS += - DNRF52832 ASMFLAGS += - DNRF52_PAN_64 ASMFLAGS += - DNRF52_PAN_12 ASMFLAGS += - DNRF52_PAN_15 ASMFLAGS += - DNRF52_PAN_58 ASMFLAGS += - DNRF52_PAN_55 ASMFLAGS += - DNRF52_PAN_54 ASMFLAGS += - DNRF52_PAN_31 ASMFLAGS += - DNRF52_PAN_30 ASMFLAGS += - DNRF52_PAN_51 ASMFLAGS += - DNRF52_PAN_36 ASMFLAGS += - DNRF52_PAN_53 ASMFLAGS += - DS132 ASMFLAGS += - DCONFIG_GPIO_AS_PINRESET ASMFLAGS += - DBLE_STACK_SUPPORT_REQD ASMFLAGS += - DNRF_SD_BLE_API_VERSION = 3 ASMFLAGS += - DSWI_DISABLE0 ASMFLAGS += - DNRF52_PAN_20 ASMFLAGS += - DSOFTDEVICE_PRESENT ASMFLAGS += - DNRF52_PAN_62 ASMFLAGS += - DNRF52_PAN_63 # Linker flags LDFLAGS += - mthumb - mabi = aapcs - L $ ( TEMPLATE_PATH ) - T $ ( LINKER_SCRIPT ) LDFLAGS += - mcpu = cortex - m4 LDFLAGS += - mfloat - abi = hard - mfpu = fpv4 - sp - d16 # let linker to dump unused sections LDFLAGS += - Wl , -- gc - sections # use newlib in nano version LDFLAGS += -- specs = nano . specs - lc - lnosys . PHONY : $ ( TARGETS ) default all clean help flash flash_softdevice # Default target - first one defined default : $ ( TARGETS ) # Print all targets that can be built help : @ echo following targets are available : @ echo $ ( TARGETS ) @ echo flash_softdevice TEMPLATE_PATH : = $ ( SDK_ROOT ) / components / toolchain / gcc include $ ( TEMPLATE_PATH ) / Makefile . common $ ( foreach target , $ ( TARGETS ), $ ( call define_target , $ ( target ))) - include $ ( foreach target , $ ( TARGETS ), $ ( $ ( target ) _dependencies )) # Flash the program # Flash the program flash : $ ( OUTPUT_DIRECTORY ) / $ ( TARGETS ). hex @ echo Flashing : $ < nrfjprog -- program $ < - f nrf52 -- sectorerase nrfjprog -- reset - f nrf52 # Flash softdevice flash_softdevice : @ echo Flashing : s132_nrf52_3 .0.0 _softdevice . hex nrfjprog -- program $ ( SDK_ROOT ) / components / softdevice / s132 / hex / s132_nrf52_3 .0.0 _softdevice . hex - f nrf52 -- chiperase nrfjprog -- reset - f nrf52 ./nRF52832/gcc_nrf52.ld 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* Linker script to configure memory regions. */ SEARCH_DIR (.) GROUP ( - lgcc - lc - lnosys ) MEMORY { FLASH ( rx ) : ORIGIN = 0x1f000 , LENGTH = 0x61000 RAM ( rwx ) : ORIGIN = 0x20002128 , LENGTH = 0xDED8 } SECTIONS { . fs_data : { PROVIDE ( __start_fs_data = .); KEEP ( * (. fs_data )) PROVIDE ( __stop_fs_data = .); } > RAM } INSERT AFTER . data ; INCLUDE \"nrf5x_common.ld\"","title":"gcc\u95a2\u9023\u30d5\u30a1\u30a4\u30eb(nRF51821)"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/8.VisualStudio/#config","text":"sdk_config.h \u3092 https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v12.x.x/ \u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fSDK\u3088\u308a\u3001config\u30d5\u30a9\u30eb\u30c0\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002 config/custom_board.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 // Akabeacon Dev Board #ifndef CUSTOM_BOARD_H #define CUSTOM_BOARD_H #define LED_START 18 #define LED_0 18 #define LED_1 19 #define LED_STOP 19 #define BSP_LED_0 LED_0 #define BSP_LED_1 LED_1 #define BUTTON_START 16 #define BUTTON_0 16 #define BUTTON_1 17 #define BUTTON_STOP 17 #define BUTTON_PULL NRF_GPIO_PIN_PULLUP #define BSP_BUTTON_0 BUTTON_0 #define BSP_BUTTON_1 BUTTON_1 #define BUTTONS_NUMBER 2 #define LEDS_NUMBER 2 #define BUTTONS_MASK 0x00030000 #define LEDS_MASK 0x000C0000 #define LEDS_INV_MASK 0 #define BSP_BUTTON_0_MASK (1<<BSP_BUTTON_0) #define BSP_BUTTON_1_MASK (1<<BSP_BUTTON_1) #define BUTTONS_LIST { BUTTON_0, BUTTON_1 } #define LEDS_LIST { LED_0, LED_1 } #define BSP_LED_0_MASK (1<<LED_0) #define BSP_LED_1_MASK (1<<LED_1) //#define RX_PIN_NUMBER 11 //#define TX_PIN_NUMBER 9 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 10 #define RTS_PIN_NUMBER 8 #define HWFC false #define SPIS_MISO_PIN 20 // SPI MISO signal. #define SPIS_CSN_PIN 21 // SPI CSN signal. #define SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SPIS_SCK_PIN 23 // SPI SCK signal. #define SPIM0_SCK_PIN 23u /**< SPI clock GPIO pin number. */ #define SPIM0_MOSI_PIN 20u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM0_MISO_PIN 22u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM0_SS_PIN 21u /**< SPI Slave Select GPIO pin number. */ #define SPIM1_SCK_PIN 29u /**< SPI clock GPIO pin number. */ #define SPIM1_MOSI_PIN 24u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM1_MISO_PIN 28u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM1_SS_PIN 25u /**< SPI Slave Select GPIO pin number. */ // serialization APPLICATION board // UART // this configuration works with the SPI wires setup #define SER_APP_RX_PIN 20 // UART RX pin number. #define SER_APP_TX_PIN 22 // UART TX pin number. #define SER_APP_CTS_PIN 23 // UART Clear To Send pin number. #define SER_APP_RTS_PIN 21 // UART Request To Send pin number. // SPI #if 0 #define SER_APP_SPIM0_SCK_PIN 20 // SPI clock GPIO pin number. #define SER_APP_SPIM0_MOSI_PIN 17 // SPI Master Out Slave In GPIO pin number #define SER_APP_SPIM0_MISO_PIN 16 // SPI Master In Slave Out GPIO pin number #define SER_APP_SPIM0_SS_PIN 21 // SPI Slave Select GPIO pin number #define SER_APP_SPIM0_RDY_PIN 19 // SPI READY GPIO pin number #define SER_APP_SPIM0_REQ_PIN 18 // SPI REQUEST GPIO pin number #else #define SER_APP_SPIM0_SCK_PIN 23 // SPI clock GPIO pin number. #define SER_APP_SPIM0_MOSI_PIN 20 // SPI Master Out Slave In GPIO pin number #define SER_APP_SPIM0_MISO_PIN 22 // SPI Master In Slave Out GPIO pin number #define SER_APP_SPIM0_SS_PIN 21 // SPI Slave Select GPIO pin number #define SER_APP_SPIM0_RDY_PIN 25 // SPI READY GPIO pin number #define SER_APP_SPIM0_REQ_PIN 24 // SPI REQUEST GPIO pin number #endif // serialization CONNECTIVITY board // UART #if 0 #define SER_CON_RX_PIN 22 // UART RX pin number. #define SER_CON_TX_PIN 20 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #else // this configuration works with the SPI wires setup #define SER_CON_RX_PIN 20 // UART RX pin number. #define SER_CON_TX_PIN 22 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #endif //SPI #if 0 #define SER_CON_SPIS_SCK_PIN 20 // SPI SCK signal. #define SER_CON_SPIS_MISO_PIN 16 // SPI MISO signal. #define SER_CON_SPIS_MOSI_PIN 17 // SPI MOSI signal. #define SER_CON_SPIS_CSN_PIN 21 // SPI CSN signal. #define SER_CON_SPIS_RDY_PIN 19 // SPI READY GPIO pin number. #define SER_CON_SPIS_REQ_PIN 18 // SPI REQUEST GPIO pin number. #else #define SER_CON_SPIS_SCK_PIN 23 // SPI SCK signal. #define SER_CON_SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SER_CON_SPIS_MISO_PIN 20 // SPI MISO signal. #define SER_CON_SPIS_CSN_PIN 21 // SPI CSN signal. #define SER_CON_SPIS_RDY_PIN 25 // SPI READY GPIO pin number. #define SER_CON_SPIS_REQ_PIN 24 // SPI REQUEST GPIO pin number. #endif #define SER_CONN_ASSERT_LED_PIN LED_0 #define NRF_CLOCK_LFCLKSRC {.source = NRF_CLOCK_LF_SRC_XTAL, \\ .rc_ctiv = 0, \\ .rc_temp_ctiv = 0, \\ .xtal_accuracy = NRF_CLOCK_LF_XTAL_ACCURACY_20_PPM} #endif","title":"Config\u30d5\u30a9\u30eb\u30c0"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/9.error/","text":"\u30a8\u30e9\u30fc\u3068\u305d\u306e\u5bfe\u51e6 J-LINK 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ JLinkExe -device NRF52 -if SWD -speed 1518 -autoconnect 1 SEGGER J-Link Commander V6.34h ( Compiled Oct 9 2018 15 :49:05 ) DLL version V6.34h, compiled Oct 9 2018 15 :48:55 Connecting to J-Link via USB...O.K. Firmware: J-Link Lite-Cortex-M V8 compiled Sep 15 2016 12 :05:01 Hardware version: V8.00 S/N: 518112173 License ( s ) : GDB VTref = 0 .000V Device \"NRF52\" selected. Connecting to target via SWD Cannot connect to target. J-Link> VTRef=0.000V\u306a\u306e\u3067\u3001\u30dc\u30fc\u30c9\u306b\u96fb\u6e90\u304c\u4f9b\u7d66\u3055\u308c\u3066\u3044\u306a\u3044\u3002","title":"\u30a8\u30e9\u30fc\u3068\u305d\u306e\u5bfe\u51e6"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/9.error/#_1","text":"","title":"\u30a8\u30e9\u30fc\u3068\u305d\u306e\u5bfe\u51e6"},{"location":"2.\u958b\u767a\u74b0\u5883(Mac)/9.error/#j-link","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ JLinkExe -device NRF52 -if SWD -speed 1518 -autoconnect 1 SEGGER J-Link Commander V6.34h ( Compiled Oct 9 2018 15 :49:05 ) DLL version V6.34h, compiled Oct 9 2018 15 :48:55 Connecting to J-Link via USB...O.K. Firmware: J-Link Lite-Cortex-M V8 compiled Sep 15 2016 12 :05:01 Hardware version: V8.00 S/N: 518112173 License ( s ) : GDB VTref = 0 .000V Device \"NRF52\" selected. Connecting to target via SWD Cannot connect to target. J-Link> VTRef=0.000V\u306a\u306e\u3067\u3001\u30dc\u30fc\u30c9\u306b\u96fb\u6e90\u304c\u4f9b\u7d66\u3055\u308c\u3066\u3044\u306a\u3044\u3002","title":"J-LINK"},{"location":"3.\u958b\u767a\u30c4\u30fc\u30eb/sniffer_nrf/","text":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a \u5fc5\u8981\u306a\u30cf\u30fc\u30c9 \u578b\u756a \u5199\u771f PCA10000 PCA10031 \u5fc5\u8981\u306a\u30bd\u30d5\u30c8 Windows7\u4ee5\u964d nRFgo Studio nRF-Sniffer Wireshark v1.10.1\u4ee5\u964d USB Dongle\u306e\u8a8d\u8b58 VirtualBox\u3067\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067USB Dongle\u3092\u8a8d\u8a3c\u3055\u305b\u308b\u3002 USB Dongle\u3092\u3055\u3057\u305f\u72b6\u614b\u3067\u3001USB\u306e\u8a2d\u5b9a\u3092\u958b\u304d\u3001USB \u30d5\u30a3\u30eb\u30bf\u306b\u8ffd\u52a0\u3059\u308b 2.USB\u30d5\u30a3\u30eb\u30bf\u306e\u7de8\u96c6\u3092\u9078\u629e\u3057\u3001\u30e1\u30fc\u30ab\u30fc\u540d\u3001\u88fd\u54c1\u540d\u3001\u30b7\u30ea\u30a2\u30ebNo\u3092\u524a\u9664\u3059\u308b USB Dongle\u3092\u30de\u30b7\u30f3\u304b\u3089\u629c\u304d\u3001Windows10\u3092\u518d\u8d77\u52d5\u3057\u305f\u306e\u3061\u3001USB Dongle\u3092\u3055\u3059\u3002\u8a8d\u8b58\u3055\u308c\u308b\u3068\u3001SEGGER J-LINK[0100]\u306e\u524d\u306b\u30c1\u30a7\u30c3\u30af\u30de\u30fc\u30af\u304c\u73fe\u308c\u308b\u3002 \u6e96\u5099 nRFgoStudio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u5bfe\u5fdc\u30cf\u30fc\u30c9\u3092USB\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u30b9\u30cb\u30d5\u30a1\u5bfe\u8c61\u306eBLE\u6a5f\u5668\u3092\u5468\u8fba\u3067\u4f5c\u52d5\u3055\u305b\u307e\u3059\u3002 nRF-Sniffer\u306ezip\u3092\u89e3\u51cd\u3057\u307e\u3059\u3002 nRFgo Studio\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \u5de6\u306eDeviceManager\u304b\u3089\u63a5\u7d9a\u3057\u305f\u6a5f\u5668\u3092\u9078\u3073\u307e\u3059\u3002 \u300cErase all\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u65e2\u5b58\u306e\u30d5\u30a1\u30fc\u30e0\u3092\u524a\u9664\u3057\u307e\u3059\u3002 Program Application\u306e\u30bf\u30d6\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Browse\u304b\u3089nRF-Sniffer\u306eFirmware\u30d5\u30a9\u30eb\u30c0\u5185\u306ehex\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Program \u3067\u30d5\u30a1\u30fc\u30e0\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 \u63a5\u7d9a\u3057\u3066\u3044\u308bBLE\u6a5f\u5668\u306f\u30d1\u30b1\u30c3\u30c8\u53d7\u4fe1\u6642\u306bLED\u304c\u70b9\u706f\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Wireshark\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u30b9\u30cb\u30d5 ble-sniffer_xxx_Sniffer.exe \u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u30e1\u30cb\u30e5\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u4e2d\u6bb5\u306b\u4f7f\u7528\u53ef\u80fd\u306a\u30b3\u30de\u30f3\u30c9\u3001\u4e0b\u6bb5\u306b\u691c\u51fa\u3055\u308c\u305f\u30c7\u30d0\u30a4\u30b9\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u4e0a\u4e0b\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3057\u3001Enter\u30ad\u30fc\u3067\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e\u3057\u307e\u3059\u3002 w\u30ad\u30fc\u3067Wireshark\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002 \u9078\u629e\u3057\u305f\u30c7\u30d0\u30a4\u30b9\u306e\u30d1\u30b1\u30c3\u30c8\u8a73\u7d30\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002","title":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a"},{"location":"3.\u958b\u767a\u30c4\u30fc\u30eb/sniffer_nrf/#_1","text":"","title":"\u30d1\u30b1\u30c3\u30c8\u30b9\u30cb\u30d5\u30a1\u306e\u8a2d\u5b9a"},{"location":"3.\u958b\u767a\u30c4\u30fc\u30eb/sniffer_nrf/#_2","text":"\u578b\u756a \u5199\u771f PCA10000 PCA10031","title":"\u5fc5\u8981\u306a\u30cf\u30fc\u30c9"},{"location":"3.\u958b\u767a\u30c4\u30fc\u30eb/sniffer_nrf/#_3","text":"Windows7\u4ee5\u964d nRFgo Studio nRF-Sniffer Wireshark v1.10.1\u4ee5\u964d","title":"\u5fc5\u8981\u306a\u30bd\u30d5\u30c8"},{"location":"3.\u958b\u767a\u30c4\u30fc\u30eb/sniffer_nrf/#usb-dongle","text":"VirtualBox\u3067\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067USB Dongle\u3092\u8a8d\u8a3c\u3055\u305b\u308b\u3002 USB Dongle\u3092\u3055\u3057\u305f\u72b6\u614b\u3067\u3001USB\u306e\u8a2d\u5b9a\u3092\u958b\u304d\u3001USB \u30d5\u30a3\u30eb\u30bf\u306b\u8ffd\u52a0\u3059\u308b 2.USB\u30d5\u30a3\u30eb\u30bf\u306e\u7de8\u96c6\u3092\u9078\u629e\u3057\u3001\u30e1\u30fc\u30ab\u30fc\u540d\u3001\u88fd\u54c1\u540d\u3001\u30b7\u30ea\u30a2\u30ebNo\u3092\u524a\u9664\u3059\u308b USB Dongle\u3092\u30de\u30b7\u30f3\u304b\u3089\u629c\u304d\u3001Windows10\u3092\u518d\u8d77\u52d5\u3057\u305f\u306e\u3061\u3001USB Dongle\u3092\u3055\u3059\u3002\u8a8d\u8b58\u3055\u308c\u308b\u3068\u3001SEGGER J-LINK[0100]\u306e\u524d\u306b\u30c1\u30a7\u30c3\u30af\u30de\u30fc\u30af\u304c\u73fe\u308c\u308b\u3002","title":"USB Dongle\u306e\u8a8d\u8b58"},{"location":"3.\u958b\u767a\u30c4\u30fc\u30eb/sniffer_nrf/#_4","text":"nRFgoStudio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u5bfe\u5fdc\u30cf\u30fc\u30c9\u3092USB\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u30b9\u30cb\u30d5\u30a1\u5bfe\u8c61\u306eBLE\u6a5f\u5668\u3092\u5468\u8fba\u3067\u4f5c\u52d5\u3055\u305b\u307e\u3059\u3002 nRF-Sniffer\u306ezip\u3092\u89e3\u51cd\u3057\u307e\u3059\u3002 nRFgo Studio\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \u5de6\u306eDeviceManager\u304b\u3089\u63a5\u7d9a\u3057\u305f\u6a5f\u5668\u3092\u9078\u3073\u307e\u3059\u3002 \u300cErase all\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u65e2\u5b58\u306e\u30d5\u30a1\u30fc\u30e0\u3092\u524a\u9664\u3057\u307e\u3059\u3002 Program Application\u306e\u30bf\u30d6\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Browse\u304b\u3089nRF-Sniffer\u306eFirmware\u30d5\u30a9\u30eb\u30c0\u5185\u306ehex\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Program \u3067\u30d5\u30a1\u30fc\u30e0\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 \u63a5\u7d9a\u3057\u3066\u3044\u308bBLE\u6a5f\u5668\u306f\u30d1\u30b1\u30c3\u30c8\u53d7\u4fe1\u6642\u306bLED\u304c\u70b9\u706f\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Wireshark\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002","title":"\u6e96\u5099"},{"location":"3.\u958b\u767a\u30c4\u30fc\u30eb/sniffer_nrf/#_5","text":"ble-sniffer_xxx_Sniffer.exe \u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u30e1\u30cb\u30e5\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u4e2d\u6bb5\u306b\u4f7f\u7528\u53ef\u80fd\u306a\u30b3\u30de\u30f3\u30c9\u3001\u4e0b\u6bb5\u306b\u691c\u51fa\u3055\u308c\u305f\u30c7\u30d0\u30a4\u30b9\u4e00\u89a7\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u4e0a\u4e0b\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3057\u3001Enter\u30ad\u30fc\u3067\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u3092\u9078\u629e\u3057\u307e\u3059\u3002 w\u30ad\u30fc\u3067Wireshark\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002 \u9078\u629e\u3057\u305f\u30c7\u30d0\u30a4\u30b9\u306e\u30d1\u30b1\u30c3\u30c8\u8a73\u7d30\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002","title":"\u30b9\u30cb\u30d5"},{"location":"4.\u958b\u767a\u57fa\u790e/1.dev_nrf52/","text":"\u958b\u767a\u74b0\u5883(nRF52) nRF52\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5 \u4f7f\u7528\u3057\u305f\u74b0\u5883 MDK-Lite Ver. 5.16a Windows 7 nRF52 Development Kit (PCA10040) \u624b\u9806 \u624b\u9806\u306f\u307b\u307cnRF51\u3068\u540c\u3058\u306a\u306e\u3067\u3001\u8a73\u7d30\u306f \u30b3\u30c1\u30e9 \u3092\u53c2\u7167\u3002 \u7a7a\u306eApplication\u4f5c\u6210 Keil uVision5\u3092\u8d77\u52d5\u3059\u308b uVision5\u306eProject\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u65b0\u305f\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b Device\u306e\u8a2d\u5b9a\u3092\u805e\u304b\u308c\u308b\u306e\u3067Sofware Packs\u306enRF52832_xxAA\u3092\u9078\u629e\u3059\u308b Pack\u9078\u629e\u3067Device\u306eStartup\u3092\u9078\u629e\u3057\u3001Boot\u306b\u5fc5\u8981\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b \u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b 5.1. Options for Target\u3092\u9078\u629e\u3059\u308b 5.2. Debug\u30bf\u30d6\u306eUse\u3092\"J-LINK / J-TRACE Cortex\"\u306b\u5909\u66f4\u3059\u308b 5.3. Port\u3092SW\u306b\u5909\u66f4\u3059\u308b 5.4. JLink\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Reset and Run\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u66f8\u304d\u8fbc\u307f\u6642\u306b\u30ea\u30bb\u30c3\u30c8\uff06\u5b9f\u884c\u3092\u884c\u3046\u3002\u307e\u305f\u3001Size\u306e\u5024\u3082\u5909\u66f4\u3059\u308b\u3002 Application\u3092\u4f5c\u6210\u3059\u308b 5.1. Project\u5185\u306e\u30b0\u30eb\u30fc\u30d7\u540d(\u4eca\u56de\u306fApplication)\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Add New Item to..\"\u3092\u9078\u629e\u3059\u308b 5.2. main.c\u3092\u4f5c\u6210\u3059\u308b 5.3. \u4eca\u56de\u306f\u7121\u6a5f\u80fd\u306eApplication\u306a\u306e\u3067\u3001\u7a7a\u306emain\u6587\u306e\u307f\u306b\u3059\u308b int main() { } \u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u6a5f\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b 6.1. \u30d3\u30eb\u30c9\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059 6.2. LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7a7a\u306a\u306e\u3067\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\uff09 LED\u70b9\u706fApplication\u4f5c\u6210 \u4ee5\u4e0b\u53e4\u3044\u60c5\u5831\u3067\u3057\u305f\u3002\u666e\u901a\u306bPack\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002 \u3067\u3059\u304c\u3001Pack\u7121\u3057\u3067\u306eApplication\u4f5c\u6210\u65b9\u6cd5\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u307e\u3060\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bPack\u304c\u5c11\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001Pack\u7121\u3057\u3067LED\u70b9\u6ec5\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 Pack\u304c\u7121\u3044\u3082\u306e\u306f\u81ea\u5206\u3067\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u308a\u3001SDK\u304b\u3089\u30bd\u30fc\u30b9\u3092\u30b3\u30d4\u30fc\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002 \u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b 1.1. Options for Target\u3092\u9078\u629e\u3059\u308b 1.2. C/C++\u3092\u9078\u629e\u3057\u3001\u4e0b\u8a18\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u3002 * Define\u306bBOARD_PCA10036\u3092\u8a2d\u5b9a * C99Mode\u306b\u30c1\u30a7\u30c3\u30af * IncludePaths\u306b\"[nRF52_SDK]\\examples\\bsp\"\u3068\"[nRF52_SDK]\\components\\drivers_nrf\\hal\"\u3092\u8ffd\u52a0\u3059\u308b\u3002\uff08[nRF52_SDK]\u306fSDK\u3078\u306e\u30d1\u30b9\uff09 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5909\u66f4\u3059\u308b #include \"boards.h\" int main() { LEDS_CONFIGURE(LEDS_MASK); LEDS_OFF(LEDS_MASK); LEDS_INVERT(BSP_LED_0_MASK); } \u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u6a5f\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b 3.1. \u30d3\u30eb\u30c9\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059 3.2. LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\uff08LED_0\u304c\u70b9\u706f\u3057\u307e\u3059\uff09","title":"\u958b\u767a\u74b0\u5883(nRF52)"},{"location":"4.\u958b\u767a\u57fa\u790e/1.dev_nrf52/#nrf52","text":"","title":"\u958b\u767a\u74b0\u5883(nRF52)"},{"location":"4.\u958b\u767a\u57fa\u790e/1.dev_nrf52/#nrf52_1","text":"","title":"nRF52\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5"},{"location":"4.\u958b\u767a\u57fa\u790e/1.dev_nrf52/#_1","text":"MDK-Lite Ver. 5.16a Windows 7 nRF52 Development Kit (PCA10040)","title":"\u4f7f\u7528\u3057\u305f\u74b0\u5883"},{"location":"4.\u958b\u767a\u57fa\u790e/1.dev_nrf52/#_2","text":"\u624b\u9806\u306f\u307b\u307cnRF51\u3068\u540c\u3058\u306a\u306e\u3067\u3001\u8a73\u7d30\u306f \u30b3\u30c1\u30e9 \u3092\u53c2\u7167\u3002","title":"\u624b\u9806"},{"location":"4.\u958b\u767a\u57fa\u790e/1.dev_nrf52/#application","text":"Keil uVision5\u3092\u8d77\u52d5\u3059\u308b uVision5\u306eProject\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u65b0\u305f\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b Device\u306e\u8a2d\u5b9a\u3092\u805e\u304b\u308c\u308b\u306e\u3067Sofware Packs\u306enRF52832_xxAA\u3092\u9078\u629e\u3059\u308b Pack\u9078\u629e\u3067Device\u306eStartup\u3092\u9078\u629e\u3057\u3001Boot\u306b\u5fc5\u8981\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b \u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b 5.1. Options for Target\u3092\u9078\u629e\u3059\u308b 5.2. Debug\u30bf\u30d6\u306eUse\u3092\"J-LINK / J-TRACE Cortex\"\u306b\u5909\u66f4\u3059\u308b 5.3. Port\u3092SW\u306b\u5909\u66f4\u3059\u308b 5.4. JLink\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Reset and Run\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u66f8\u304d\u8fbc\u307f\u6642\u306b\u30ea\u30bb\u30c3\u30c8\uff06\u5b9f\u884c\u3092\u884c\u3046\u3002\u307e\u305f\u3001Size\u306e\u5024\u3082\u5909\u66f4\u3059\u308b\u3002 Application\u3092\u4f5c\u6210\u3059\u308b 5.1. Project\u5185\u306e\u30b0\u30eb\u30fc\u30d7\u540d(\u4eca\u56de\u306fApplication)\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Add New Item to..\"\u3092\u9078\u629e\u3059\u308b 5.2. main.c\u3092\u4f5c\u6210\u3059\u308b 5.3. \u4eca\u56de\u306f\u7121\u6a5f\u80fd\u306eApplication\u306a\u306e\u3067\u3001\u7a7a\u306emain\u6587\u306e\u307f\u306b\u3059\u308b int main() { } \u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u6a5f\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b 6.1. \u30d3\u30eb\u30c9\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059 6.2. LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7a7a\u306a\u306e\u3067\u4f55\u3082\u8d77\u3053\u308a\u307e\u305b\u3093\uff09","title":"\u7a7a\u306eApplication\u4f5c\u6210"},{"location":"4.\u958b\u767a\u57fa\u790e/1.dev_nrf52/#ledapplication","text":"\u4ee5\u4e0b\u53e4\u3044\u60c5\u5831\u3067\u3057\u305f\u3002\u666e\u901a\u306bPack\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002 \u3067\u3059\u304c\u3001Pack\u7121\u3057\u3067\u306eApplication\u4f5c\u6210\u65b9\u6cd5\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u307e\u3060\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bPack\u304c\u5c11\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001Pack\u7121\u3057\u3067LED\u70b9\u6ec5\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 Pack\u304c\u7121\u3044\u3082\u306e\u306f\u81ea\u5206\u3067\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u308a\u3001SDK\u304b\u3089\u30bd\u30fc\u30b9\u3092\u30b3\u30d4\u30fc\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002 \u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b 1.1. Options for Target\u3092\u9078\u629e\u3059\u308b 1.2. C/C++\u3092\u9078\u629e\u3057\u3001\u4e0b\u8a18\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u3002 * Define\u306bBOARD_PCA10036\u3092\u8a2d\u5b9a * C99Mode\u306b\u30c1\u30a7\u30c3\u30af * IncludePaths\u306b\"[nRF52_SDK]\\examples\\bsp\"\u3068\"[nRF52_SDK]\\components\\drivers_nrf\\hal\"\u3092\u8ffd\u52a0\u3059\u308b\u3002\uff08[nRF52_SDK]\u306fSDK\u3078\u306e\u30d1\u30b9\uff09 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5909\u66f4\u3059\u308b #include \"boards.h\" int main() { LEDS_CONFIGURE(LEDS_MASK); LEDS_OFF(LEDS_MASK); LEDS_INVERT(BSP_LED_0_MASK); } \u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u6a5f\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b 3.1. \u30d3\u30eb\u30c9\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059 3.2. LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\uff08LED_0\u304c\u70b9\u706f\u3057\u307e\u3059\uff09","title":"LED\u70b9\u706fApplication\u4f5c\u6210"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/","text":"UART UART module \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001UART\u901a\u4fe1\u3092\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 \u57fa\u677f\u3068\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a UART\u3067\u30c7\u30fc\u30bf\u306e\u9001\u53d7\u4fe1\u3092\u3059\u308b\u306b\u306f\u3001\u57fa\u677f\u306eRX, TX\u306e\u30d4\u30f3\u306e\u4f4d\u7f6e\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3002 \u57fa\u677f\u540d RX TX RTS CTS PCA10028 P0.11 P0.09 P0.08 P0.06 PCA10036 P0.08 P0.06 P0.05 P0.10 FaBo Breakout P0.09 P0.11 \u306a\u3057 \u306a\u3057 \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u53d6\u308a\u8fbc\u307f Device\u95a2\u9023 nRF Driver nRF Libraries nRF SoftDevice \u3082\u3057\u3001\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u5909\u308f\u308b\u5834\u5408\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8db3\u308a\u3066\u3044\u306a\u3044\u30a8\u30e9\u30fc\u306a\u306e\u3067\u3001Rsolv\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u4e0d\u8db3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u88dc\u5145\u3059\u308b\u3002 URAT\u306e\u8a2d\u5b9a Option\u306eC/C++\u30bf\u30d6\u3067\u3001Define\u306e\u5024\u306b\u30dc\u30fc\u30c9\u540d\u3092\u3044\u308c\u308b\u3053\u3068\u3067\u3001URAT\u306ePIN\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u57fa\u677f\u540d Define\u306e\u5024 \u5b9f\u969b\u306e\u753b\u9762 PCA10028 BOARD_PCA10028 PCA10036 BOARD_PCA10036 FaBo Breakout Board BOARD_CUSTOM Nordic\u88fd\u306e\u958b\u767a\u30dc\u30fc\u30c9\u306f\u3001boards.h\u3092\u8aad\u307f\u8fbc\u307f\u306b\u3044\u304d\u3001boards.h\u306b\u66f8\u304f\u30dc\u30fc\u30c9\u3088\u3046\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u306einclude\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3002PCA10028, PCA10036\u306ePIN\u306e\u5024\u306f\u3001\u305d\u308c\u305e\u308cpca10028.h, pca10036.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 boards.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #ifndef BOARDS_H #define BOARDS_H #include \"nrf_gpio.h\" #if defined(BOARD_NRF6310) #include \"nrf6310.h\" #elif defined(BOARD_PCA10000) #include \"pca10000.h\" #elif defined(BOARD_PCA10001) #include \"pca10001.h\" #elif defined(BOARD_PCA10002) #include \"pca10000.h\" #elif defined(BOARD_PCA10003) #include \"pca10003.h\" #elif defined(BOARD_PCA20006) #include \"pca20006.h\" #elif defined(BOARD_PCA10028) #include \"pca10028.h\" #elif defined(BOARD_PCA10031) #include \"pca10031.h\" #elif defined(BOARD_PCA10036) #include \"pca10036.h\" #elif defined(BOARD_PCA10040) #include \"pca10040.h\" #elif defined(BOARD_WT51822) #include \"wt51822.h\" #elif defined(BOARD_N5DK1) #include \"n5_starterkit.h\" #elif defined(BOARD_CUSTOM) #include \"custom_board.h\" #else #error \"Board is not defined\" FaBo Breakout Board\u306b\u95a2\u3057\u3066\u306f\u3001\u72ec\u81ea\u306bPIN\u306e\u5024\u306e\u5b9a\u7fa9\u3092\u304a\u3053\u306a\u3046\u3002CUSTOM_BOARD\u3068\u5b9a\u7fa9\u3059\u308b\u3068\u3001 boards_custom.h \u3092\u8aad\u307f\u306b\u3044\u304f\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u3001 boards_custom.h \u3092\u4f5c\u6210\u3057\u3001\u305d\u3053\u306b\u5024\u3092\u8a18\u8f09\u3059\u308b\u3002\u307e\u305f\u3001 boards_custom.h \u306e\u4f5c\u6210\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30d1\u30b9\u3092\u901a\u3057\u3066\u304a\u304f\u3053\u3068\u3082\u5fd8\u308c\u306a\u3044\u3002 boards_custom.h 1 2 3 4 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define RTS_PIN_NUMBER 99 #define CTS_PIN_NUMBER 99 SourceCode(PCA10028, PCA10036\u7528) main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include \"app_uart.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"boards.h\" #define UART_TX_BUF_SIZE 1024u /**< UART TX buffer size. */ #define UART_RX_BUF_SIZE 1024u /**< UART RX buffer size. */ int counter = 0 ; /** * @brief UART\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9. */ void uart_events_handler ( app_uart_evt_t * p_event ) { switch ( p_event -> evt_type ) { case APP_UART_COMMUNICATION_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_communication ); break ; case APP_UART_FIFO_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_code ); break ; case APP_UART_TX_EMPTY : break ; default : break ; } } /** * @brief UART\u521d\u671f\u5316\u51e6\u7406. */ void uart_config ( void ) { uint32_t err_code ; const app_uart_comm_params_t comm_params = { RX_PIN_NUMBER , TX_PIN_NUMBER , RTS_PIN_NUMBER , CTS_PIN_NUMBER , APP_UART_FLOW_CONTROL_DISABLED , false , UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_events_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } /** * @brief Main\u51e6\u7406. */ int main ( void ) { uart_config (); while ( true ) { printf ( \" \\n\\r Counter:%d. \\r\\n \" , counter ); nrf_delay_ms ( 1000 ); counter ++ ; } } SourceCode(FaBo Breakout) main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include \"app_uart.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"boards.h\" #define UART_TX_BUF_SIZE 1024u /**< UART TX buffer size. */ #define UART_RX_BUF_SIZE 1024u /**< UART RX buffer size. */ int counter = 0 ; /** * @brief UART\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9. */ void uart_events_handler ( app_uart_evt_t * p_event ) { switch ( p_event -> evt_type ) { case APP_UART_COMMUNICATION_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_communication ); break ; case APP_UART_FIFO_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_code ); break ; case APP_UART_TX_EMPTY : break ; default : break ; } } /** * @brief UART\u521d\u671f\u5316\u51e6\u7406. */ void uart_config ( void ) { uint32_t err_code ; const app_uart_comm_params_t comm_params = { RX_PIN_NUMBER , TX_PIN_NUMBER , RTS_PIN_NUMBER , CTS_PIN_NUMBER , APP_UART_FLOW_CONTROL_DISABLED , false , UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_events_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } /** * @brief Main\u51e6\u7406. */ int main ( void ) { uart_config (); while ( true ) { printf ( \" \\n\\r Counter:%d. \\r\\n \" , counter ); nrf_delay_ms ( 1000 ); counter ++ ; } } board_custom.h (\u65b0\u898f\u4f5c\u6210) 1 2 3 4 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define RTS_PIN_NUMBER 99 #define CTS_PIN_NUMBER 99 board_custom.h\u3092\u4f5c\u6210\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306b\u30d1\u30b9\u3092\u901a\u3059\u3002 Config\u3092\u4fee\u6b63\u3057\u3001UART\u3092\u6709\u52b9\u306b\u3059\u308b nrf_drv_config.h\u30d5\u30a1\u30a4\u30eb\u306bGPIOTE, UART\u306e\u6709\u52b9\u306b\u3059\u308b\u5909\u6570\u304c\u3042\u308b\u306e\u3067\u3001\u4fee\u6b63\u3092\u52a0\u3048\u308b\u3002 GPIOTE\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081 1 #define GPIOTE_ENABLED 1 \u306b\u3059\u308b\u3002 1 2 3 4 5 6 7 8 /* GPIOTE */ #define GPIOTE_ENABLED 1 #if (GPIOTE_ENABLED == 1) #define GPIOTE_CONFIG_USE_SWI_EGU false #define GPIOTE_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW #define GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS 1 #endif UART\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081 1 #define UART0_ENABLED 1 \u306b\u3059\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* UART */ #define UART0_ENABLED 1 #if (UART0_ENABLED == 1) #define UART0_CONFIG_HWFC NRF_UART_HWFC_DISABLED #define UART0_CONFIG_PARITY NRF_UART_PARITY_EXCLUDED #define UART0_CONFIG_BAUDRATE NRF_UART_BAUDRATE_38400 #define UART0_CONFIG_PSEL_TXD 0 #define UART0_CONFIG_PSEL_RXD 0 #define UART0_CONFIG_PSEL_CTS 0 #define UART0_CONFIG_PSEL_RTS 0 #define UART0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW #ifdef NRF52 #define UART0_CONFIG_USE_EASY_DMA false //Compile time flag #define UART_EASY_DMA_SUPPORT 1 #define UART_LEGACY_SUPPORT 1 #endif //NRF52 #endif Build\u3057\u3066\u8ee2\u9001","title":"UART"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/#uart","text":"UART module \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001UART\u901a\u4fe1\u3092\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002","title":"UART"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/#_1","text":"UART\u3067\u30c7\u30fc\u30bf\u306e\u9001\u53d7\u4fe1\u3092\u3059\u308b\u306b\u306f\u3001\u57fa\u677f\u306eRX, TX\u306e\u30d4\u30f3\u306e\u4f4d\u7f6e\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3002 \u57fa\u677f\u540d RX TX RTS CTS PCA10028 P0.11 P0.09 P0.08 P0.06 PCA10036 P0.08 P0.06 P0.05 P0.10 FaBo Breakout P0.09 P0.11 \u306a\u3057 \u306a\u3057","title":"\u57fa\u677f\u3068\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/#_2","text":"Device\u95a2\u9023 nRF Driver nRF Libraries nRF SoftDevice \u3082\u3057\u3001\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u5909\u308f\u308b\u5834\u5408\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8db3\u308a\u3066\u3044\u306a\u3044\u30a8\u30e9\u30fc\u306a\u306e\u3067\u3001Rsolv\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u4e0d\u8db3\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u88dc\u5145\u3059\u308b\u3002","title":"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/#urat","text":"Option\u306eC/C++\u30bf\u30d6\u3067\u3001Define\u306e\u5024\u306b\u30dc\u30fc\u30c9\u540d\u3092\u3044\u308c\u308b\u3053\u3068\u3067\u3001URAT\u306ePIN\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u57fa\u677f\u540d Define\u306e\u5024 \u5b9f\u969b\u306e\u753b\u9762 PCA10028 BOARD_PCA10028 PCA10036 BOARD_PCA10036 FaBo Breakout Board BOARD_CUSTOM Nordic\u88fd\u306e\u958b\u767a\u30dc\u30fc\u30c9\u306f\u3001boards.h\u3092\u8aad\u307f\u8fbc\u307f\u306b\u3044\u304d\u3001boards.h\u306b\u66f8\u304f\u30dc\u30fc\u30c9\u3088\u3046\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u306einclude\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3002PCA10028, PCA10036\u306ePIN\u306e\u5024\u306f\u3001\u305d\u308c\u305e\u308cpca10028.h, pca10036.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 boards.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #ifndef BOARDS_H #define BOARDS_H #include \"nrf_gpio.h\" #if defined(BOARD_NRF6310) #include \"nrf6310.h\" #elif defined(BOARD_PCA10000) #include \"pca10000.h\" #elif defined(BOARD_PCA10001) #include \"pca10001.h\" #elif defined(BOARD_PCA10002) #include \"pca10000.h\" #elif defined(BOARD_PCA10003) #include \"pca10003.h\" #elif defined(BOARD_PCA20006) #include \"pca20006.h\" #elif defined(BOARD_PCA10028) #include \"pca10028.h\" #elif defined(BOARD_PCA10031) #include \"pca10031.h\" #elif defined(BOARD_PCA10036) #include \"pca10036.h\" #elif defined(BOARD_PCA10040) #include \"pca10040.h\" #elif defined(BOARD_WT51822) #include \"wt51822.h\" #elif defined(BOARD_N5DK1) #include \"n5_starterkit.h\" #elif defined(BOARD_CUSTOM) #include \"custom_board.h\" #else #error \"Board is not defined\" FaBo Breakout Board\u306b\u95a2\u3057\u3066\u306f\u3001\u72ec\u81ea\u306bPIN\u306e\u5024\u306e\u5b9a\u7fa9\u3092\u304a\u3053\u306a\u3046\u3002CUSTOM_BOARD\u3068\u5b9a\u7fa9\u3059\u308b\u3068\u3001 boards_custom.h \u3092\u8aad\u307f\u306b\u3044\u304f\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u3001 boards_custom.h \u3092\u4f5c\u6210\u3057\u3001\u305d\u3053\u306b\u5024\u3092\u8a18\u8f09\u3059\u308b\u3002\u307e\u305f\u3001 boards_custom.h \u306e\u4f5c\u6210\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30d1\u30b9\u3092\u901a\u3057\u3066\u304a\u304f\u3053\u3068\u3082\u5fd8\u308c\u306a\u3044\u3002 boards_custom.h 1 2 3 4 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define RTS_PIN_NUMBER 99 #define CTS_PIN_NUMBER 99","title":"URAT\u306e\u8a2d\u5b9a"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/#sourcecodepca10028-pca10036","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include \"app_uart.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"boards.h\" #define UART_TX_BUF_SIZE 1024u /**< UART TX buffer size. */ #define UART_RX_BUF_SIZE 1024u /**< UART RX buffer size. */ int counter = 0 ; /** * @brief UART\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9. */ void uart_events_handler ( app_uart_evt_t * p_event ) { switch ( p_event -> evt_type ) { case APP_UART_COMMUNICATION_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_communication ); break ; case APP_UART_FIFO_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_code ); break ; case APP_UART_TX_EMPTY : break ; default : break ; } } /** * @brief UART\u521d\u671f\u5316\u51e6\u7406. */ void uart_config ( void ) { uint32_t err_code ; const app_uart_comm_params_t comm_params = { RX_PIN_NUMBER , TX_PIN_NUMBER , RTS_PIN_NUMBER , CTS_PIN_NUMBER , APP_UART_FLOW_CONTROL_DISABLED , false , UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_events_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } /** * @brief Main\u51e6\u7406. */ int main ( void ) { uart_config (); while ( true ) { printf ( \" \\n\\r Counter:%d. \\r\\n \" , counter ); nrf_delay_ms ( 1000 ); counter ++ ; } }","title":"SourceCode(PCA10028, PCA10036\u7528)"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/#sourcecodefabo-breakout","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include \"app_uart.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"boards.h\" #define UART_TX_BUF_SIZE 1024u /**< UART TX buffer size. */ #define UART_RX_BUF_SIZE 1024u /**< UART RX buffer size. */ int counter = 0 ; /** * @brief UART\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9. */ void uart_events_handler ( app_uart_evt_t * p_event ) { switch ( p_event -> evt_type ) { case APP_UART_COMMUNICATION_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_communication ); break ; case APP_UART_FIFO_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_code ); break ; case APP_UART_TX_EMPTY : break ; default : break ; } } /** * @brief UART\u521d\u671f\u5316\u51e6\u7406. */ void uart_config ( void ) { uint32_t err_code ; const app_uart_comm_params_t comm_params = { RX_PIN_NUMBER , TX_PIN_NUMBER , RTS_PIN_NUMBER , CTS_PIN_NUMBER , APP_UART_FLOW_CONTROL_DISABLED , false , UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_events_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } /** * @brief Main\u51e6\u7406. */ int main ( void ) { uart_config (); while ( true ) { printf ( \" \\n\\r Counter:%d. \\r\\n \" , counter ); nrf_delay_ms ( 1000 ); counter ++ ; } } board_custom.h (\u65b0\u898f\u4f5c\u6210) 1 2 3 4 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define RTS_PIN_NUMBER 99 #define CTS_PIN_NUMBER 99 board_custom.h\u3092\u4f5c\u6210\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306b\u30d1\u30b9\u3092\u901a\u3059\u3002","title":"SourceCode(FaBo Breakout)"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/#configuart","text":"nrf_drv_config.h\u30d5\u30a1\u30a4\u30eb\u306bGPIOTE, UART\u306e\u6709\u52b9\u306b\u3059\u308b\u5909\u6570\u304c\u3042\u308b\u306e\u3067\u3001\u4fee\u6b63\u3092\u52a0\u3048\u308b\u3002 GPIOTE\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081 1 #define GPIOTE_ENABLED 1 \u306b\u3059\u308b\u3002 1 2 3 4 5 6 7 8 /* GPIOTE */ #define GPIOTE_ENABLED 1 #if (GPIOTE_ENABLED == 1) #define GPIOTE_CONFIG_USE_SWI_EGU false #define GPIOTE_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW #define GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS 1 #endif UART\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081 1 #define UART0_ENABLED 1 \u306b\u3059\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* UART */ #define UART0_ENABLED 1 #if (UART0_ENABLED == 1) #define UART0_CONFIG_HWFC NRF_UART_HWFC_DISABLED #define UART0_CONFIG_PARITY NRF_UART_PARITY_EXCLUDED #define UART0_CONFIG_BAUDRATE NRF_UART_BAUDRATE_38400 #define UART0_CONFIG_PSEL_TXD 0 #define UART0_CONFIG_PSEL_RXD 0 #define UART0_CONFIG_PSEL_CTS 0 #define UART0_CONFIG_PSEL_RTS 0 #define UART0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW #ifdef NRF52 #define UART0_CONFIG_USE_EASY_DMA false //Compile time flag #define UART_EASY_DMA_SUPPORT 1 #define UART_LEGACY_SUPPORT 1 #endif //NRF52 #endif","title":"Config\u3092\u4fee\u6b63\u3057\u3001UART\u3092\u6709\u52b9\u306b\u3059\u308b"},{"location":"4.\u958b\u767a\u57fa\u790e/2.uart/#build","text":"","title":"Build\u3057\u3066\u8ee2\u9001"},{"location":"4.\u958b\u767a\u57fa\u790e/3.debug/","text":"Debug Logger Debug Logger \u3067\u306f\u3001UART\u3092\u7528\u3044\u305f\u30ed\u30b0\u306e\u8868\u793a\u304c\u53ef\u80fd\u3067\u3059\u3002 \u74b0\u5883\u69cb\u7bc9 \u4eca\u56de\u306f\u3001main.c\u4ee5\u5916\u306b\u3001custom_board.h\u3092\u8ffd\u52a0\u3059\u308b\u3002 \u65b0\u898f\u4f5c\u6210\u3057\u305f\u3060\u3051\u3067\u306f\u3001\u30ea\u30b9\u30c8\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u306e\u3067\u3001Sample1\u4ed8\u8fd1\u3067\u53f3\u30af\u30ea\u30c3\u30af\u3092\u62bc\u3057\u8868\u793a\u3055\u308c\u308b\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30e1\u30cb\u30e5\u30fc\u306e[Add Existing Files to Group 'Sample1'...]\u3092\u9078\u629e\u3057\u3001custom_board.h \u3092\u9078\u3076\u3002 \u6b21\u306b\u3001Option\u306e\u8a2d\u5b9a\u3067\u3001C/C++\u30bf\u30d6\u3067\u3001define\u306b\u3001BOARD_CUSTOM\u3068ENABLE_DEBUG_LOG_SUPPORT\u3092\u8ffd\u8a18\u3059\u308b\u3002 \u9805\u76ee \u610f\u5473 BOARD_CUSTOM custom_board.h\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u30ab\u30b9\u30bf\u30e0\u30dc\u30fc\u30c9\u306ePIN\u8a2d\u5b9a\u3092\u53cd\u6620\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b ENABLE_DEBUG_LOG_SUPPORT Debug Logger\u3092\u6709\u52b9\u306b\u3059\u308b \u307e\u305f\u3001custom_board.h\u304c\u5b58\u5728\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u306b\u30d1\u30b9\u3092\u901a\u3057\u3066\u304a\u304f\u3002 SourceCode main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <stdbool.h> #include \"nrf_delay.h\" #include \"app_trace.h\" int counter = 0 ; /** * @brief Main\u51e6\u7406. */ int main ( void ) { app_trace_init (); while ( true ) { app_trace_log ( \" \\n\\r Counter:%d. \\r\\n \" , counter ); nrf_delay_ms ( 1000 ); counter ++ ; } } cuntom_board.h 1 2 3 4 5 // UART\u306ePort\u3092\u5b9a\u7fa9. #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 100 #define RTS_PIN_NUMBER 100 \u8ffd\u52a0\u3059\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 nRF_Libraries\u304b\u3089app_trace\u3092\u9078\u629e\u3059\u308b\u3002\u8db3\u308a\u306a\u3044\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u3042\u308b\u305f\u3081\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u308b\u306e\u3067\u3001\u5de6\u3057\u305f\u306eResolv\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3002 nRF_Driver\u306enrf_error\u304c\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001No_softdevice\u306b\u9078\u629e\u3092\u5909\u3048\u308b\u3002 app_uart\u306f\u3001Fifo\u306b\u5909\u3048\u3066\u304a\u304f\u3002\u3053\u308c\u3092\u3084\u3089\u306a\u3044\u3068\u30011\u6587\u5b57\u3057\u304b\u6587\u5b57\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u3002 \u307e\u305f\u3001Board Support\u306ebsp\u3092\u8ffd\u52a0\u3059\u308b\u3002\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u308b\u306e\u3067\u3001resolve\u30dc\u30bf\u30f3\u3092\u9078\u629e\u3059\u308b\u3002 | Board Support | nRF_Driver | nRF_Libraries | nRF_SoftDevice | | -- | -- | -- | | | | | | nrf_drv_config.h\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3059\u308b GPIOTE\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081 1 #define GPIOTE_ENABLED 1 \u306b\u3059\u308b\u3002 1 2 3 4 5 6 7 8 /* GPIOTE */ #define GPIOTE_ENABLED 1 #if (GPIOTE_ENABLED == 1) #define GPIOTE_CONFIG_USE_SWI_EGU false #define GPIOTE_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW #define GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS 1 #endif UART\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081 1 #define UART0_ENABLED 1 \u306b\u3059\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* UART */ #define UART0_ENABLED 1 #if (UART0_ENABLED == 1) #define UART0_CONFIG_HWFC NRF_UART_HWFC_DISABLED #define UART0_CONFIG_PARITY NRF_UART_PARITY_EXCLUDED #define UART0_CONFIG_BAUDRATE NRF_UART_BAUDRATE_38400 #define UART0_CONFIG_PSEL_TXD 0 #define UART0_CONFIG_PSEL_RXD 0 #define UART0_CONFIG_PSEL_CTS 0 #define UART0_CONFIG_PSEL_RTS 0 #define UART0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW #ifdef NRF52 #define UART0_CONFIG_USE_EASY_DMA false //Compile time flag #define UART_EASY_DMA_SUPPORT 1 #define UART_LEGACY_SUPPORT 1 #endif //NRF52 #endif Build\u3057\u3066\u8ee2\u9001","title":"Debug Logger"},{"location":"4.\u958b\u767a\u57fa\u790e/3.debug/#debug-logger","text":"Debug Logger \u3067\u306f\u3001UART\u3092\u7528\u3044\u305f\u30ed\u30b0\u306e\u8868\u793a\u304c\u53ef\u80fd\u3067\u3059\u3002","title":"Debug Logger"},{"location":"4.\u958b\u767a\u57fa\u790e/3.debug/#_1","text":"\u4eca\u56de\u306f\u3001main.c\u4ee5\u5916\u306b\u3001custom_board.h\u3092\u8ffd\u52a0\u3059\u308b\u3002 \u65b0\u898f\u4f5c\u6210\u3057\u305f\u3060\u3051\u3067\u306f\u3001\u30ea\u30b9\u30c8\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u306e\u3067\u3001Sample1\u4ed8\u8fd1\u3067\u53f3\u30af\u30ea\u30c3\u30af\u3092\u62bc\u3057\u8868\u793a\u3055\u308c\u308b\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30e1\u30cb\u30e5\u30fc\u306e[Add Existing Files to Group 'Sample1'...]\u3092\u9078\u629e\u3057\u3001custom_board.h \u3092\u9078\u3076\u3002 \u6b21\u306b\u3001Option\u306e\u8a2d\u5b9a\u3067\u3001C/C++\u30bf\u30d6\u3067\u3001define\u306b\u3001BOARD_CUSTOM\u3068ENABLE_DEBUG_LOG_SUPPORT\u3092\u8ffd\u8a18\u3059\u308b\u3002 \u9805\u76ee \u610f\u5473 BOARD_CUSTOM custom_board.h\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u30ab\u30b9\u30bf\u30e0\u30dc\u30fc\u30c9\u306ePIN\u8a2d\u5b9a\u3092\u53cd\u6620\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b ENABLE_DEBUG_LOG_SUPPORT Debug Logger\u3092\u6709\u52b9\u306b\u3059\u308b \u307e\u305f\u3001custom_board.h\u304c\u5b58\u5728\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u306b\u30d1\u30b9\u3092\u901a\u3057\u3066\u304a\u304f\u3002","title":"\u74b0\u5883\u69cb\u7bc9"},{"location":"4.\u958b\u767a\u57fa\u790e/3.debug/#sourcecode","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <stdbool.h> #include \"nrf_delay.h\" #include \"app_trace.h\" int counter = 0 ; /** * @brief Main\u51e6\u7406. */ int main ( void ) { app_trace_init (); while ( true ) { app_trace_log ( \" \\n\\r Counter:%d. \\r\\n \" , counter ); nrf_delay_ms ( 1000 ); counter ++ ; } } cuntom_board.h 1 2 3 4 5 // UART\u306ePort\u3092\u5b9a\u7fa9. #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 100 #define RTS_PIN_NUMBER 100","title":"SourceCode"},{"location":"4.\u958b\u767a\u57fa\u790e/3.debug/#_2","text":"nRF_Libraries\u304b\u3089app_trace\u3092\u9078\u629e\u3059\u308b\u3002\u8db3\u308a\u306a\u3044\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u3042\u308b\u305f\u3081\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u308b\u306e\u3067\u3001\u5de6\u3057\u305f\u306eResolv\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3002 nRF_Driver\u306enrf_error\u304c\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001No_softdevice\u306b\u9078\u629e\u3092\u5909\u3048\u308b\u3002 app_uart\u306f\u3001Fifo\u306b\u5909\u3048\u3066\u304a\u304f\u3002\u3053\u308c\u3092\u3084\u3089\u306a\u3044\u3068\u30011\u6587\u5b57\u3057\u304b\u6587\u5b57\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u3002 \u307e\u305f\u3001Board Support\u306ebsp\u3092\u8ffd\u52a0\u3059\u308b\u3002\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u308b\u306e\u3067\u3001resolve\u30dc\u30bf\u30f3\u3092\u9078\u629e\u3059\u308b\u3002 | Board Support | nRF_Driver | nRF_Libraries | nRF_SoftDevice | | -- | -- | -- | | | | | |","title":"\u8ffd\u52a0\u3059\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"},{"location":"4.\u958b\u767a\u57fa\u790e/3.debug/#nrf_drv_configh","text":"GPIOTE\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081 1 #define GPIOTE_ENABLED 1 \u306b\u3059\u308b\u3002 1 2 3 4 5 6 7 8 /* GPIOTE */ #define GPIOTE_ENABLED 1 #if (GPIOTE_ENABLED == 1) #define GPIOTE_CONFIG_USE_SWI_EGU false #define GPIOTE_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW #define GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS 1 #endif UART\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081 1 #define UART0_ENABLED 1 \u306b\u3059\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* UART */ #define UART0_ENABLED 1 #if (UART0_ENABLED == 1) #define UART0_CONFIG_HWFC NRF_UART_HWFC_DISABLED #define UART0_CONFIG_PARITY NRF_UART_PARITY_EXCLUDED #define UART0_CONFIG_BAUDRATE NRF_UART_BAUDRATE_38400 #define UART0_CONFIG_PSEL_TXD 0 #define UART0_CONFIG_PSEL_RXD 0 #define UART0_CONFIG_PSEL_CTS 0 #define UART0_CONFIG_PSEL_RTS 0 #define UART0_CONFIG_IRQ_PRIORITY APP_IRQ_PRIORITY_LOW #ifdef NRF52 #define UART0_CONFIG_USE_EASY_DMA false //Compile time flag #define UART_EASY_DMA_SUPPORT 1 #define UART_LEGACY_SUPPORT 1 #endif //NRF52 #endif","title":"nrf_drv_config.h\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3059\u308b"},{"location":"4.\u958b\u767a\u57fa\u790e/3.debug/#build","text":"","title":"Build\u3057\u3066\u8ee2\u9001"},{"location":"4.\u958b\u767a\u57fa\u790e/4.timer/","text":"Application Timer Appplication Timer \u306f\u3001Real Time Counter1(RTC1)\u3092\u7528\u3044\u305f\u8907\u6570\u306eTimer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3002 nRF51\u5185\u90e8\u306b\u306f\u3001Real Time Counter\u304c2\u3064\u642d\u8f09\u3055\u308c\u3066\u3044\u308b(RTC0\u3068RTC1)\u3002Application Timer\u3067\u306fRTC1\u3092\u4f7f\u7528\u3002RTC0\u306f\u3001SoftDevice\u3067\u4f7f\u7528\u3002RTC1\u306e\u30a2\u30c9\u30ec\u30b9\u756a\u5730\u306f\u30010x40011000\u3002(\u53c2\u8003: Table 2. Peripheral protection and usage by SoftDevice ) nRF51 Series Reference Manual Version 1.1 P7 \u3088\u308a\u629c\u7c8b \u4e8b\u524d\u6e96\u5099 Debug Logger \u3068 Common application error handler \u306e\u74b0\u5883\u3092\u69cb\u7bc9\u3057\u3066\u304a\u304f\u3002 SourceCode main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include \"stdbool.h\" #include \"app_trace.h\" #include \"nrf_delay.h\" #include \"app_timer.h\" // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bf\u30a4\u30de\u30fc\u306e\u8a2d\u5b9a. #define APP_TIMER_PRESCALER 16 // RTC1 PRESCALER register\u306e\u5024. #define APP_TIMER_MAX_TIMERS 2 // \u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u3046\u6700\u5927\u306eTimer\u6570. #define APP_TIMER_OP_QUEUE_SIZE 3 // Timer\u64cd\u4f5c\u30ad\u30fc\u306e\u30b5\u30a4\u30ba. int counter = 0 ; void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } static void timer_handler ( void * p_context ){ app_trace_log ( \"App timer counter:%d \\r\\n \" , counter ); counter ++ ; } int main () { // Debug logger\u306e\u521d\u671f\u5316. app_trace_init (); // TimerID\u3092\u5b9a\u7fa9. APP_TIMER_DEF ( mytimer_id ); // Application Timer\u306e\u521d\u671f\u5316. APP_TIMER_INIT ( APP_TIMER_PRESCALER , APP_TIMER_OP_QUEUE_SIZE , false ); NRF_CLOCK -> TASKS_LFCLKSTART = 1 ; while ( NRF_CLOCK -> EVENTS_LFCLKSTARTED == 0 ); uint32_t error_code ; app_timer_id_t mytimer_id ; // Timer\u306e\u4f5c\u6210. error_code = app_timer_create ( & mytimer_id , APP_TIMER_MODE_REPEATED , timer_handler ); APP_ERROR_CHECK ( error_code ); // Timer\u306e\u958b\u59cb. error_code = app_timer_start ( mytimer_id , APP_TIMER_TICKS ( 1000 , APP_TIMER_PRESCALER ), NULL ); APP_ERROR_CHECK ( error_code ); while ( true ){ } } Reference Application timer tutorial","title":"Application Timer"},{"location":"4.\u958b\u767a\u57fa\u790e/4.timer/#application-timer","text":"Appplication Timer \u306f\u3001Real Time Counter1(RTC1)\u3092\u7528\u3044\u305f\u8907\u6570\u306eTimer\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3002 nRF51\u5185\u90e8\u306b\u306f\u3001Real Time Counter\u304c2\u3064\u642d\u8f09\u3055\u308c\u3066\u3044\u308b(RTC0\u3068RTC1)\u3002Application Timer\u3067\u306fRTC1\u3092\u4f7f\u7528\u3002RTC0\u306f\u3001SoftDevice\u3067\u4f7f\u7528\u3002RTC1\u306e\u30a2\u30c9\u30ec\u30b9\u756a\u5730\u306f\u30010x40011000\u3002(\u53c2\u8003: Table 2. Peripheral protection and usage by SoftDevice ) nRF51 Series Reference Manual Version 1.1 P7 \u3088\u308a\u629c\u7c8b","title":"Application Timer"},{"location":"4.\u958b\u767a\u57fa\u790e/4.timer/#_1","text":"Debug Logger \u3068 Common application error handler \u306e\u74b0\u5883\u3092\u69cb\u7bc9\u3057\u3066\u304a\u304f\u3002","title":"\u4e8b\u524d\u6e96\u5099"},{"location":"4.\u958b\u767a\u57fa\u790e/4.timer/#sourcecode","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include \"stdbool.h\" #include \"app_trace.h\" #include \"nrf_delay.h\" #include \"app_timer.h\" // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30bf\u30a4\u30de\u30fc\u306e\u8a2d\u5b9a. #define APP_TIMER_PRESCALER 16 // RTC1 PRESCALER register\u306e\u5024. #define APP_TIMER_MAX_TIMERS 2 // \u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u3046\u6700\u5927\u306eTimer\u6570. #define APP_TIMER_OP_QUEUE_SIZE 3 // Timer\u64cd\u4f5c\u30ad\u30fc\u306e\u30b5\u30a4\u30ba. int counter = 0 ; void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } static void timer_handler ( void * p_context ){ app_trace_log ( \"App timer counter:%d \\r\\n \" , counter ); counter ++ ; } int main () { // Debug logger\u306e\u521d\u671f\u5316. app_trace_init (); // TimerID\u3092\u5b9a\u7fa9. APP_TIMER_DEF ( mytimer_id ); // Application Timer\u306e\u521d\u671f\u5316. APP_TIMER_INIT ( APP_TIMER_PRESCALER , APP_TIMER_OP_QUEUE_SIZE , false ); NRF_CLOCK -> TASKS_LFCLKSTART = 1 ; while ( NRF_CLOCK -> EVENTS_LFCLKSTARTED == 0 ); uint32_t error_code ; app_timer_id_t mytimer_id ; // Timer\u306e\u4f5c\u6210. error_code = app_timer_create ( & mytimer_id , APP_TIMER_MODE_REPEATED , timer_handler ); APP_ERROR_CHECK ( error_code ); // Timer\u306e\u958b\u59cb. error_code = app_timer_start ( mytimer_id , APP_TIMER_TICKS ( 1000 , APP_TIMER_PRESCALER ), NULL ); APP_ERROR_CHECK ( error_code ); while ( true ){ } }","title":"SourceCode"},{"location":"4.\u958b\u767a\u57fa\u790e/4.timer/#reference","text":"Application timer tutorial","title":"Reference"},{"location":"4.\u958b\u767a\u57fa\u790e/5.error/","text":"Common application error handler SourceCode Common application error \u3067\u306f\u3001APP_ERROR_HANDLER(ERR_CODE)\u3001APP_ERROR_CHECK(ERR_CODE)\u3001APP_ERROR_CHECK_BOOL(BOOLEAN_VALUE)\u7b49\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u30a8\u30e9\u30fc\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u304d\u308b\u3002 app_trace\u90e8\u5206\u306f\u3001 Debug Logger \u306e\u9805\u76ee\u3092\u53c2\u7167\u3002 main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <stdbool.h> #include \"nrf_delay.h\" #include \"app_trace.h\" #include \"app_error.h\" int counter = 0 ; /** * @brief \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9.APP_ERROR_CHECK\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u547c\u3070\u308c\u308b. */ void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } /** * @brief Main\u51e6\u7406. */ int main ( void ) { app_trace_init (); while ( true ) { app_trace_log ( \" \\n\\r Counter:%d. \\r\\n \" , counter ); nrf_delay_ms ( 1000 ); counter ++ ; APP_ERROR_CHECK ( 1 ); } } Option\u306e\u8a2d\u5b9a Common application error handler\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001C/C++\u30bf\u30d6\u306eDefine\u306bDEBUG\u306e\u8a18\u8ff0\u3092\u8ffd\u8a18\u3059\u308b\u3002 \u51fa\u529b\u4f8b","title":"Common application error handler"},{"location":"4.\u958b\u767a\u57fa\u790e/5.error/#common-application-error-handler","text":"","title":"Common application error handler"},{"location":"4.\u958b\u767a\u57fa\u790e/5.error/#sourcecode","text":"Common application error \u3067\u306f\u3001APP_ERROR_HANDLER(ERR_CODE)\u3001APP_ERROR_CHECK(ERR_CODE)\u3001APP_ERROR_CHECK_BOOL(BOOLEAN_VALUE)\u7b49\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u30a8\u30e9\u30fc\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u304d\u308b\u3002 app_trace\u90e8\u5206\u306f\u3001 Debug Logger \u306e\u9805\u76ee\u3092\u53c2\u7167\u3002 main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <stdbool.h> #include \"nrf_delay.h\" #include \"app_trace.h\" #include \"app_error.h\" int counter = 0 ; /** * @brief \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9.APP_ERROR_CHECK\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u547c\u3070\u308c\u308b. */ void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } /** * @brief Main\u51e6\u7406. */ int main ( void ) { app_trace_init (); while ( true ) { app_trace_log ( \" \\n\\r Counter:%d. \\r\\n \" , counter ); nrf_delay_ms ( 1000 ); counter ++ ; APP_ERROR_CHECK ( 1 ); } }","title":"SourceCode"},{"location":"4.\u958b\u767a\u57fa\u790e/5.error/#option","text":"Common application error handler\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001C/C++\u30bf\u30d6\u306eDefine\u306bDEBUG\u306e\u8a18\u8ff0\u3092\u8ffd\u8a18\u3059\u308b\u3002","title":"Option\u306e\u8a2d\u5b9a"},{"location":"4.\u958b\u767a\u57fa\u790e/5.error/#_1","text":"","title":"\u51fa\u529b\u4f8b"},{"location":"4.\u958b\u767a\u57fa\u790e/6.pstorage/","text":"Persistent Storage Interfaceinclude <stdbool.h> #include \"nrf_delay.h\" #include \"app_trace.h\" #include \"app_error.h\" #include \"storage.h\" #include \"ble_conn_params.h\" #include \"nrf_sdm.h\" #include \"softdevice_handler.h\" #include \"pstorage.h\" static uint8_t pstorage_wait_flag = 0 ; static pstorage_block_t pstorage_wait_handle = 0 ; /** * @brief \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9.APP_ERROR_CHECK\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u547c\u3070\u308c\u308b. */ void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } /** * @brief \u95a2\u9023\u3059\u308bModule\u7fa4\u306b\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u95a2\u6570. * * @details \u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3042\u3068\u306b\u3001\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] sys_evt \u30b7\u30b9\u30c6\u30e0\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8 */ static void sys_evt_dispatch ( uint32_t sys_evt ) { pstorage_sys_event_handler ( sys_evt ); } /** * @brief BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306eModule\u7fa4\u306bBLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u305f\u3081\u306e\u95a2\u6570. * * @details BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u4fe1\u3057\u305f\u3042\u3068\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] p_ble_evt Bluetooth\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /** * @brief PStorage\u95a2\u9023\u306e\u30cf\u30f3\u30c9\u30e9.\u5404\u51e6\u7406\u306e\u6210\u529f\u5931\u6557\u306e\u7d50\u679c\u304c\u53d6\u308c\u308b. */ static void example_cb_handler ( pstorage_handle_t * handle , uint8_t op_code , uint32_t result , uint8_t * p_data , uint32_t data_len ) { if ( handle -> block_id == pstorage_wait_handle ) { pstorage_wait_flag = 0 ; } //If we are waiting for this callback, clear the wait flag. switch ( op_code ) { case PSTORAGE_LOAD_OP_CODE : if ( result == NRF_SUCCESS ) { app_trace_log ( \"PSTORAGE_LOAD_OP_CODE: SUCCESS \\r\\n \" ); } else { app_trace_log ( \"PSTORAGE_LOAD_OP_CODE: FAULT \\r\\n \" ); } break ; case PSTORAGE_STORE_OP_CODE : if ( result == NRF_SUCCESS ) { app_trace_log ( \"PSTORAGE_STORE_OP_CODE: SUCCESS \\r\\n \" ); } else { app_trace_log ( \"PSTORAGE_STORE_OP_CODE: FAULT \\r\\n \" ); } break ; case PSTORAGE_UPDATE_OP_CODE : if ( result == NRF_SUCCESS ) { app_trace_log ( \"PSTORAGE_UPDATE_OP_CODE: SUCCESS \\r\\n \" ); } else { app_trace_log ( \"PSTORAGE_ERROR_LED_PIN_NO: FAULT \\r\\n \" ); } break ; case PSTORAGE_CLEAR_OP_CODE : if ( result == NRF_SUCCESS ) { app_trace_log ( \"PSTORAGE_ERROR_LED_PIN_NO: SUCCESS \\r\\n \" ); } else { app_trace_log ( \"PSTORAGE_ERROR_LED_PIN_NO: FAULT \\r\\n \" ); } break ; } } /** * @brief \u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u95a2\u6570. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /** * @brief Main\u51e6\u7406. */ int main ( void ) { // Debug Logger\u306e\u521d\u671f\u5316. app_trace_init (); // SoftDevice\u306e\u521d\u671f\u5316. uint32_t err_code ; SOFTDEVICE_HANDLER_INIT ( NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION , false ); // BLE\u30b9\u30bf\u30c3\u30af\u3092\u6709\u52b9\u306b\u3059\u308b. ble_enable_params_t ble_enable_params ; memset ( & ble_enable_params , 0 , sizeof ( ble_enable_params )); //ble_enable_params.gatts_enable_params.service_changed = IS_SRVC_CHANGED_CHARACT_PRESENT; err_code = sd_ble_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u7fa4\u306e\u305f\u3081\u306eSoftDevice\u30cf\u30f3\u30c9\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332. err_code = softdevice_sys_evt_handler_set ( sys_evt_dispatch ); APP_ERROR_CHECK ( err_code ); pstorage_handle_t handle ; pstorage_handle_t block_0_handle ; pstorage_handle_t block_1_handle ; pstorage_module_param_t param ; // Param of write uint8_t write_data_0 [ 16 ] = { 0x41 , 0x42 , 0x43 , 0x44 , 0x45 , 0x46 , 0x47 , 0x48 , 0x49 , 0x4a , 0x4b , 0x4c , 0x4d , 0x4e , 0x4f , 0x50 }; uint8_t write_data_1 [ 16 ] = { 0x31 , 0x32 , 0x33 , 0x34 , 0x35 , 0x36 , 0x37 , 0x38 , 0x39 , 0x3a , 0x3b , 0x3c , 0x4d , 0x3e , 0x3f , 0x40 }; // Param of read uint8_t read_data_0 [ 16 ]; uint8_t read_data_1 [ 16 ]; // Persistent Storage\u306e\u521d\u671f\u5316. err_code = pstorage_init (); if ( err_code != NRF_SUCCESS ) { app_trace_log ( \"fail of intialize pstorage.\" ); } param . block_size = 16 ; //Select block size of 16 bytes param . block_count = 10 ; //Select 10 blocks, total of 160 bytes param . cb = example_cb_handler ; //Set the pstorage callback handler // Persistent Storage\u306e\u767b\u9332. err_code = pstorage_register ( & param , & handle ); if ( err_code != NRF_SUCCESS ) { app_trace_log ( \" fail of register pstorage.\" ); } // \u30d6\u30ed\u30c3\u30af\u8b58\u5225\u3057\u3092\u53d6\u5f97. pstorage_block_identifier_get ( & handle , 0 , & block_0_handle ); pstorage_block_identifier_get ( & handle , 1 , & block_1_handle ); // 32 bytes\u306e\u30c7\u30fc\u30bf\u30af\u30ea\u30a2( 16 bytes x 2 block ) pstorage_clear ( & block_0_handle , 32 ); // \u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30a2 pstorage_wait_handle = block_1_handle . block_id ; //Specify which pstorage handle to wait for pstorage_wait_flag = 1 ; //Set the wait flag. Cleared in the example_cb_handler pstorage_store ( & block_0_handle , write_data_0 , 16 , 0 ); //Write to flash, only one block is allowed for each pstorage_store command pstorage_store ( & block_1_handle , write_data_1 , 16 , 0 ); //Write to flash, only one block is allowed for each pstorage_store command while ( pstorage_wait_flag ) { power_manage (); } //Sleep until store operation is finished. // \u30a8\u30fc\u30bf\u3092\u30ed\u30fc\u30c9 pstorage_wait_handle = block_0_handle . block_id ; //Specify which pstorage handle to wait for pstorage_wait_flag = 1 ; //Set the wait flag. Cleared in the example_cb_handler pstorage_load ( read_data_0 , & block_0_handle , 16 , 0 ); //Read from flash, only one block is allowed for each pstorage_load command pstorage_load ( read_data_1 , & block_1_handle , 16 , 0 ); //Read from flash // \u7d50\u679c\u3092\u8868\u793a app_trace_log ( \"First value of read_data_0: %c \\r\\n \" , read_data_0 [ 0 ]); app_trace_log ( \"First value of read_data_1: %c \\r\\n \" , read_data_1 [ 0 ]); while ( true ) { power_manage (); } }","title":"Persistent Storage Interface"},{"location":"4.\u958b\u767a\u57fa\u790e/6.pstorage/#persistent-storage-interface","textinclude <stdbool.h> #include \"nrf_delay.h\" #include \"app_trace.h\" #include \"app_error.h\" #include \"storage.h\" #include \"ble_conn_params.h\" #include \"nrf_sdm.h\" #include \"softdevice_handler.h\" #include \"pstorage.h\" static uint8_t pstorage_wait_flag = 0 ; static pstorage_block_t pstorage_wait_handle = 0 ; /** * @brief \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9.APP_ERROR_CHECK\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u547c\u3070\u308c\u308b. */ void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } /** * @brief \u95a2\u9023\u3059\u308bModule\u7fa4\u306b\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u95a2\u6570. * * @details \u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3042\u3068\u306b\u3001\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] sys_evt \u30b7\u30b9\u30c6\u30e0\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8 */ static void sys_evt_dispatch ( uint32_t sys_evt ) { pstorage_sys_event_handler ( sys_evt ); } /** * @brief BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306eModule\u7fa4\u306bBLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u305f\u3081\u306e\u95a2\u6570. * * @details BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u4fe1\u3057\u305f\u3042\u3068\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] p_ble_evt Bluetooth\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /** * @brief PStorage\u95a2\u9023\u306e\u30cf\u30f3\u30c9\u30e9.\u5404\u51e6\u7406\u306e\u6210\u529f\u5931\u6557\u306e\u7d50\u679c\u304c\u53d6\u308c\u308b. */ static void example_cb_handler ( pstorage_handle_t * handle , uint8_t op_code , uint32_t result , uint8_t * p_data , uint32_t data_len ) { if ( handle -> block_id == pstorage_wait_handle ) { pstorage_wait_flag = 0 ; } //If we are waiting for this callback, clear the wait flag. switch ( op_code ) { case PSTORAGE_LOAD_OP_CODE : if ( result == NRF_SUCCESS ) { app_trace_log ( \"PSTORAGE_LOAD_OP_CODE: SUCCESS \\r\\n \" ); } else { app_trace_log ( \"PSTORAGE_LOAD_OP_CODE: FAULT \\r\\n \" ); } break ; case PSTORAGE_STORE_OP_CODE : if ( result == NRF_SUCCESS ) { app_trace_log ( \"PSTORAGE_STORE_OP_CODE: SUCCESS \\r\\n \" ); } else { app_trace_log ( \"PSTORAGE_STORE_OP_CODE: FAULT \\r\\n \" ); } break ; case PSTORAGE_UPDATE_OP_CODE : if ( result == NRF_SUCCESS ) { app_trace_log ( \"PSTORAGE_UPDATE_OP_CODE: SUCCESS \\r\\n \" ); } else { app_trace_log ( \"PSTORAGE_ERROR_LED_PIN_NO: FAULT \\r\\n \" ); } break ; case PSTORAGE_CLEAR_OP_CODE : if ( result == NRF_SUCCESS ) { app_trace_log ( \"PSTORAGE_ERROR_LED_PIN_NO: SUCCESS \\r\\n \" ); } else { app_trace_log ( \"PSTORAGE_ERROR_LED_PIN_NO: FAULT \\r\\n \" ); } break ; } } /** * @brief \u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u95a2\u6570. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /** * @brief Main\u51e6\u7406. */ int main ( void ) { // Debug Logger\u306e\u521d\u671f\u5316. app_trace_init (); // SoftDevice\u306e\u521d\u671f\u5316. uint32_t err_code ; SOFTDEVICE_HANDLER_INIT ( NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION , false ); // BLE\u30b9\u30bf\u30c3\u30af\u3092\u6709\u52b9\u306b\u3059\u308b. ble_enable_params_t ble_enable_params ; memset ( & ble_enable_params , 0 , sizeof ( ble_enable_params )); //ble_enable_params.gatts_enable_params.service_changed = IS_SRVC_CHANGED_CHARACT_PRESENT; err_code = sd_ble_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u7fa4\u306e\u305f\u3081\u306eSoftDevice\u30cf\u30f3\u30c9\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332. err_code = softdevice_sys_evt_handler_set ( sys_evt_dispatch ); APP_ERROR_CHECK ( err_code ); pstorage_handle_t handle ; pstorage_handle_t block_0_handle ; pstorage_handle_t block_1_handle ; pstorage_module_param_t param ; // Param of write uint8_t write_data_0 [ 16 ] = { 0x41 , 0x42 , 0x43 , 0x44 , 0x45 , 0x46 , 0x47 , 0x48 , 0x49 , 0x4a , 0x4b , 0x4c , 0x4d , 0x4e , 0x4f , 0x50 }; uint8_t write_data_1 [ 16 ] = { 0x31 , 0x32 , 0x33 , 0x34 , 0x35 , 0x36 , 0x37 , 0x38 , 0x39 , 0x3a , 0x3b , 0x3c , 0x4d , 0x3e , 0x3f , 0x40 }; // Param of read uint8_t read_data_0 [ 16 ]; uint8_t read_data_1 [ 16 ]; // Persistent Storage\u306e\u521d\u671f\u5316. err_code = pstorage_init (); if ( err_code != NRF_SUCCESS ) { app_trace_log ( \"fail of intialize pstorage.\" ); } param . block_size = 16 ; //Select block size of 16 bytes param . block_count = 10 ; //Select 10 blocks, total of 160 bytes param . cb = example_cb_handler ; //Set the pstorage callback handler // Persistent Storage\u306e\u767b\u9332. err_code = pstorage_register ( & param , & handle ); if ( err_code != NRF_SUCCESS ) { app_trace_log ( \" fail of register pstorage.\" ); } // \u30d6\u30ed\u30c3\u30af\u8b58\u5225\u3057\u3092\u53d6\u5f97. pstorage_block_identifier_get ( & handle , 0 , & block_0_handle ); pstorage_block_identifier_get ( & handle , 1 , & block_1_handle ); // 32 bytes\u306e\u30c7\u30fc\u30bf\u30af\u30ea\u30a2( 16 bytes x 2 block ) pstorage_clear ( & block_0_handle , 32 ); // \u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30a2 pstorage_wait_handle = block_1_handle . block_id ; //Specify which pstorage handle to wait for pstorage_wait_flag = 1 ; //Set the wait flag. Cleared in the example_cb_handler pstorage_store ( & block_0_handle , write_data_0 , 16 , 0 ); //Write to flash, only one block is allowed for each pstorage_store command pstorage_store ( & block_1_handle , write_data_1 , 16 , 0 ); //Write to flash, only one block is allowed for each pstorage_store command while ( pstorage_wait_flag ) { power_manage (); } //Sleep until store operation is finished. // \u30a8\u30fc\u30bf\u3092\u30ed\u30fc\u30c9 pstorage_wait_handle = block_0_handle . block_id ; //Specify which pstorage handle to wait for pstorage_wait_flag = 1 ; //Set the wait flag. Cleared in the example_cb_handler pstorage_load ( read_data_0 , & block_0_handle , 16 , 0 ); //Read from flash, only one block is allowed for each pstorage_load command pstorage_load ( read_data_1 , & block_1_handle , 16 , 0 ); //Read from flash // \u7d50\u679c\u3092\u8868\u793a app_trace_log ( \"First value of read_data_0: %c \\r\\n \" , read_data_0 [ 0 ]); app_trace_log ( \"First value of read_data_1: %c \\r\\n \" , read_data_1 [ 0 ]); while ( true ) { power_manage (); } }","title":"Persistent Storage Interface"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/","text":"SoftDevice SoftDevice\u3068\u306f Nordic\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bnRF5x\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e \u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af \u3002 nRF51\u30b7\u30ea\u30fc\u30ba BLE\u7528\u306fS110, S120, S130\u3068\uff13\u7a2e\u985e\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u7528\u9014\u304c\u7570\u306a\u308b\u3002 \u3061\u306a\u307f\u306bS210, S310\u306f ANT/ANT+ \u7528\u306e\u30b9\u30bf\u30c3\u30af\u306b\u306a\u308b\u3002 ARM\u00ae CortexTM-M0\u5411\u3051\u3002 nRF52\u30b7\u30ea\u30fc\u30ba 52\u30b7\u30ea\u30fc\u30ba\u5411\u3051SoftDevice\u306f\u73fe\u5728(2015/9)\u958b\u767a\u4e2d\u3067\u3001S130\u3092\u30d9\u30fc\u30b9\u3068\u3057\u305fS132\u306eAlpha\u7248\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002 S110,S120\u306b\u5bfe\u5fdc\u3057\u305f\u7269\u3082\u9806\u6b21\u958b\u767a\u4e88\u5b9a\u3002 ARM\u00ae Cortex-M4F\u5411\u3051\u3002 \u5bfe\u5fdc\u30c1\u30c3\u30d7\u3068\u30d0\u30fc\u30b8\u30e7\u30f3 \u6bd4\u8f03 SoftDevice \u6982\u8981 S110 Peripheral\u5c02\u7528 S120 Central/Peripheral\u4e21\u7528\u3002 Central\u30e2\u30fc\u30c9\u306e\u5834\u5408\u306f8\u3064\u540c\u6642\u63a5\u7d9a\u53ef\u80fd\u3001Peripheral\u30e2\u30fc\u30c9\u306e\u5834\u5408\u306f\u540c\u6642\u306bBroadcaster\u3068\u3057\u3066\u3082\u52d5\u4f5c\u3059\u308b\u3002 S130 Central/Peripheral\u540c\u6642\u5229\u7528\u3002 Central\u3068\u3057\u3066\uff13\u63a5\u7d9a\u3068\uff11\u3064\u306ePeripheral\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3002\u3053\u3061\u3089\u306fObserver\u3068Broadcaster\u4e21\u65b9\u306b\u306a\u308c\u308b\u3002 \u30e1\u30e2\u30ea\u30de\u30c3\u30d7 SoftDevice\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066Application\u3092\u66f8\u304d\u8fbc\u3080\u30a2\u30c9\u30ec\u30b9\u3084\u30e1\u30e2\u30ea\u306e\u9818\u57df\u304c\u7570\u306a\u308b \u30d3\u30eb\u30c9\u8a2d\u5b9a\u6642\u306b\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u5fc5\u8981\u306b\u306a\u308b S110 S120 S130","title":"SoftDevice"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#softdevice","text":"","title":"SoftDevice"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#softdevice_1","text":"Nordic\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bnRF5x\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e \u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af \u3002","title":"SoftDevice\u3068\u306f"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#nrf51","text":"BLE\u7528\u306fS110, S120, S130\u3068\uff13\u7a2e\u985e\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u7528\u9014\u304c\u7570\u306a\u308b\u3002 \u3061\u306a\u307f\u306bS210, S310\u306f ANT/ANT+ \u7528\u306e\u30b9\u30bf\u30c3\u30af\u306b\u306a\u308b\u3002 ARM\u00ae CortexTM-M0\u5411\u3051\u3002","title":"nRF51\u30b7\u30ea\u30fc\u30ba"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#nrf52","text":"52\u30b7\u30ea\u30fc\u30ba\u5411\u3051SoftDevice\u306f\u73fe\u5728(2015/9)\u958b\u767a\u4e2d\u3067\u3001S130\u3092\u30d9\u30fc\u30b9\u3068\u3057\u305fS132\u306eAlpha\u7248\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002 S110,S120\u306b\u5bfe\u5fdc\u3057\u305f\u7269\u3082\u9806\u6b21\u958b\u767a\u4e88\u5b9a\u3002 ARM\u00ae Cortex-M4F\u5411\u3051\u3002","title":"nRF52\u30b7\u30ea\u30fc\u30ba"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#_1","text":"","title":"\u5bfe\u5fdc\u30c1\u30c3\u30d7\u3068\u30d0\u30fc\u30b8\u30e7\u30f3"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#_2","text":"SoftDevice \u6982\u8981 S110 Peripheral\u5c02\u7528 S120 Central/Peripheral\u4e21\u7528\u3002 Central\u30e2\u30fc\u30c9\u306e\u5834\u5408\u306f8\u3064\u540c\u6642\u63a5\u7d9a\u53ef\u80fd\u3001Peripheral\u30e2\u30fc\u30c9\u306e\u5834\u5408\u306f\u540c\u6642\u306bBroadcaster\u3068\u3057\u3066\u3082\u52d5\u4f5c\u3059\u308b\u3002 S130 Central/Peripheral\u540c\u6642\u5229\u7528\u3002 Central\u3068\u3057\u3066\uff13\u63a5\u7d9a\u3068\uff11\u3064\u306ePeripheral\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3002\u3053\u3061\u3089\u306fObserver\u3068Broadcaster\u4e21\u65b9\u306b\u306a\u308c\u308b\u3002","title":"\u6bd4\u8f03"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#_3","text":"SoftDevice\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066Application\u3092\u66f8\u304d\u8fbc\u3080\u30a2\u30c9\u30ec\u30b9\u3084\u30e1\u30e2\u30ea\u306e\u9818\u57df\u304c\u7570\u306a\u308b \u30d3\u30eb\u30c9\u8a2d\u5b9a\u6642\u306b\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u5fc5\u8981\u306b\u306a\u308b","title":"\u30e1\u30e2\u30ea\u30de\u30c3\u30d7"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#s110","text":"","title":"S110"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#s120","text":"","title":"S120"},{"location":"4.\u958b\u767a\u57fa\u790e/7.softdevice/#s130","text":"","title":"S130"},{"location":"6.iBeacon/1.beacon/","text":"Beacon iBeacon Format iBeacon\u306f\u3001Apple\u793e\u306e\u5b9a\u7fa9\u3059\u308bProximity Beacon\u3067\u3042\u308b\u3002 https://developer.apple.com/ibeacon/ \u306e\u30da\u30fc\u30b8\u306b\u3066\u3001iBeacon\u306eFormat\u60c5\u5831\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3002 iBeacon\u306f\u3001\u958b\u59cb\u5f53\u521d\u306f\u3001MFi\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0b\u306eiBeacon Program\u306e\u5951\u7d04\u306e\u5143\u3067\u3001NDA\u60c5\u5831\u3068\u3057\u3066Format\u60c5\u5831\u304c\u958b\u793a\u3055\u308c\u3066\u3044\u305f\u304c\u30012015\u5e749\u6708\u3088\u308a\u3001Web\u3067\u8ab0\u3067\u3082\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u5f62\u3067Format\u304c\u958b\u793a\u3055\u308c\u3066\u3044\u308b\u3002 \u81ea\u793e\u88fd\u54c1\u306b\u3001iBeacon\u306e\u30ed\u30b4\u3084\u8a18\u8ff0\u3092\u63b2\u8f09\u3059\u308b\u5834\u5408\u306f\u3001 https://developer.apple.com/ibeacon/ \u306b\u958b\u793a\u3055\u308c\u3066\u3044\u308b\u6761\u4ef6\u306b\u5f93\u3048\u3070\u3001\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u305f\u3002","title":"Beacon"},{"location":"6.iBeacon/1.beacon/#beacon","text":"","title":"Beacon"},{"location":"6.iBeacon/1.beacon/#ibeacon-format","text":"iBeacon\u306f\u3001Apple\u793e\u306e\u5b9a\u7fa9\u3059\u308bProximity Beacon\u3067\u3042\u308b\u3002 https://developer.apple.com/ibeacon/ \u306e\u30da\u30fc\u30b8\u306b\u3066\u3001iBeacon\u306eFormat\u60c5\u5831\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3002 iBeacon\u306f\u3001\u958b\u59cb\u5f53\u521d\u306f\u3001MFi\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0b\u306eiBeacon Program\u306e\u5951\u7d04\u306e\u5143\u3067\u3001NDA\u60c5\u5831\u3068\u3057\u3066Format\u60c5\u5831\u304c\u958b\u793a\u3055\u308c\u3066\u3044\u305f\u304c\u30012015\u5e749\u6708\u3088\u308a\u3001Web\u3067\u8ab0\u3067\u3082\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u5f62\u3067Format\u304c\u958b\u793a\u3055\u308c\u3066\u3044\u308b\u3002 \u81ea\u793e\u88fd\u54c1\u306b\u3001iBeacon\u306e\u30ed\u30b4\u3084\u8a18\u8ff0\u3092\u63b2\u8f09\u3059\u308b\u5834\u5408\u306f\u3001 https://developer.apple.com/ibeacon/ \u306b\u958b\u793a\u3055\u308c\u3066\u3044\u308b\u6761\u4ef6\u306b\u5f93\u3048\u3070\u3001\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u305f\u3002","title":"iBeacon Format"},{"location":"6.iBeacon/2.beaconadvdata/","text":"Advertising Data Advertising Data \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 Type \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 ADV_NONCONN_IND iBeacon\u306f\u3001ADV_NONCONN_IND\u3067\u30a2\u30c9\u30d0\u30fc\u30bf\u30a4\u30ba\u3055\u308c\u308b\u304c\u3001ADV_NONCONN_IND\u3067\u306f\u3001AdvA\u304c6\u30aa\u30af\u30c6\u30c3\u30c8\u3001AdvData\u304c0-31\u30aa\u30af\u30c6\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u308b\u3002 AdvA AdvA\u306f\u30016\u30aa\u30af\u30c6\u30c3\u30c8(48bit)\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002\u30c7\u30d0\u30a4\u30b9\u3092\u8b58\u5225\u3059\u308b\u305f\u3081\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u306a\u308b\u3002 AdvA\u306e\u30a2\u30c9\u30ec\u30b9\u306f\u3001PUD Header\u306eTxAdd, RxAdd\u306e\u8a18\u8ff0\u306b\u3088\u308a\u3001public\u3068random\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u5272\u308a\u632f\u3089\u308c\u308b\u3002 \u4ed5\u69d8 AdvA\u306e\u6319\u52d5 Public address IEEE Registration Authority\u306b\u3088\u308a\u767b\u9332\u3055\u308c\u305f\u30a2\u30c9\u30ec\u30b9\u300248 bit\u306e\u30a2\u30c9\u30ec\u30b9\u306f\u300124bit\u304cCompany ID (CID)\u3067\u300124bit\u304cMac Address\u3067\u69cb\u6210\u3002\u30c7\u30d0\u30a4\u30b9\u304c\u5b58\u5728\u3059\u308b\u9593\u306f\u540c\u3058\u5024\u3002 Random Static address \u96fb\u6e90\u304cOn\u306b\u306a\u3063\u305f\u969b\u306b\u5272\u308a\u632f\u3089\u308c\u308b\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3002Reboot\u304c\u304b\u304b\u308b\u3068\u9055\u3046\u5024\u306b\u3002 Private Non-Resolvable address identity resolving key (IRK)\u3068\u4e71\u6570\u306b\u3088\u308a\u751f\u6210\u3002\u63a5\u7d9a\u4e2d\u3082\u5024\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 Private Non-Resolvable address Random\u306a\u5024\u3092\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5272\u308a\u632f\u308b\u3002\u3042\u307e\u308a\u4e00\u822c\u7684\u3067\u306f\u306a\u3044\u3002 SoftDevice\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u5024\u306f\u3001 GAP Address Type \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 1 2 3 4 #define BLE_GAP_ADDR_TYPE_PUBLIC 0x00 #define BLE_GAP_ADDR_TYPE_RANDOM_STATIC 0x01 #define BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE 0x02 #define BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE 0x03 SoftDevice\u3067\u306f\u3001 sd_ble_gap_address_set \u3067\u3001\u53cd\u6620\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u4eca\u56de\u306eiBeacon\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4f7f\u7528\u3057\u306a\u3044\u3002 AdvData Advertising\u306eData\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u3001Core Bluetooth 4.0 Core Specification\u306b\u3088\u308a\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 Advertising\u306e\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u306f\u3001AD Structure\u3068\u3044\u3046\u69cb\u9020\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002AD Structure\u306f\u3001\u9577\u3055+AD Type + AD Data\u306e3\u8981\u7d20\u306b\u3088\u308a\u5b9a\u7fa9\u3055\u308c\u308b\u3002AD Type\u3067\u5b9a\u7fa9\u53ef\u80fd\u306a\u5024\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002 | \u5024 | AD Type | \u60c5\u5831| | -- | -- | | 0x01 | FLAGS | | | 0x02 |SERVICE | More 16-bit UUIDs available | | 0x03 | SERVICE | Complete list of 16-bit UUIDs available | | 0x04 | SERVICE | More 32-bit UUIDs available | | 0x05 | SERVICE | Complete list of 32-bit UUIDs available | | 0x06 | SERVICE | More 128-bit UUIDs available | | 0x07| SERVICE | Complete list of 128-bit UUIDs available | | 0x08 | LOCAL NAME | Shortened local name | | 0x09 | LOCAL NAME | Complete local name | | 0x0A | TX POWER LEVEL | 0xXX:-127 to +127dBm | | 0x0D | SIMPLE PAIRING OPTIONAL OOB TAGS | Class of device | | 0x0E | SIMPLE PAIRING OPTIONAL OOB TAGS | Simple Pairing Hash C | | 0x0F | SIMPLE PAIRING OPTIONAL OOB TAGS | Simple Pairing Randomizer R | | 0x10 | SECURITY MANAGER TK VALUE | SECURITY MANAGER TK VALUE | | 0x11 | SECURITY MANAGER OOB FLAGS | SECURITY MANAGER OOB FLAGS | | 0x12 | SLAVE CONNECTION INTERVAL RANGE | SLAVE CONNECTION INTERVAL RANGE | | 0x14 | SERVICE SOLICITATION | List of 16 bit Service UUIDs| | 0x15 | SERVICE SOLICITATION | List of 128 bit Service UUIDs| | 0x16 | SERVICE DATA | The first 2 octets contain the 16 bit Service UUID followed by additional service data| | 0xFF | Manufacture Specific | The first 2 octets contain the Company Identifier Code followed by additional manufacturer specific data | BLUETOOTH SPECIFICATION Version 4.0 [Vol 3] P401-P403\u304b\u3089\u629c\u7c8b iBeacon\u306eAdvertising\u306e\u30d1\u30b1\u30c3\u30c8\u306f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5024\u3068\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u3002 iBeacon\u306eFLAGS Proximity Beacon Specification Release R1 P6\u3088\u308a\u629c\u7c8b iBeacon\u3067\u306f 1 02 01 06 \u304b\u3089\u59cb\u307e\u308b\u3002 1 02 01 06 \u306f\u3001Flags\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002SoftDevice\u306f\u3001 S110 GAP Advertisement Flags \u306e\u5024\u304c\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u3002 S110 GAP Advertisement Flags \u3000\u3067\u306f\u3001\u4e0b\u8a18\u306e\u5024\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 \u5b9a\u6570 \u610f\u5473\u3000 BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED BR/EDR not supported. BLE_GAP_ADV_FLAG_LE_BR_EDR_CONTROLLER Simultaneous LE and BR/EDR, Controller. BLE_GAP_ADV_FLAG_LE_BR_EDR_HOST Simultaneous LE and BR/EDR, Host. BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE LE General Discoverable Mode. BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE LE Limited Discoverable Mode. BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE LE General Discoverable Mode, BR/EDR not supported. BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE LE Limited Discoverable Mode, BR/EDR not supported. 1 02 01 06 \u306f | \u5024 | \u610f\u5473 | \u6982\u8981 | | -- | -- | | 02 | length | \u547d\u4ee4\u306e\u9577\u3055 | | 01 | AD Type | \u547d\u4ee4\u306e\u30bf\u30a4\u30d7 | | 06 | flags | flags\u306e\u5024| \u3068\u3044\u3046\u69cb\u9020\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u6700\u5f8c\u306e0x06\u304cflags\u306b\u3042\u305f\u308b\u30020x06\u306f\u3001BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE\u3068 BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED\u306e\u8ad6\u7406\u548c\u306b\u3042\u305f\u308b\u3002 1 BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE (BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE | BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED) \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE\u3092flags\u3067\u306f\u4f7f\u3046\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067\u306f\u3001\u4e0b\u8a18\u306e\u901a\u308a\u5b9a\u7fa9\u3059\u308b\u3002 1 uint8_t flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; iBeacon\u306eManufacture Specific Bluetooth 4.0 Core Specification\u306e\u5b9a\u7fa9\u3067\u306f\u3001 iBeacon\u306eManufacture Specific\u306f 1 1A FF 4c 00 02 15 00 nn..nn nnnn nnnn nn \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 FF\u306f\u3001AD Type\u3067\u306f\u3001Manufacture Specific\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002Manufacture Specific\u3067\u306f\u3001\u7d9a\u304f2\u30d0\u30a4\u30c8\u3067\u3001Company\u8b58\u5225\u5b50\u3092\u5165\u308c\u308b\u30eb\u30fc\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u3002 Apple\u306eCompany\u8b58\u5225\u5b50\u3067\u306f\u30010x004C\u306a\u306e\u3067\u3001\u3053\u3053\u306b0x004C\u304c\u5165\u3063\u3066\u3044\u308b\u3002 \u4f01\u696d\u8b58\u5225\u5b50\u306e\u4e00\u89a7 https://www.bluetooth.org/ja-jp/specification/assigned-numbers/company-identifiers \u4f01\u696d\u8b58\u5225\u5b50\u3001\u5404 Bluetooth SIG \u30e1\u30f3\u30d0\u30fc\u4f01\u696d\u304c\u4e00\u3064\u7533\u8acb\u3059\u308b\u4e00\u610f\u306e\u6570\u5b57\u8b58\u5225\u5b50\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u7533\u8acb\u3059\u308b\u3068Bluetooth SIG \u306b\u3088\u3063\u3066\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u3002 \u305d\u306e\u3042\u3068\u306f\u3001Apple\u72ec\u81ea\u306e\u30d5\u30a9\u30de\u30fc\u30c3\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u5f93\u3046\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #define APP_BEACON_INFO_LENGTH 0x17 /**< Total length of information advertised by the Beacon. */ #define APP_ADV_DATA_LENGTH 0x15 /**< Length of manufacturer specific data in the advertisement. */ #define APP_DEVICE_TYPE 0x02 /**< 0x02 refers to Beacon. */ #define APP_MEASURED_RSSI 0xC3 /**< The Beacon's measured RSSI at 1 meter distance in dBm. */ #define APP_COMPANY_IDENTIFIER 0x002C /**< Company identifier for Nordic Semiconductor ASA. as per www.bluetooth.org. */ #define APP_MAJOR_VALUE 0x01, 0x02 /**< Major value used to identify Beacons. */ #define APP_MINOR_VALUE 0x03, 0x04 /**< Minor value used to identify Beacons. */ #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 /**< Proprietary UUID for Beacon. */ static uint8_t m_beacon_info [ APP_BEACON_INFO_LENGTH ] = /**< Information advertised by the Beacon. */ { APP_DEVICE_TYPE , // Manufacturer specific information. Specifies the device type in this // implementation. APP_ADV_DATA_LENGTH , // Manufacturer specific information. Specifies the length of the // manufacturer specific data in this implementation. APP_BEACON_UUID , // 128 bit UUID value. APP_MAJOR_VALUE , // Major arbitrary value that can be used to distinguish between Beacons. APP_MINOR_VALUE , // Minor arbitrary value that can be used to distinguish between Beacons. APP_MEASURED_RSSI // Manufacturer specific information. The Beacon's measured TX power in // this implementation. }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 uint32_t err_code ; ble_advdata_t advdata ; uint8_t flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; memset ( & advdata , 0 , sizeof ( advdata )); advdata . flags = flags ; advdata . p_manuf_specific_data = & manuf_specific_data ; err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); Name Advertising Data Encoder \u3067name_type\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3082\u8a2d\u5b9a\u3059\u308b\u3002 1 2 3 4 5 enum ble_advdata_name_type_t { BLE_ADVDATA_NO_NAME , BLE_ADVDATA_SHORT_NAME , BLE_ADVDATA_FULL_NAME } \u5b9a\u6570 \u610f\u5473\u3000 BLE_ADVDATA_NO_NAME \u30c7\u30d0\u30a4\u30b9\u540d\u3092\u5b9a\u7fa9\u3057\u306a\u3044\u3002AD Structure\u81ea\u4f53\u304c\u8ffd\u52a0\u3055\u308c\u306a\u3044 BLE_ADVDATA_SHORT_NAME AD Type 0x08\u306eAD Structure\u304c\u8ffd\u52a0\u3055\u308c\u308b BLE_ADVDATA_FULL_NAME AD Type 0x09\u306eAD Structure\u304c\u8ffd\u52a0\u3055\u308c\u308b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 uint32_t err_code ; ble_advdata_t advdata ; uint8_t flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; memset ( & advdata , 0 , sizeof ( advdata )); advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = flags ; advdata . p_manuf_specific_data = & manuf_specific_data ; err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code );","title":"Advertising Data"},{"location":"6.iBeacon/2.beaconadvdata/#advertising-data","text":"","title":"Advertising Data"},{"location":"6.iBeacon/2.beaconadvdata/#advertising-data_1","text":"Type \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 ADV_NONCONN_IND iBeacon\u306f\u3001ADV_NONCONN_IND\u3067\u30a2\u30c9\u30d0\u30fc\u30bf\u30a4\u30ba\u3055\u308c\u308b\u304c\u3001ADV_NONCONN_IND\u3067\u306f\u3001AdvA\u304c6\u30aa\u30af\u30c6\u30c3\u30c8\u3001AdvData\u304c0-31\u30aa\u30af\u30c6\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u308b\u3002","title":"Advertising Data \u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"6.iBeacon/2.beaconadvdata/#adva","text":"AdvA\u306f\u30016\u30aa\u30af\u30c6\u30c3\u30c8(48bit)\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002\u30c7\u30d0\u30a4\u30b9\u3092\u8b58\u5225\u3059\u308b\u305f\u3081\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u306a\u308b\u3002 AdvA\u306e\u30a2\u30c9\u30ec\u30b9\u306f\u3001PUD Header\u306eTxAdd, RxAdd\u306e\u8a18\u8ff0\u306b\u3088\u308a\u3001public\u3068random\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u5272\u308a\u632f\u3089\u308c\u308b\u3002 \u4ed5\u69d8 AdvA\u306e\u6319\u52d5 Public address IEEE Registration Authority\u306b\u3088\u308a\u767b\u9332\u3055\u308c\u305f\u30a2\u30c9\u30ec\u30b9\u300248 bit\u306e\u30a2\u30c9\u30ec\u30b9\u306f\u300124bit\u304cCompany ID (CID)\u3067\u300124bit\u304cMac Address\u3067\u69cb\u6210\u3002\u30c7\u30d0\u30a4\u30b9\u304c\u5b58\u5728\u3059\u308b\u9593\u306f\u540c\u3058\u5024\u3002 Random Static address \u96fb\u6e90\u304cOn\u306b\u306a\u3063\u305f\u969b\u306b\u5272\u308a\u632f\u3089\u308c\u308b\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3002Reboot\u304c\u304b\u304b\u308b\u3068\u9055\u3046\u5024\u306b\u3002 Private Non-Resolvable address identity resolving key (IRK)\u3068\u4e71\u6570\u306b\u3088\u308a\u751f\u6210\u3002\u63a5\u7d9a\u4e2d\u3082\u5024\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 Private Non-Resolvable address Random\u306a\u5024\u3092\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5272\u308a\u632f\u308b\u3002\u3042\u307e\u308a\u4e00\u822c\u7684\u3067\u306f\u306a\u3044\u3002 SoftDevice\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u5024\u306f\u3001 GAP Address Type \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 1 2 3 4 #define BLE_GAP_ADDR_TYPE_PUBLIC 0x00 #define BLE_GAP_ADDR_TYPE_RANDOM_STATIC 0x01 #define BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE 0x02 #define BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE 0x03 SoftDevice\u3067\u306f\u3001 sd_ble_gap_address_set \u3067\u3001\u53cd\u6620\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u4eca\u56de\u306eiBeacon\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4f7f\u7528\u3057\u306a\u3044\u3002","title":"AdvA"},{"location":"6.iBeacon/2.beaconadvdata/#advdata","text":"Advertising\u306eData\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u3001Core Bluetooth 4.0 Core Specification\u306b\u3088\u308a\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 Advertising\u306e\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u306f\u3001AD Structure\u3068\u3044\u3046\u69cb\u9020\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002AD Structure\u306f\u3001\u9577\u3055+AD Type + AD Data\u306e3\u8981\u7d20\u306b\u3088\u308a\u5b9a\u7fa9\u3055\u308c\u308b\u3002AD Type\u3067\u5b9a\u7fa9\u53ef\u80fd\u306a\u5024\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002 | \u5024 | AD Type | \u60c5\u5831| | -- | -- | | 0x01 | FLAGS | | | 0x02 |SERVICE | More 16-bit UUIDs available | | 0x03 | SERVICE | Complete list of 16-bit UUIDs available | | 0x04 | SERVICE | More 32-bit UUIDs available | | 0x05 | SERVICE | Complete list of 32-bit UUIDs available | | 0x06 | SERVICE | More 128-bit UUIDs available | | 0x07| SERVICE | Complete list of 128-bit UUIDs available | | 0x08 | LOCAL NAME | Shortened local name | | 0x09 | LOCAL NAME | Complete local name | | 0x0A | TX POWER LEVEL | 0xXX:-127 to +127dBm | | 0x0D | SIMPLE PAIRING OPTIONAL OOB TAGS | Class of device | | 0x0E | SIMPLE PAIRING OPTIONAL OOB TAGS | Simple Pairing Hash C | | 0x0F | SIMPLE PAIRING OPTIONAL OOB TAGS | Simple Pairing Randomizer R | | 0x10 | SECURITY MANAGER TK VALUE | SECURITY MANAGER TK VALUE | | 0x11 | SECURITY MANAGER OOB FLAGS | SECURITY MANAGER OOB FLAGS | | 0x12 | SLAVE CONNECTION INTERVAL RANGE | SLAVE CONNECTION INTERVAL RANGE | | 0x14 | SERVICE SOLICITATION | List of 16 bit Service UUIDs| | 0x15 | SERVICE SOLICITATION | List of 128 bit Service UUIDs| | 0x16 | SERVICE DATA | The first 2 octets contain the 16 bit Service UUID followed by additional service data| | 0xFF | Manufacture Specific | The first 2 octets contain the Company Identifier Code followed by additional manufacturer specific data | BLUETOOTH SPECIFICATION Version 4.0 [Vol 3] P401-P403\u304b\u3089\u629c\u7c8b iBeacon\u306eAdvertising\u306e\u30d1\u30b1\u30c3\u30c8\u306f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5024\u3068\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u3002","title":"AdvData"},{"location":"6.iBeacon/2.beaconadvdata/#ibeaconflags","text":"Proximity Beacon Specification Release R1 P6\u3088\u308a\u629c\u7c8b iBeacon\u3067\u306f 1 02 01 06 \u304b\u3089\u59cb\u307e\u308b\u3002 1 02 01 06 \u306f\u3001Flags\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002SoftDevice\u306f\u3001 S110 GAP Advertisement Flags \u306e\u5024\u304c\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u3002 S110 GAP Advertisement Flags \u3000\u3067\u306f\u3001\u4e0b\u8a18\u306e\u5024\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 \u5b9a\u6570 \u610f\u5473\u3000 BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED BR/EDR not supported. BLE_GAP_ADV_FLAG_LE_BR_EDR_CONTROLLER Simultaneous LE and BR/EDR, Controller. BLE_GAP_ADV_FLAG_LE_BR_EDR_HOST Simultaneous LE and BR/EDR, Host. BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE LE General Discoverable Mode. BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE LE Limited Discoverable Mode. BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE LE General Discoverable Mode, BR/EDR not supported. BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE LE Limited Discoverable Mode, BR/EDR not supported. 1 02 01 06 \u306f | \u5024 | \u610f\u5473 | \u6982\u8981 | | -- | -- | | 02 | length | \u547d\u4ee4\u306e\u9577\u3055 | | 01 | AD Type | \u547d\u4ee4\u306e\u30bf\u30a4\u30d7 | | 06 | flags | flags\u306e\u5024| \u3068\u3044\u3046\u69cb\u9020\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u6700\u5f8c\u306e0x06\u304cflags\u306b\u3042\u305f\u308b\u30020x06\u306f\u3001BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE\u3068 BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED\u306e\u8ad6\u7406\u548c\u306b\u3042\u305f\u308b\u3002 1 BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE (BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE | BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED) \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE\u3092flags\u3067\u306f\u4f7f\u3046\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067\u306f\u3001\u4e0b\u8a18\u306e\u901a\u308a\u5b9a\u7fa9\u3059\u308b\u3002 1 uint8_t flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ;","title":"iBeacon\u306eFLAGS"},{"location":"6.iBeacon/2.beaconadvdata/#ibeaconmanufacture-specific","text":"Bluetooth 4.0 Core Specification\u306e\u5b9a\u7fa9\u3067\u306f\u3001 iBeacon\u306eManufacture Specific\u306f 1 1A FF 4c 00 02 15 00 nn..nn nnnn nnnn nn \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 FF\u306f\u3001AD Type\u3067\u306f\u3001Manufacture Specific\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002Manufacture Specific\u3067\u306f\u3001\u7d9a\u304f2\u30d0\u30a4\u30c8\u3067\u3001Company\u8b58\u5225\u5b50\u3092\u5165\u308c\u308b\u30eb\u30fc\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u3002 Apple\u306eCompany\u8b58\u5225\u5b50\u3067\u306f\u30010x004C\u306a\u306e\u3067\u3001\u3053\u3053\u306b0x004C\u304c\u5165\u3063\u3066\u3044\u308b\u3002 \u4f01\u696d\u8b58\u5225\u5b50\u306e\u4e00\u89a7 https://www.bluetooth.org/ja-jp/specification/assigned-numbers/company-identifiers \u4f01\u696d\u8b58\u5225\u5b50\u3001\u5404 Bluetooth SIG \u30e1\u30f3\u30d0\u30fc\u4f01\u696d\u304c\u4e00\u3064\u7533\u8acb\u3059\u308b\u4e00\u610f\u306e\u6570\u5b57\u8b58\u5225\u5b50\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u7533\u8acb\u3059\u308b\u3068Bluetooth SIG \u306b\u3088\u3063\u3066\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u3002 \u305d\u306e\u3042\u3068\u306f\u3001Apple\u72ec\u81ea\u306e\u30d5\u30a9\u30de\u30fc\u30c3\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u5f93\u3046\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #define APP_BEACON_INFO_LENGTH 0x17 /**< Total length of information advertised by the Beacon. */ #define APP_ADV_DATA_LENGTH 0x15 /**< Length of manufacturer specific data in the advertisement. */ #define APP_DEVICE_TYPE 0x02 /**< 0x02 refers to Beacon. */ #define APP_MEASURED_RSSI 0xC3 /**< The Beacon's measured RSSI at 1 meter distance in dBm. */ #define APP_COMPANY_IDENTIFIER 0x002C /**< Company identifier for Nordic Semiconductor ASA. as per www.bluetooth.org. */ #define APP_MAJOR_VALUE 0x01, 0x02 /**< Major value used to identify Beacons. */ #define APP_MINOR_VALUE 0x03, 0x04 /**< Minor value used to identify Beacons. */ #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 /**< Proprietary UUID for Beacon. */ static uint8_t m_beacon_info [ APP_BEACON_INFO_LENGTH ] = /**< Information advertised by the Beacon. */ { APP_DEVICE_TYPE , // Manufacturer specific information. Specifies the device type in this // implementation. APP_ADV_DATA_LENGTH , // Manufacturer specific information. Specifies the length of the // manufacturer specific data in this implementation. APP_BEACON_UUID , // 128 bit UUID value. APP_MAJOR_VALUE , // Major arbitrary value that can be used to distinguish between Beacons. APP_MINOR_VALUE , // Minor arbitrary value that can be used to distinguish between Beacons. APP_MEASURED_RSSI // Manufacturer specific information. The Beacon's measured TX power in // this implementation. }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 uint32_t err_code ; ble_advdata_t advdata ; uint8_t flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; memset ( & advdata , 0 , sizeof ( advdata )); advdata . flags = flags ; advdata . p_manuf_specific_data = & manuf_specific_data ; err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code );","title":"iBeacon\u306eManufacture Specific"},{"location":"6.iBeacon/2.beaconadvdata/#name","text":"Advertising Data Encoder \u3067name_type\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3082\u8a2d\u5b9a\u3059\u308b\u3002 1 2 3 4 5 enum ble_advdata_name_type_t { BLE_ADVDATA_NO_NAME , BLE_ADVDATA_SHORT_NAME , BLE_ADVDATA_FULL_NAME } \u5b9a\u6570 \u610f\u5473\u3000 BLE_ADVDATA_NO_NAME \u30c7\u30d0\u30a4\u30b9\u540d\u3092\u5b9a\u7fa9\u3057\u306a\u3044\u3002AD Structure\u81ea\u4f53\u304c\u8ffd\u52a0\u3055\u308c\u306a\u3044 BLE_ADVDATA_SHORT_NAME AD Type 0x08\u306eAD Structure\u304c\u8ffd\u52a0\u3055\u308c\u308b BLE_ADVDATA_FULL_NAME AD Type 0x09\u306eAD Structure\u304c\u8ffd\u52a0\u3055\u308c\u308b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 uint32_t err_code ; ble_advdata_t advdata ; uint8_t flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; memset ( & advdata , 0 , sizeof ( advdata )); advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = flags ; advdata . p_manuf_specific_data = & manuf_specific_data ; err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code );","title":"Name"},{"location":"6.iBeacon/3.beaconadvparam/","text":"Advertising Parameter Bluetooth Low Energy\u306eLink Layer\u306e\u30d1\u30b1\u30c3\u30c8\u306f\u3001Preamble\u3001AccessAddress\u3001PDU\u3001CRC\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002 BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] P36\u3088\u308a Access Address AccessAddress\u306f4\u30aa\u30af\u30c6\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u3001Advertising\u6642\u306f\u30010x8E89BED6\u306e\u5024\u304c\u3082\u3061\u3089\u308c\u308b\u3002\u63a5\u7d9a\u6642\u306b\u306f\u3001\u305d\u308c\u305e\u308c\u500b\u5225\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u5272\u308a\u632f\u3089\u308c\u308b\u3002 1 0x8E89BED6 BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] P36\u306b\u8a18\u8f09 PDU PDU\u306f\u3001Header\u3068Payload\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002Payload\u306e\u9577\u3055\u3084\u66f8\u5f0f\u306f\u3001Header\u3067\u5b9a\u7fa9\u3055\u308c\u305fType\u306b\u3088\u308a\u5909\u5316\u3059\u308b\u3002 PDU Header\u306f\u300116\u30d3\u30c3\u30c8\u3057\u304b\u5272\u308a\u632f\u308a\u304c\u306a\u3044\u306e\u3067\u3001\u30d3\u30c3\u30c8\u5358\u4f4d\u3067\u69cb\u6210\u3055\u308c\u308b\u3002\u6700\u521d\u306e4\u30d3\u30c3\u30c8\u304cPDU Type\u304c\u5b9a\u7fa9\u3055\u308c\u308b\u3002 \u9818\u57df\u540d \u9577\u3055 \u610f\u5473 PDU Type 4bit PDU\u306e\u30bf\u30a4\u30d7\u3092\u5b9a\u7fa9 RFU 2bit \u73fe\u5728\u306f\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3002(\u672a\u5b9a\u7fa9\u306e\u9818\u57df) TxAdd 1bit AdvA, InitA, ScanA\u306a\u3069\u304cpublic\u306a\u5834\u54080\u3001random\u306e\u5834\u54081\u3002 PDU Type\u306b\u3088\u308a\u5b9a\u7fa9\u304c\u304b\u308f\u308b\u3002 RxAdd 1bit AdvA, InitA, ScanA\u306a\u3069\u304cpublic\u306a\u5834\u54080\u3001random\u306e\u5834\u54081\u3002PDU Type\u306b\u3088\u308a\u5b9a\u7fa9\u304c\u304b\u308f\u308b\u3002 Length 6bit PDU Type\u3084\u3001Payload\u306e\u4e2d\u8eab\u306b\u3088\u3063\u3066\u3082\u5909\u5316 RFU 2bit \u73fe\u5728\u306f\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3002(\u672a\u5b9a\u7fa9\u306e\u9818\u57df) Header\u306eType\u306f\u4e0b\u56f3\u306e\u5024\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3002 BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] P39\u306b\u8a18\u8f09\u3002 Advertising\u306b\u95a2\u9023\u3059\u308bPDU Type\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002 Type \u610f\u5473 ADV_IND \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306a\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30a4\u30d9\u30f3\u30c8(undirected) ADV_DIRECT_IND \u7279\u5b9a\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306a\u30a2\u30c9\u30d0\u30a4\u30bf\u30a4\u30ba\u30a4\u30d9\u30f3\u30c8(directed) ADV_NONCONN_IND \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u4e0d\u53ef\u80fd\u306a\u30a2\u30c9\u30d0\u30a4\u30bf\u30a4\u30ba\u30a4\u30d9\u30f3\u30c8(undirected) ADV_SCAN_IND \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30b9\u30ad\u30e3\u30f3\u53ef\u80fd\u306a\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30a4\u30d9\u30f3\u30c8(undirected) iBeacon\u3067\u306f\u3001ADV_NONCONN_IND\u3092\u4f7f\u7528\u3059\u308b\u3002\u307e\u305f\u3001PDU Type\u5225\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u4e0b\u8868\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 Type \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 ADV_IND TxAdd 0:AdvA public TxAdd 1:AdvA random ADV_DIRECT_IND TxAdd 0:AdvA public TxAdd 1:AdvA random RxAdd 0:InitA public RxAdd 1:InitA random ADV_NONCONN_IND TxAdd 0:AdvA public TxAdd 1:AdvA random SCAN_REQ TxAdd 0:ScanA public TxAdd 1:ScanA random RxAdd 0:AdvA public RxAdd 1:AdvA random SCAN_RSP TxAdd 0:AdvA public TxAdd 1:AdvA random CONNECT_REQ TxAdd 0:InitA public TxAdd 1:InitA random RxAdd 0:AdvA public RxAdd 1:AdvA random ADV_SCAN_IND TxAdd 0:AdvA public TxAdd 1:AdvA random BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] P39-P41\u3088\u308a\u629c\u7c8b 1 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) /**< The advertising interval for non-connectable advertisement (100 ms). This value can vary between 100ms to 10.24s). */ 1 2 3 4 5 6 7 ble_gap_adv_params_t m_adv_params ; memset ( & m_adv_params , 0 , sizeof ( m_adv_params )); m_adv_params . type = BLE_GAP_ADV_TYPE_ADV_NONCONN_IND ; // ADV_NONCONN_IND m_adv_params . p_peer_addr = NULL ; // \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306b m_adv_params . fp = BLE_GAP_ADV_FP_ANY ; // \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306b m_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; // \u767a\u4fe1\u5468\u671f m_adv_params . timeout = 0 ;","title":"Advertising Parameter"},{"location":"6.iBeacon/3.beaconadvparam/#advertising-parameter","text":"Bluetooth Low Energy\u306eLink Layer\u306e\u30d1\u30b1\u30c3\u30c8\u306f\u3001Preamble\u3001AccessAddress\u3001PDU\u3001CRC\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002 BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] P36\u3088\u308a","title":"Advertising Parameter"},{"location":"6.iBeacon/3.beaconadvparam/#access-address","text":"AccessAddress\u306f4\u30aa\u30af\u30c6\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u3001Advertising\u6642\u306f\u30010x8E89BED6\u306e\u5024\u304c\u3082\u3061\u3089\u308c\u308b\u3002\u63a5\u7d9a\u6642\u306b\u306f\u3001\u305d\u308c\u305e\u308c\u500b\u5225\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u5272\u308a\u632f\u3089\u308c\u308b\u3002 1 0x8E89BED6 BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] P36\u306b\u8a18\u8f09","title":"Access Address"},{"location":"6.iBeacon/3.beaconadvparam/#pdu","text":"PDU\u306f\u3001Header\u3068Payload\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002Payload\u306e\u9577\u3055\u3084\u66f8\u5f0f\u306f\u3001Header\u3067\u5b9a\u7fa9\u3055\u308c\u305fType\u306b\u3088\u308a\u5909\u5316\u3059\u308b\u3002 PDU Header\u306f\u300116\u30d3\u30c3\u30c8\u3057\u304b\u5272\u308a\u632f\u308a\u304c\u306a\u3044\u306e\u3067\u3001\u30d3\u30c3\u30c8\u5358\u4f4d\u3067\u69cb\u6210\u3055\u308c\u308b\u3002\u6700\u521d\u306e4\u30d3\u30c3\u30c8\u304cPDU Type\u304c\u5b9a\u7fa9\u3055\u308c\u308b\u3002 \u9818\u57df\u540d \u9577\u3055 \u610f\u5473 PDU Type 4bit PDU\u306e\u30bf\u30a4\u30d7\u3092\u5b9a\u7fa9 RFU 2bit \u73fe\u5728\u306f\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3002(\u672a\u5b9a\u7fa9\u306e\u9818\u57df) TxAdd 1bit AdvA, InitA, ScanA\u306a\u3069\u304cpublic\u306a\u5834\u54080\u3001random\u306e\u5834\u54081\u3002 PDU Type\u306b\u3088\u308a\u5b9a\u7fa9\u304c\u304b\u308f\u308b\u3002 RxAdd 1bit AdvA, InitA, ScanA\u306a\u3069\u304cpublic\u306a\u5834\u54080\u3001random\u306e\u5834\u54081\u3002PDU Type\u306b\u3088\u308a\u5b9a\u7fa9\u304c\u304b\u308f\u308b\u3002 Length 6bit PDU Type\u3084\u3001Payload\u306e\u4e2d\u8eab\u306b\u3088\u3063\u3066\u3082\u5909\u5316 RFU 2bit \u73fe\u5728\u306f\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3002(\u672a\u5b9a\u7fa9\u306e\u9818\u57df) Header\u306eType\u306f\u4e0b\u56f3\u306e\u5024\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3002 BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] P39\u306b\u8a18\u8f09\u3002 Advertising\u306b\u95a2\u9023\u3059\u308bPDU Type\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002 Type \u610f\u5473 ADV_IND \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306a\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30a4\u30d9\u30f3\u30c8(undirected) ADV_DIRECT_IND \u7279\u5b9a\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306a\u30a2\u30c9\u30d0\u30a4\u30bf\u30a4\u30ba\u30a4\u30d9\u30f3\u30c8(directed) ADV_NONCONN_IND \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u4e0d\u53ef\u80fd\u306a\u30a2\u30c9\u30d0\u30a4\u30bf\u30a4\u30ba\u30a4\u30d9\u30f3\u30c8(undirected) ADV_SCAN_IND \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30b9\u30ad\u30e3\u30f3\u53ef\u80fd\u306a\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u30a4\u30d9\u30f3\u30c8(undirected) iBeacon\u3067\u306f\u3001ADV_NONCONN_IND\u3092\u4f7f\u7528\u3059\u308b\u3002\u307e\u305f\u3001PDU Type\u5225\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u4e0b\u8868\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002 Type \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 ADV_IND TxAdd 0:AdvA public TxAdd 1:AdvA random ADV_DIRECT_IND TxAdd 0:AdvA public TxAdd 1:AdvA random RxAdd 0:InitA public RxAdd 1:InitA random ADV_NONCONN_IND TxAdd 0:AdvA public TxAdd 1:AdvA random SCAN_REQ TxAdd 0:ScanA public TxAdd 1:ScanA random RxAdd 0:AdvA public RxAdd 1:AdvA random SCAN_RSP TxAdd 0:AdvA public TxAdd 1:AdvA random CONNECT_REQ TxAdd 0:InitA public TxAdd 1:InitA random RxAdd 0:AdvA public RxAdd 1:AdvA random ADV_SCAN_IND TxAdd 0:AdvA public TxAdd 1:AdvA random BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] P39-P41\u3088\u308a\u629c\u7c8b 1 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) /**< The advertising interval for non-connectable advertisement (100 ms). This value can vary between 100ms to 10.24s). */ 1 2 3 4 5 6 7 ble_gap_adv_params_t m_adv_params ; memset ( & m_adv_params , 0 , sizeof ( m_adv_params )); m_adv_params . type = BLE_GAP_ADV_TYPE_ADV_NONCONN_IND ; // ADV_NONCONN_IND m_adv_params . p_peer_addr = NULL ; // \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306b m_adv_params . fp = BLE_GAP_ADV_FP_ANY ; // \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306b m_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; // \u767a\u4fe1\u5468\u671f m_adv_params . timeout = 0 ;","title":"PDU"},{"location":"6.iBeacon/4.beaconsample/","text":"Sample \u4e8b\u524d\u6e96\u5099 Debug Logger \u3068 Common application error handler \u3092\u4e8b\u524d\u306b\u7d44\u307f\u8fbc\u3080\u3002 SourceCode main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include <stdbool.h> #include <string.h> #include \"app_trace.h\" #include \"app_error.h\" #include \"softdevice_handler.h\" #include \"ble_conn_params.h\" #include \"custom_board.h\" #include \"ble_advdata.h\" #include \"ble.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" // \u30b5\u30fc\u30d3\u30b9\u304c\u5909\u66f4\u3055\u308c\u306a\u3044\u306a\u30890 #define IS_SRVC_CHANGED_CHARACT_PRESENT 0 #define APP_COMPANY_IDENTIFIER 0x002C // Apple #define APP_BEACON_INFO_LENGTH 0x17 // Beacon\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055 #define APP_BEACON_TYPE 0x02, 0x15 // Beacon\u306e\u30bf\u30a4\u30d7 #define APP_MAJOR_VALUE 0x01, 0x02 // iBeacon\u306eMajor #define APP_MINOR_VALUE 0x03, 0x04 // iBeacon\u306eMinor #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 // iBeacon\u306eUUID #define APP_MEASURED_RSSI 0xC3 // RSSI\u51fa\u529b\u306e\u8a08\u6e2c\u5024 static uint8_t m_beacon_info [ APP_BEACON_INFO_LENGTH ] = // iBeacon\u306eAdvertising Data { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) /**< The advertising interval for non-connectable advertisement (100 ms). This value can vary between 100ms to 10.24s). */ /** * @brief \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9.APP_ERROR_CHECK\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u547c\u3070\u308c\u308b. */ void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } /** * @brief \u95a2\u9023\u3059\u308bModule\u7fa4\u306b\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u95a2\u6570. * * @details \u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3042\u3068\u306b\u3001\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] sys_evt \u30b7\u30b9\u30c6\u30e0\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8 */ static void sys_evt_dispatch ( uint32_t sys_evt ) { } /** * @brief BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306eModule\u7fa4\u306bBLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u305f\u3081\u306e\u95a2\u6570. * * @details BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u4fe1\u3057\u305f\u3042\u3068\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] p_ble_evt Bluetooth\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for the Power manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } int main () { uint32_t err_code ; // Denug logger\u306e\u521d\u671f\u5316. app_trace_init (); SOFTDEVICE_HANDLER_INIT ( NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION , NULL ); // BLE\u30b9\u30bf\u30c3\u30af\u3092\u6709\u52b9\u306b\u3059\u308b. ble_enable_params_t ble_enable_params ; memset ( & ble_enable_params , 0 , sizeof ( ble_enable_params )); ble_enable_params . gatts_enable_params . service_changed = IS_SRVC_CHANGED_CHARACT_PRESENT ; err_code = sd_ble_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u7fa4\u306e\u305f\u3081\u306eSoftDevice\u30cf\u30f3\u30c9\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332. err_code = softdevice_sys_evt_handler_set ( sys_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // AdvData\u306eManufacture Specific\u306e\u9818\u57df\u306e\u5024\u306e\u5b9a\u7fa9. ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; // AdvData\u3092\u69cb\u7bc9 ble_advdata_t advdata ; memset ( & advdata , 0 , sizeof ( advdata )); advdata . name_type = BLE_ADVDATA_NO_NAME ; uint8_t flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . flags = flags ; advdata . p_manuf_specific_data = & manuf_specific_data ; // AdvData\u3092\u767b\u9332. err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); // Advertising\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u8a2d\u5b9a ble_gap_adv_params_t m_adv_params ; memset ( & m_adv_params , 0 , sizeof ( m_adv_params )); m_adv_params . type = BLE_GAP_ADV_TYPE_ADV_NONCONN_IND ; // ADV_NONCONN_IND m_adv_params . p_peer_addr = NULL ; // \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306b m_adv_params . fp = BLE_GAP_ADV_FP_ANY ; // \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306b m_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; // \u767a\u4fe1\u5468\u671f m_adv_params . timeout = 0 ; // Advertising\u3092\u958b\u59cb err_code = sd_ble_gap_adv_start ( & m_adv_params ); APP_ERROR_CHECK ( err_code ); while ( true ){ power_manage (); } } custom_board.h 1 2 3 4 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define RTS_PIN_NUMBER 100 #define CTS_PIN_NUMBER 100 Option\u306e\u8a2d\u5b9a Define: 1 DEBUG BOARD_CUSTOM ENABLE_DEBUG_LOG_SUPPORT BLE_STACK_SUPPORT_REQD \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8ffd\u52a0 |nRF_SoftDevice | | -- | -- | | | | Board Support | CMSIS | Device| | -- | -- | | | | | | BLE Modules | nRF_Devices | nRF_Libraries| | -- | -- | | | | |","title":"Sample"},{"location":"6.iBeacon/4.beaconsample/#sample","text":"","title":"Sample"},{"location":"6.iBeacon/4.beaconsample/#_1","text":"Debug Logger \u3068 Common application error handler \u3092\u4e8b\u524d\u306b\u7d44\u307f\u8fbc\u3080\u3002","title":"\u4e8b\u524d\u6e96\u5099"},{"location":"6.iBeacon/4.beaconsample/#sourcecode","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include <stdbool.h> #include <string.h> #include \"app_trace.h\" #include \"app_error.h\" #include \"softdevice_handler.h\" #include \"ble_conn_params.h\" #include \"custom_board.h\" #include \"ble_advdata.h\" #include \"ble.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" // \u30b5\u30fc\u30d3\u30b9\u304c\u5909\u66f4\u3055\u308c\u306a\u3044\u306a\u30890 #define IS_SRVC_CHANGED_CHARACT_PRESENT 0 #define APP_COMPANY_IDENTIFIER 0x002C // Apple #define APP_BEACON_INFO_LENGTH 0x17 // Beacon\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055 #define APP_BEACON_TYPE 0x02, 0x15 // Beacon\u306e\u30bf\u30a4\u30d7 #define APP_MAJOR_VALUE 0x01, 0x02 // iBeacon\u306eMajor #define APP_MINOR_VALUE 0x03, 0x04 // iBeacon\u306eMinor #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 // iBeacon\u306eUUID #define APP_MEASURED_RSSI 0xC3 // RSSI\u51fa\u529b\u306e\u8a08\u6e2c\u5024 static uint8_t m_beacon_info [ APP_BEACON_INFO_LENGTH ] = // iBeacon\u306eAdvertising Data { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) /**< The advertising interval for non-connectable advertisement (100 ms). This value can vary between 100ms to 10.24s). */ /** * @brief \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9.APP_ERROR_CHECK\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u547c\u3070\u308c\u308b. */ void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } /** * @brief \u95a2\u9023\u3059\u308bModule\u7fa4\u306b\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u95a2\u6570. * * @details \u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3042\u3068\u306b\u3001\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] sys_evt \u30b7\u30b9\u30c6\u30e0\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8 */ static void sys_evt_dispatch ( uint32_t sys_evt ) { } /** * @brief BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306eModule\u7fa4\u306bBLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u305f\u3081\u306e\u95a2\u6570. * * @details BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u4fe1\u3057\u305f\u3042\u3068\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] p_ble_evt Bluetooth\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for the Power manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } int main () { uint32_t err_code ; // Denug logger\u306e\u521d\u671f\u5316. app_trace_init (); SOFTDEVICE_HANDLER_INIT ( NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION , NULL ); // BLE\u30b9\u30bf\u30c3\u30af\u3092\u6709\u52b9\u306b\u3059\u308b. ble_enable_params_t ble_enable_params ; memset ( & ble_enable_params , 0 , sizeof ( ble_enable_params )); ble_enable_params . gatts_enable_params . service_changed = IS_SRVC_CHANGED_CHARACT_PRESENT ; err_code = sd_ble_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u7fa4\u306e\u305f\u3081\u306eSoftDevice\u30cf\u30f3\u30c9\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332. err_code = softdevice_sys_evt_handler_set ( sys_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // AdvData\u306eManufacture Specific\u306e\u9818\u57df\u306e\u5024\u306e\u5b9a\u7fa9. ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; // AdvData\u3092\u69cb\u7bc9 ble_advdata_t advdata ; memset ( & advdata , 0 , sizeof ( advdata )); advdata . name_type = BLE_ADVDATA_NO_NAME ; uint8_t flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . flags = flags ; advdata . p_manuf_specific_data = & manuf_specific_data ; // AdvData\u3092\u767b\u9332. err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); // Advertising\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u8a2d\u5b9a ble_gap_adv_params_t m_adv_params ; memset ( & m_adv_params , 0 , sizeof ( m_adv_params )); m_adv_params . type = BLE_GAP_ADV_TYPE_ADV_NONCONN_IND ; // ADV_NONCONN_IND m_adv_params . p_peer_addr = NULL ; // \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306b m_adv_params . fp = BLE_GAP_ADV_FP_ANY ; // \u4e0d\u7279\u5b9a\u591a\u6570\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u63a5\u7d9a\u53ef\u80fd\u306b m_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; // \u767a\u4fe1\u5468\u671f m_adv_params . timeout = 0 ; // Advertising\u3092\u958b\u59cb err_code = sd_ble_gap_adv_start ( & m_adv_params ); APP_ERROR_CHECK ( err_code ); while ( true ){ power_manage (); } } custom_board.h 1 2 3 4 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define RTS_PIN_NUMBER 100 #define CTS_PIN_NUMBER 100","title":"SourceCode"},{"location":"6.iBeacon/4.beaconsample/#option","text":"Define: 1 DEBUG BOARD_CUSTOM ENABLE_DEBUG_LOG_SUPPORT BLE_STACK_SUPPORT_REQD","title":"Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/4.beaconsample/#_2","text":"|nRF_SoftDevice | | -- | -- | | | | Board Support | CMSIS | Device| | -- | -- | | | | | | BLE Modules | nRF_Devices | nRF_Libraries| | -- | -- | | | | |","title":"\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8ffd\u52a0"},{"location":"6.iBeacon/5.template/","text":"BLE Peripheral template\u306e\u30b3\u30d4\u30fc \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30b3\u30d4\u30fc\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u8cbc\u308a\u4ed8\u3051\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092ble_app_mybeacon\u306b\u30ea\u30cd\u30fc\u30e0 Keil\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30aa\u30fc\u30d7\u30f3 SoftDevice\u306e\u524a\u9664 Keil\u306e\u8a2d\u5b9a","title":"BLE Peripheral template\u306e\u30b3\u30d4\u30fc"},{"location":"6.iBeacon/5.template/#ble-peripheral-template","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30b3\u30d4\u30fc\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u8cbc\u308a\u4ed8\u3051\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092ble_app_mybeacon\u306b\u30ea\u30cd\u30fc\u30e0 Keil\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30aa\u30fc\u30d7\u30f3","title":"BLE Peripheral template\u306e\u30b3\u30d4\u30fc"},{"location":"6.iBeacon/5.template/#softdevice","text":"","title":"SoftDevice\u306e\u524a\u9664"},{"location":"6.iBeacon/5.template/#keil","text":"","title":"Keil\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/6.led/","text":"LED\u306e\u70b9\u706f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for application main entry. */ int main ( void ) { bsp_board_leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */","title":"LED\u306e\u70b9\u706f"},{"location":"6.iBeacon/6.led/#led","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for application main entry. */ int main ( void ) { bsp_board_leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */","title":"LED\u306e\u70b9\u706f"},{"location":"6.iBeacon/7_log/","text":"LED\u306e\u70b9\u706f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for application main entry. */ int main ( void ) { bsp_board_leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */","title":"LED\u306e\u70b9\u706f"},{"location":"6.iBeacon/7_log/#led","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for application main entry. */ int main ( void ) { bsp_board_leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */","title":"LED\u306e\u70b9\u706f"},{"location":"6.iBeacon/8_log/","text":"Log\u306e\u51fa\u529b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <stdbool.h> #include <stdint.h> #include <string.h> #include \"nrf.h\" #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); NRF_LOG_INFO ( \"TEST \\r\\n \" ); NRF_LOG_FLUSH (); leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */ sdk_config.h\u306e\u5909\u66f4 Tera Term\u306e\u8d77\u52d5\u3068\u8a2d\u5b9a","title":"Log\u306e\u51fa\u529b"},{"location":"6.iBeacon/8_log/#log","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <stdbool.h> #include <stdint.h> #include <string.h> #include \"nrf.h\" #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); NRF_LOG_INFO ( \"TEST \\r\\n \" ); NRF_LOG_FLUSH (); leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */","title":"Log\u306e\u51fa\u529b"},{"location":"6.iBeacon/8_log/#sdk_configh","text":"","title":"sdk_config.h\u306e\u5909\u66f4"},{"location":"6.iBeacon/8_log/#tera-term","text":"","title":"Tera Term\u306e\u8d77\u52d5\u3068\u8a2d\u5b9a"},{"location":"6.iBeacon/9.error/","text":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9 Error Handler\u306e\u5b9f\u88c5\u3068\u30c6\u30b9\u30c8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Error handler */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); NRF_LOG_INFO ( \"TEST \\r\\n \" ); NRF_LOG_FLUSH (); // Test of error APP_ERROR_CHECK ( 1 ); leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */ Error Handler\u304c\u547c\u3070\u308c\u305f\u3089SystemReset app_error_fault_handler\u304c\u547c\u3070\u308c\u305f\u3089\u3001NVIC_SystemReset()\u3067\u30b7\u30b9\u30c6\u30e0\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3002 \u307e\u305f\u3001err_code = NRF_LOG_INIT(NULL);\u306eerr_code\u3092APP_ERROR_CHECK\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Error handler */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"TEST \\r\\n \" ); NRF_LOG_FLUSH (); // Test of error APP_ERROR_CHECK ( 1 ); leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9"},{"location":"6.iBeacon/9.error/#_1","text":"","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9"},{"location":"6.iBeacon/9.error/#error-handler","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Error handler */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); NRF_LOG_INFO ( \"TEST \\r\\n \" ); NRF_LOG_FLUSH (); // Test of error APP_ERROR_CHECK ( 1 ); leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */","title":"Error Handler\u306e\u5b9f\u88c5\u3068\u30c6\u30b9\u30c8"},{"location":"6.iBeacon/9.error/#error-handlersystemreset","text":"app_error_fault_handler\u304c\u547c\u3070\u308c\u305f\u3089\u3001NVIC_SystemReset()\u3067\u30b7\u30b9\u30c6\u30e0\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3002 \u307e\u305f\u3001err_code = NRF_LOG_INIT(NULL);\u306eerr_code\u3092APP_ERROR_CHECK\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Error handler */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"TEST \\r\\n \" ); NRF_LOG_FLUSH (); // Test of error APP_ERROR_CHECK ( 1 ); leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); } /** * @} */","title":"Error Handler\u304c\u547c\u3070\u308c\u305f\u3089SystemReset"},{"location":"6.iBeacon/a.softdevice/","text":"SoftDevice\u306e\u713c\u304d\u8fbc\u307f nRFGO\u3092\u8d77\u52d5\u3057\u3066\u3001SoftDevice 132\u3092\u713c\u304d\u8fbc\u307f\u307e\u3059\u3002 \u713c\u304d\u8fbc\u307f\u30e1\u30e2\u30ea\u9818\u57df\u306e\u5909\u66f4 SoftDevice\u3092\u713c\u304d\u8fbc\u3093\u3060\u306e\u3067\u3001Firmware\u306e\u713c\u304d\u8fbc\u307f\u958b\u59cb\u4f4d\u7f6e\u30920x1f000 \u306b\u5909\u66f4\u3057\u307e\u3059\u3002","title":"SoftDevice\u306e\u713c\u304d\u8fbc\u307f"},{"location":"6.iBeacon/a.softdevice/#softdevice","text":"nRFGO\u3092\u8d77\u52d5\u3057\u3066\u3001SoftDevice 132\u3092\u713c\u304d\u8fbc\u307f\u307e\u3059\u3002","title":"SoftDevice\u306e\u713c\u304d\u8fbc\u307f"},{"location":"6.iBeacon/a.softdevice/#_1","text":"SoftDevice\u3092\u713c\u304d\u8fbc\u3093\u3060\u306e\u3067\u3001Firmware\u306e\u713c\u304d\u8fbc\u307f\u958b\u59cb\u4f4d\u7f6e\u30920x1f000 \u306b\u5909\u66f4\u3057\u307e\u3059\u3002","title":"\u713c\u304d\u8fbc\u307f\u30e1\u30e2\u30ea\u9818\u57df\u306e\u5909\u66f4"},{"location":"6.iBeacon/b.power/","text":"PowerManage \u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Error handler */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for the Power Manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"TEST \\r\\n \" ); NRF_LOG_FLUSH (); // Test of error APP_ERROR_CHECK ( 1 ); leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); // Enter main loop. for (;;) { if ( NRF_LOG_PROCESS () == false ) { power_manage (); } } } /** * @} */","title":"PowerManage"},{"location":"6.iBeacon/b.power/#powermanage","text":"\u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 /**@brief Error handler */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for the Power Manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"TEST \\r\\n \" ); NRF_LOG_FLUSH (); // Test of error APP_ERROR_CHECK ( 1 ); leds_init (); bsp_board_led_on ( LED1 ); bsp_board_led_on ( LED2 ); bsp_board_led_on ( LED3 ); bsp_board_led_on ( LED4 ); // Enter main loop. for (;;) { if ( NRF_LOG_PROCESS () == false ) { power_manage (); } } } /** * @} */","title":"PowerManage"},{"location":"6.iBeacon/board/","text":"Board \u958b\u767a\u30dc\u30fc\u30c9 \u540d\u79f0 \u958b\u767a\u30dc\u30fc\u30c9\u578b\u756a \u30dc\u30fc\u30c9\u60c5\u5831 \u5199\u771f PCA10001 DevZone NRF51 DK PCA10028 DevZone NRF52 Preview DK PCA10036 DevZone Option\u306eC/C++\u3067\u306e\u8a2d\u5b9a \u540d\u79f0 \u958b\u767a\u30dc\u30fc\u30c9\u578b\u756a \u30dc\u30fc\u30c9\u60c5\u5831 PCA10001 CUSTOM_PCA10001 NRF51 DK PCA10028 CUSTOM_PCA10028 NRF52 Preview DK PCA10036 CUSTOM_PCA10036","title":"Board"},{"location":"6.iBeacon/board/#board","text":"","title":"Board"},{"location":"6.iBeacon/board/#_1","text":"\u540d\u79f0 \u958b\u767a\u30dc\u30fc\u30c9\u578b\u756a \u30dc\u30fc\u30c9\u60c5\u5831 \u5199\u771f PCA10001 DevZone NRF51 DK PCA10028 DevZone NRF52 Preview DK PCA10036 DevZone","title":"\u958b\u767a\u30dc\u30fc\u30c9"},{"location":"6.iBeacon/board/#optioncc","text":"\u540d\u79f0 \u958b\u767a\u30dc\u30fc\u30c9\u578b\u756a \u30dc\u30fc\u30c9\u60c5\u5831 PCA10001 CUSTOM_PCA10001 NRF51 DK PCA10028 CUSTOM_PCA10028 NRF52 Preview DK PCA10036 CUSTOM_PCA10036","title":"Option\u306eC/C++\u3067\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/c.init_ble/","text":"BLE\u306eInit iBeacon\u3092\u306f\u5fc3\u3059\u308b\u305f\u3081\u306bBLE Stack\u306eInit\u51e6\u7406\u3092\u304a\u3053\u306a\u3044\u307e\u3059\u3002 Inclued\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0 1 2 3 4 5 6 7 8 9 10 11 #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #include \"ble.h\" #include \"ble_hci.h\" #include \"ble_srv_common.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" #include \"ble_lbs.h\" #include \"ble_gap.h\" #include \"softdevice_handler.h\" Define\u306e\u8ffd\u52a0 1 2 #define CENTRAL_LINK_COUNT 0 #define PERIPHERAL_LINK_COUNT 1 BLE Stack\u306e\u3000Init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /**@brief Function for initializing the BLE stack. */ static void ble_stack_init ( void ) { uint32_t err_code ; nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC ; SOFTDEVICE_HANDLER_INIT ( & clock_lf_cfg , NULL ); ble_enable_params_t ble_enable_params ; err_code = softdevice_enable_get_default_config ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT , & ble_enable_params ); APP_ERROR_CHECK ( err_code ); CHECK_RAM_START_ADDR ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT ); err_code = softdevice_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); bsp_board_led_on ( LED1 ); } SOFTDEVICE_HANDLER_INIT Macro\u306e\u4e2d\u8eab\u3002\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f\u7b49\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u308b\u3002\u5185\u90e8\u767a\u632f\u4f7f\u7528\u306e\u5834\u5408\u306f\u3001\u7cbe\u5ea6\u306f250ppm\u3002 1 2 3 4 5 6 7 8 9 10 do { static uint32_t BLE_EVT_BUFFER [ CEIL_DIV ( BLE_STACK_EVT_MSG_BUF_SIZE , sizeof ( uint32_t ))]; uint32_t ERR_CODE ; ERR_CODE = softdevice_handler_init (( CLOCK_SOURCE ), BLE_EVT_BUFFER , sizeof ( BLE_EVT_BUFFER ), EVT_HANDLER ); APP_ERROR_CHECK ( ERR_CODE ); } while ( 0 ) softdevice_enable_get_default_config Central, Peripheral\u306e\u63a5\u7d9a\u6570\u3092\u6307\u5b9a\u3057\u3066\u3001Default\u306econfig\u3092\u751f\u6210 CHECK_RAM_START_ADDR Macro\u3002RAM\u8981\u4ef6\u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u30c1\u30a7\u30c3\u30af\u3002 softdevice_enable SoftDevice\u3092Enable\u306b\u3059\u308b\u3002 softdevice_ble_evt_handler_set BLE\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u8a2d\u5b9a\u3059\u308b\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #include \"ble.h\" #include \"ble_hci.h\" #include \"ble_srv_common.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" #include \"ble_lbs.h\" #include \"ble_gap.h\" #include \"softdevice_handler.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 #define CENTRAL_LINK_COUNT 0 #define PERIPHERAL_LINK_COUNT 1 /**@brief Error */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for the Power Manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /**@brief Function for dispatching a BLE stack event. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for initializing the BLE stack. */ static void ble_stack_init ( void ) { // SoftDevice\u306e\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f\u7b49\u306e\u8a2d\u5b9a uint32_t err_code ; nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC ; SOFTDEVICE_HANDLER_INIT ( & clock_lf_cfg , NULL ); // Default\u306eConfig\u3092\u53d6\u5f97 ble_enable_params_t ble_enable_params ; err_code = softdevice_enable_get_default_config ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT , & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // RAM\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af CHECK_RAM_START_ADDR ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT ); // BLE Stack\u3092Enable\u306b err_code = softdevice_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // Event\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332 err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // Init\u5b8c\u4e86\u6642\u306bLED1\u3092\u70b9\u706f\u3055\u305b\u308b\u3002 bsp_board_led_on ( LED1 ); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); leds_init (); ble_stack_init (); // Enter main loop. for (;;) { if ( NRF_LOG_PROCESS () == false ) { power_manage (); } } } /** * @} */","title":"BLE\u306eInit"},{"location":"6.iBeacon/c.init_ble/#bleinit","text":"iBeacon\u3092\u306f\u5fc3\u3059\u308b\u305f\u3081\u306bBLE Stack\u306eInit\u51e6\u7406\u3092\u304a\u3053\u306a\u3044\u307e\u3059\u3002","title":"BLE\u306eInit"},{"location":"6.iBeacon/c.init_ble/#inclued","text":"1 2 3 4 5 6 7 8 9 10 11 #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #include \"ble.h\" #include \"ble_hci.h\" #include \"ble_srv_common.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" #include \"ble_lbs.h\" #include \"ble_gap.h\" #include \"softdevice_handler.h\"","title":"Inclued\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0"},{"location":"6.iBeacon/c.init_ble/#define","text":"1 2 #define CENTRAL_LINK_COUNT 0 #define PERIPHERAL_LINK_COUNT 1","title":"Define\u306e\u8ffd\u52a0"},{"location":"6.iBeacon/c.init_ble/#ble-stack-init","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /**@brief Function for initializing the BLE stack. */ static void ble_stack_init ( void ) { uint32_t err_code ; nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC ; SOFTDEVICE_HANDLER_INIT ( & clock_lf_cfg , NULL ); ble_enable_params_t ble_enable_params ; err_code = softdevice_enable_get_default_config ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT , & ble_enable_params ); APP_ERROR_CHECK ( err_code ); CHECK_RAM_START_ADDR ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT ); err_code = softdevice_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); bsp_board_led_on ( LED1 ); } SOFTDEVICE_HANDLER_INIT Macro\u306e\u4e2d\u8eab\u3002\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f\u7b49\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u308b\u3002\u5185\u90e8\u767a\u632f\u4f7f\u7528\u306e\u5834\u5408\u306f\u3001\u7cbe\u5ea6\u306f250ppm\u3002 1 2 3 4 5 6 7 8 9 10 do { static uint32_t BLE_EVT_BUFFER [ CEIL_DIV ( BLE_STACK_EVT_MSG_BUF_SIZE , sizeof ( uint32_t ))]; uint32_t ERR_CODE ; ERR_CODE = softdevice_handler_init (( CLOCK_SOURCE ), BLE_EVT_BUFFER , sizeof ( BLE_EVT_BUFFER ), EVT_HANDLER ); APP_ERROR_CHECK ( ERR_CODE ); } while ( 0 ) softdevice_enable_get_default_config Central, Peripheral\u306e\u63a5\u7d9a\u6570\u3092\u6307\u5b9a\u3057\u3066\u3001Default\u306econfig\u3092\u751f\u6210 CHECK_RAM_START_ADDR Macro\u3002RAM\u8981\u4ef6\u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u30c1\u30a7\u30c3\u30af\u3002 softdevice_enable SoftDevice\u3092Enable\u306b\u3059\u308b\u3002 softdevice_ble_evt_handler_set BLE\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u8a2d\u5b9a\u3059\u308b\u3002","title":"BLE Stack\u306e\u3000Init"},{"location":"6.iBeacon/c.init_ble/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #include \"ble.h\" #include \"ble_hci.h\" #include \"ble_srv_common.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" #include \"ble_lbs.h\" #include \"ble_gap.h\" #include \"softdevice_handler.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 #define CENTRAL_LINK_COUNT 0 #define PERIPHERAL_LINK_COUNT 1 /**@brief Error */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for the Power Manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /**@brief Function for dispatching a BLE stack event. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for initializing the BLE stack. */ static void ble_stack_init ( void ) { // SoftDevice\u306e\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f\u7b49\u306e\u8a2d\u5b9a uint32_t err_code ; nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC ; SOFTDEVICE_HANDLER_INIT ( & clock_lf_cfg , NULL ); // Default\u306eConfig\u3092\u53d6\u5f97 ble_enable_params_t ble_enable_params ; err_code = softdevice_enable_get_default_config ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT , & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // RAM\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af CHECK_RAM_START_ADDR ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT ); // BLE Stack\u3092Enable\u306b err_code = softdevice_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // Event\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332 err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // Init\u5b8c\u4e86\u6642\u306bLED1\u3092\u70b9\u706f\u3055\u305b\u308b\u3002 bsp_board_led_on ( LED1 ); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); leds_init (); ble_stack_init (); // Enter main loop. for (;;) { if ( NRF_LOG_PROCESS () == false ) { power_manage (); } } } /** * @} */","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"6.iBeacon/d.advdata/","text":"AdvData\u306e\u8a2d\u5b9a Define\u306e\u5b9a\u7fa9 1 2 3 4 5 6 7 8 9 10 #define APP_COMPANY_IDENTIFIER 0x002C // Apple #define APP_BEACON_INFO_LENGTH 0x17 // Beacon\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055 #define APP_BEACON_TYPE 0x02, 0x15 // Beacon\u306e\u30bf\u30a4\u30d7 #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 // iBeacon\u306eUUID #define APP_MAJOR_VALUE 0x01, 0x02 // iBeacon\u306eMajor #define APP_MINOR_VALUE 0x03, 0x04 // iBeacon\u306eMinor #define APP_MEASURED_RSSI 0xC3 // RSSI\u51fa\u529b\u306e\u8a08\u6e2c\u5024 AdvData\u306e\u4f5c\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /**@brief Function for initializing the Advertising functionality. */ static void advertising_init ( void ) { uint32_t err_code ; // AdvData\u306eManufacture Specific\u306e\u9818\u57df\u306e\u5024\u306e\u5b9a\u7fa9. ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; // AdvData\u3092\u69cb\u7bc9. ble_advdata_t advdata ; memset ( & advdata , 0 , sizeof ( advdata )); // AdvData\u306e\u8a2d\u5b9a. advdata . name_type = BLE_ADVDATA_NO_NAME ; //advdata.include_appearance = true; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; // Manufacture Specific\u306e\u5024\u3092\u8a2d\u5b9a. advdata . p_manuf_specific_data = & manuf_specific_data ; // AdvData\u3092\u767b\u9332. err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); // AdvData\u8a2d\u5b9a\u5f8c\u306bLED2\u3092\u70b9\u706f bsp_board_led_on ( LED2 ); } ble_advdata_manuf_data_t \u69cb\u9020\u4f53 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v13.0.0%2Fstructble__advdata__manuf__data__t.html ble_advdata_t \u69cb\u9020\u4f53 https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v13.0.0%2Fstructble__advdata__t.html ble_advdata_set https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v13.0.0%2Fgroup__ble__sdk__lib__advdata.html \u30bd\u30fc\u30b9\u30b3\u30fc\u30cinclude <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #include \"ble.h\" #include \"ble_hci.h\" #include \"ble_srv_common.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" #include \"ble_lbs.h\" #include \"ble_gap.h\" #include \"softdevice_handler.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 #define CENTRAL_LINK_COUNT 0 #define PERIPHERAL_LINK_COUNT 1 #define APP_COMPANY_IDENTIFIER 0x002C // Apple #define APP_BEACON_INFO_LENGTH 0x17 // Beacon\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055 #define APP_BEACON_TYPE 0x02, 0x15 // Beacon\u306e\u30bf\u30a4\u30d7 #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 // iBeacon\u306eUUID #define APP_MAJOR_VALUE 0x01, 0x02 // iBeacon\u306eMajor #define APP_MINOR_VALUE 0x03, 0x04 // iBeacon\u306eMinor #define APP_MEASURED_RSSI 0xC3 // RSSI\u51fa\u529b\u306e\u8a08\u6e2c\u5024 static uint8_t m_beacon_info [ APP_BEACON_INFO_LENGTH ] = // iBeacon\u306eAdvertising Data { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; /**@brief Error */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for the Power Manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /**@brief Function for dispatching a BLE stack event. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for initializing the BLE stack. */ static void ble_stack_init ( void ) { // SoftDevice\u306e\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f\u7b49\u306e\u8a2d\u5b9a uint32_t err_code ; nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC ; SOFTDEVICE_HANDLER_INIT ( & clock_lf_cfg , NULL ); // Default\u306eConfig\u3092\u53d6\u5f97 ble_enable_params_t ble_enable_params ; err_code = softdevice_enable_get_default_config ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT , & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // RAM\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af CHECK_RAM_START_ADDR ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT ); // BLE Stack\u3092Enable\u306b err_code = softdevice_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // Event\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332 err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // Init\u5b8c\u4e86\u6642\u306bLED1\u3092\u70b9\u706f\u3055\u305b\u308b\u3002 bsp_board_led_on ( LED1 ); } /**@brief Function for initializing the Advertising functionality. */ static void advertising_init ( void ) { uint32_t err_code ; // AdvData\u306eManufacture Specific\u306e\u9818\u57df\u306e\u5024\u306e\u5b9a\u7fa9. ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; // AdvData\u3092\u69cb\u7bc9. ble_advdata_t advdata ; memset ( & advdata , 0 , sizeof ( advdata )); // AdvData\u306e\u8a2d\u5b9a. advdata . name_type = BLE_ADVDATA_NO_NAME ; //advdata.include_appearance = true; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; // Manufacture Specific\u306e\u5024\u3092\u8a2d\u5b9a. advdata . p_manuf_specific_data = & manuf_specific_data ; // AdvData\u3092\u767b\u9332. err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); // AdvData\u8a2d\u5b9a\u5f8c\u306bLED2\u3092\u70b9\u706f bsp_board_led_on ( LED2 ); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); leds_init (); ble_stack_init (); advertising_init (); // Enter main loop. for (;;) { if ( NRF_LOG_PROCESS () == false ) { power_manage (); } } } /** * @} */","title":"AdvData\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/d.advdata/#advdata","text":"","title":"AdvData\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/d.advdata/#define","text":"1 2 3 4 5 6 7 8 9 10 #define APP_COMPANY_IDENTIFIER 0x002C // Apple #define APP_BEACON_INFO_LENGTH 0x17 // Beacon\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055 #define APP_BEACON_TYPE 0x02, 0x15 // Beacon\u306e\u30bf\u30a4\u30d7 #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 // iBeacon\u306eUUID #define APP_MAJOR_VALUE 0x01, 0x02 // iBeacon\u306eMajor #define APP_MINOR_VALUE 0x03, 0x04 // iBeacon\u306eMinor #define APP_MEASURED_RSSI 0xC3 // RSSI\u51fa\u529b\u306e\u8a08\u6e2c\u5024","title":"Define\u306e\u5b9a\u7fa9"},{"location":"6.iBeacon/d.advdata/#advdata_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /**@brief Function for initializing the Advertising functionality. */ static void advertising_init ( void ) { uint32_t err_code ; // AdvData\u306eManufacture Specific\u306e\u9818\u57df\u306e\u5024\u306e\u5b9a\u7fa9. ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; // AdvData\u3092\u69cb\u7bc9. ble_advdata_t advdata ; memset ( & advdata , 0 , sizeof ( advdata )); // AdvData\u306e\u8a2d\u5b9a. advdata . name_type = BLE_ADVDATA_NO_NAME ; //advdata.include_appearance = true; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; // Manufacture Specific\u306e\u5024\u3092\u8a2d\u5b9a. advdata . p_manuf_specific_data = & manuf_specific_data ; // AdvData\u3092\u767b\u9332. err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); // AdvData\u8a2d\u5b9a\u5f8c\u306bLED2\u3092\u70b9\u706f bsp_board_led_on ( LED2 ); } ble_advdata_manuf_data_t \u69cb\u9020\u4f53 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v13.0.0%2Fstructble__advdata__manuf__data__t.html ble_advdata_t \u69cb\u9020\u4f53 https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v13.0.0%2Fstructble__advdata__t.html ble_advdata_set https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v13.0.0%2Fgroup__ble__sdk__lib__advdata.html","title":"AdvData\u306e\u4f5c\u6210"},{"location":"6.iBeacon/d.advdata/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #include \"ble.h\" #include \"ble_hci.h\" #include \"ble_srv_common.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" #include \"ble_lbs.h\" #include \"ble_gap.h\" #include \"softdevice_handler.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 #define CENTRAL_LINK_COUNT 0 #define PERIPHERAL_LINK_COUNT 1 #define APP_COMPANY_IDENTIFIER 0x002C // Apple #define APP_BEACON_INFO_LENGTH 0x17 // Beacon\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055 #define APP_BEACON_TYPE 0x02, 0x15 // Beacon\u306e\u30bf\u30a4\u30d7 #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 // iBeacon\u306eUUID #define APP_MAJOR_VALUE 0x01, 0x02 // iBeacon\u306eMajor #define APP_MINOR_VALUE 0x03, 0x04 // iBeacon\u306eMinor #define APP_MEASURED_RSSI 0xC3 // RSSI\u51fa\u529b\u306e\u8a08\u6e2c\u5024 static uint8_t m_beacon_info [ APP_BEACON_INFO_LENGTH ] = // iBeacon\u306eAdvertising Data { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; /**@brief Error */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for the Power Manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /**@brief Function for dispatching a BLE stack event. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for initializing the BLE stack. */ static void ble_stack_init ( void ) { // SoftDevice\u306e\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f\u7b49\u306e\u8a2d\u5b9a uint32_t err_code ; nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC ; SOFTDEVICE_HANDLER_INIT ( & clock_lf_cfg , NULL ); // Default\u306eConfig\u3092\u53d6\u5f97 ble_enable_params_t ble_enable_params ; err_code = softdevice_enable_get_default_config ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT , & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // RAM\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af CHECK_RAM_START_ADDR ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT ); // BLE Stack\u3092Enable\u306b err_code = softdevice_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // Event\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332 err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // Init\u5b8c\u4e86\u6642\u306bLED1\u3092\u70b9\u706f\u3055\u305b\u308b\u3002 bsp_board_led_on ( LED1 ); } /**@brief Function for initializing the Advertising functionality. */ static void advertising_init ( void ) { uint32_t err_code ; // AdvData\u306eManufacture Specific\u306e\u9818\u57df\u306e\u5024\u306e\u5b9a\u7fa9. ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; // AdvData\u3092\u69cb\u7bc9. ble_advdata_t advdata ; memset ( & advdata , 0 , sizeof ( advdata )); // AdvData\u306e\u8a2d\u5b9a. advdata . name_type = BLE_ADVDATA_NO_NAME ; //advdata.include_appearance = true; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; // Manufacture Specific\u306e\u5024\u3092\u8a2d\u5b9a. advdata . p_manuf_specific_data = & manuf_specific_data ; // AdvData\u3092\u767b\u9332. err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); // AdvData\u8a2d\u5b9a\u5f8c\u306bLED2\u3092\u70b9\u706f bsp_board_led_on ( LED2 ); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); leds_init (); ble_stack_init (); advertising_init (); // Enter main loop. for (;;) { if ( NRF_LOG_PROCESS () == false ) { power_manage (); } } } /** * @} */","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"6.iBeacon/dev802/","text":"\u958b\u767a\u74b0\u5883(SoftDevice 8.02/Keil MDK5.16) SoftDevice\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5 \u4f7f\u7528\u3057\u305f\u74b0\u5883 MDK-Lite Ver. 5.16a Windows 7 nRF51822 Development Dongle (PCA10000) \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u624b\u9806 SoftDevice\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306eTarget\u4f5c\u6210 nRFgo Studio\u3067\u3082SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u306f\u3067\u304d\u308b\u304c\u3001Keil\u4e0a\u306b\u69cb\u7bc9\u3057\u3066\u304a\u3051\u3070SoftDevice\u3068Application\u306e\u66f8\u304d\u8fbc\u307f\u306e\u4e21\u65b9\u3092\u540c\u3058\u30c4\u30fc\u30eb\u4e0a\u3067\u3067\u304d\u308b\u306e\u3067\u4fbf\u5229\u306b\u306a\u308b\u3002 Keil uVision5\u3092\u8d77\u52d5\u3059\u308b Pack\u3067SoftDevice\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b 2.1. PackInstaller\u3092\u8d77\u52d5\u3059\u308b 2.2. \u5de6\u30da\u30a4\u30f3\u306eDevices\u304b\u3089Nordic\u3092\u9078\u629e\u3059\u308b 2.3. \u53f3\u30da\u30a4\u30f3\u306ePacks\u304b\u3089SoftDevice_S110\u3092Install\u3059\u308b 2.4. PackInstaller\u3092\u9589\u3058\u308b uVision5\u306eProject\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u65b0\u305f\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b Device\u306e\u8a2d\u5b9a\u3092\u805e\u304b\u308c\u308b\u306e\u3067Sofware Packs\u306enRF51822_xxAA\u3092\u9078\u629e\u3059\u308b Target\u306e\u4f5c\u6210 5.1. ManageProjectItems\u3092\u9078\u629e\u3059\u308b 5.2. Target\u540d\u3068Gropus\u3092\u8a2d\u5b9a\u3059\u308b \u4eca\u56de\u306f\u300cFlashSoftDevice\u300d\u3068\u300cApplication\u300d\u3068\u3059\u308b SoftDevice\u306e\u8aad\u307f\u8fbc\u307f 6.1. Manage Run-Time Environment\u3092\u9078\u629e\u3059\u308b 6.2. nRF_SoftDevice\u304b\u3089s110_hex\u3092\u9078\u629e\u3059\u308b \u3053\u306e\u6642\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u308a\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304c\u3001\u5de6\u4e0b\u306eResolve\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u4fee\u6b63\u3055\u308c\u307e\u3059\u3002 6.3. OK\u3092\u62bc\u3057\u3066\u9589\u3058\u308b Target\u306e\u8a2d\u5b9a 7.1. Options for Target\u3092\u9078\u629e\u3059\u308b 7.2. Output\u30bf\u30d6\u306eSelect Folder for Objects...\u3092\u9078\u629e\u3057\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u4e0b\u306e\"\\RTE\\nRF_SoftDevice\\nRF51822_xxAA\"\u3092\u9078\u629e\u3059\u308b 7.3. Name of Executable\u306b\"s110_softdevice.hex\"\u3068\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3059\u308b 7.4. Debug\u30bf\u30d6\u306eUse\u3092\"J-LINK / J-TRACE Cortex\"\u306b\u5909\u66f4\u3059\u308b 7.5. Port\u3092SW\u306b\u5909\u66f4\u3059\u308b 7.6. Size\u30920x2000\u306b(\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306eRAM_BASE\u306e\u5024)\u3059\u308b Add\u3092\u9078\u629e\u3057\u3066\"nRF51xxx External ...\"\u3092\u8ffd\u52a0\u3059\u308b \u53e4\u3044Algorithm\u306fRemove\u3067\u524a\u9664\u3059\u308b USB\u306bPCA10000\u3092\u5dee\u3057\u8fbc\u3080 LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059 SoftDevice\u3092\u5229\u7528\u3057\u306a\u3044Application\u4f5c\u6210 \u307e\u305a\u3001\u307e\u3063\u3055\u3089\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001SoftDevice\u306e\u6a5f\u80fd\u306f\u5229\u7528\u3057\u306a\u3044\u304c\u3001SoftDevice\u3068\u5171\u5b58\u3059\u308b\u7121\u6a5f\u80fd\u306eApplication\u3092\u4f5c\u6210\u3059\u308b \u6b21\u306bLED\u3092\u5149\u3089\u305b\u3001\u6700\u5f8c\u306bSoftDevice\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u6bb5\u968e\u7684\u306b\u8aac\u660e\u3059\u308b Application\u7528\u306eTarget\u3092\u4f5c\u6210 1.1. ManageProjectItems\u3092\u9078\u629e\u3059\u308b 1.2. \u65b0\u3057\u3044Target\u3092\u4f5c\u6210\u3059\u308b \u4eca\u56de\u306f\"nRF51822_s110\"\u3068\u3059\u308b 1.3. \u65b0\u3057\u3044\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u9078\u629e\u3059\u308b hex\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u5916\u3059 2.1. nRF_SoftDevice\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Options for Component...\"\u3092\u9078\u629e\u3059\u308b 2.2. \"Include in target build\"\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5916\u3059 \u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b 3.1. Options for Target\u3092\u9078\u629e\u3059\u308b 3.2. Target\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * Xtal:16.0 * Use MicroLIB: ON * IROM1 Start: 0x18000 * IROM1 Size: 0x28000 * IRAM1 Start: 0x20002000 * IRAM1 Size: 0x6000 Xtal\u306f\u767a\u632f\u5668\u306e\u901f\u5ea6\u3001MicroLIB\u306f\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u3001MemoryArea\u306f\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092\u53c2\u8003\u306bROM\u306b\u306fAPP_CODE_BASE\u3001RAM\u306b\u306fAPP_RAM_BASE\u3092\u5165\u529b\u3059\u308b 3.3. Output\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Select Folder for Objects..\"\u3067\u51fa\u529b\u30d5\u30a9\u30eb\u30c0\u3092\u9078\u629e\u3059\u308b * \u3053\u3053\u3067\u306f\"_build\"\u3068\u3059\u308b * \"Name of Executable\"\u306b\u51fa\u529bhex\u540d\u3092\u5165\u529b\u3059\u308b * \"Create HEX File\"\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b 3.4. Listing\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Select Folder for Listings..\"\u3067Output\u3067\u8a2d\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u3092\u9078\u629e\u3059\u308b 3.5. Linker\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Use Memory Layout from Target Dialog\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092Target\u30bf\u30d6\u3067\u306e\u8a2d\u5b9a\u3068\u540c\u3058\u304f\u3059\u308b 3.6. JLink\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Reset and Run\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u66f8\u304d\u8fbc\u307f\u6642\u306b\u30ea\u30bb\u30c3\u30c8\uff06\u5b9f\u884c\u3092\u884c\u3046 \u5fc5\u8981\u306aPack\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b 4.1. Manage Run-Time Environment\u3092\u9078\u629e\u3059\u308b 4.2. Device\u306eStartup\u3092\u9078\u629e\u3057\u3001Boot\u306b\u5fc5\u8981\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b Application\u3092\u4f5c\u6210\u3059\u308b 5.1. Project\u5185\u306e\u30b0\u30eb\u30fc\u30d7\u540d(\u4eca\u56de\u306fApplication)\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Add New Item to..\"\u3092\u9078\u629e\u3059\u308b 5.2. main.c\u3092\u4f5c\u6210\u3059\u308b 5.3. \u4eca\u56de\u306f\u7121\u6a5f\u80fd\u306eApplication\u306a\u306e\u3067\u3001\u7a7a\u306emain\u6587\u306e\u307f\u306b\u3059\u308b int main() { } \u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u6a5f\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b 6.1. \u30d3\u30eb\u30c9\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059 6.2. LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059 \u30e1\u30e2 \u30c7\u30d0\u30c3\u30b0\u30ed\u30b0 \u30b7\u30ea\u30a2\u30eb\u3067\u30ed\u30b0\u51fa\u529b\u3059\u308b\u5834\u5408\u306fapp_trace\u3092\u5229\u7528\u3059\u308b\u3002 pack\u3067nRF_Libraries->app_trace\u3092\u8ffd\u52a0\u3059\u308b\u3002 \u3053\u306e\u307e\u307e\u3060\u3068\uff11\u6587\u5b57\u3057\u304b\u51fa\u529b\u3055\u308c\u306a\u3044\u306e\u3067\u3001nRF_Drivers->app_uart\u306e\u30c9\u30ed\u30c3\u30d7\u30c0\u30a6\u30f3\u304b\u3089Fifo\u3092\u9078\u629e\u3059\u308b\u3002 SOFTDEVICE_HANDLER_INIT(CLOCK_SOURCE, EVT_HANDLER) Akabeacon\u3067\u306f\u6c34\u6676\u306b ABS05 \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002 \u30b9\u30da\u30c3\u30af\u3092\u898b\u308b\u3068\u8aa4\u5dee20ppm\u306a\u306e\u3067\u3001NRF_CLOCK_LFCLKSRC_XTAL_20_PPM\u3092\u6307\u5b9a\u3059\u308b\u3002 \u5916\u90e8\u6c34\u6676\u304c\u306a\u3044\u5834\u5408\u306f\u3001NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3068\u5185\u90e8\u6c34\u6676\u3092\u5229\u7528\u3059\u308b\u3002 \u5185\u90e8\u6c34\u6676\u306f250ppm\u306a\u306e\u3067\u6642\u3005\u88dc\u6b63\u304c\u5fc5\u8981\u3067\u30014000MS\u79d2\u6bce\u306b\u88dc\u6b63\u3092\u884c\u3046\u3068\u3044\u3046\u610f\u5473\u3002 ble_gap_conn_params_t min_conn_interval / max_conn_interval Central\u304cPeripheral\u306b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u306b\u884c\u304f\u9593\u9694\u30027.5ms~4s\u3002 slave_latency \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306b\u63a5\u7d9a\u3092\u7121\u8996\u3067\u304d\u308b\u56de\u6570\u3002 conn_sup_timeout \u63a5\u7d9a\u304c\u5207\u308c\u305f\u3068\u5224\u65ad\u3059\u308b\u307e\u3067\u306e\u6642\u9593\u3002 Basic Rate/Enchanced Data Rate\uff08BR/EDR\uff09 BLE\u3058\u3083\u306a\u3044\u666e\u901a\u306eBluetooth\u3002 User Information Configuration Registers (UICR) \u8a2d\u5b9a\u5024\u3092\u56fa\u5b9a\u30ec\u30b8\u30b9\u30bf\u306b\u66f8\u3044\u3066\u304a\u304f\u3053\u3068\u3067\u30d3\u30eb\u30c9\u4e0d\u8981\u3067\u8a2d\u5b9a\u5024\u3092\u5909\u66f4\u3059\u308b\u4ed5\u7d44\u307f\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002 uint32_t UICR_ADDR_0x80 __attribute__((at(0x10001080))) __attribute__((used)) = 0x12345678; \u3053\u306e\u5024\u3092J-Link\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u4e8b\u3067\u66f8\u304d\u63db\u3048\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002 nrfjprog --snr <Segger-chip-Serial-Number> --memwr 0x10001080 --val 0xabcd0102","title":"\u958b\u767a\u74b0\u5883(SoftDevice 8.02/Keil MDK5.16)"},{"location":"6.iBeacon/dev802/#softdevice-802keil-mdk516","text":"","title":"\u958b\u767a\u74b0\u5883(SoftDevice 8.02/Keil MDK5.16)"},{"location":"6.iBeacon/dev802/#softdevice","text":"","title":"SoftDevice\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5"},{"location":"6.iBeacon/dev802/#_1","text":"MDK-Lite Ver. 5.16a Windows 7 nRF51822 Development Dongle (PCA10000) \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","title":"\u4f7f\u7528\u3057\u305f\u74b0\u5883"},{"location":"6.iBeacon/dev802/#_2","text":"","title":"\u624b\u9806"},{"location":"6.iBeacon/dev802/#softdevicetarget","text":"nRFgo Studio\u3067\u3082SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u306f\u3067\u304d\u308b\u304c\u3001Keil\u4e0a\u306b\u69cb\u7bc9\u3057\u3066\u304a\u3051\u3070SoftDevice\u3068Application\u306e\u66f8\u304d\u8fbc\u307f\u306e\u4e21\u65b9\u3092\u540c\u3058\u30c4\u30fc\u30eb\u4e0a\u3067\u3067\u304d\u308b\u306e\u3067\u4fbf\u5229\u306b\u306a\u308b\u3002 Keil uVision5\u3092\u8d77\u52d5\u3059\u308b Pack\u3067SoftDevice\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b 2.1. PackInstaller\u3092\u8d77\u52d5\u3059\u308b 2.2. \u5de6\u30da\u30a4\u30f3\u306eDevices\u304b\u3089Nordic\u3092\u9078\u629e\u3059\u308b 2.3. \u53f3\u30da\u30a4\u30f3\u306ePacks\u304b\u3089SoftDevice_S110\u3092Install\u3059\u308b 2.4. PackInstaller\u3092\u9589\u3058\u308b uVision5\u306eProject\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u65b0\u305f\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b Device\u306e\u8a2d\u5b9a\u3092\u805e\u304b\u308c\u308b\u306e\u3067Sofware Packs\u306enRF51822_xxAA\u3092\u9078\u629e\u3059\u308b Target\u306e\u4f5c\u6210 5.1. ManageProjectItems\u3092\u9078\u629e\u3059\u308b 5.2. Target\u540d\u3068Gropus\u3092\u8a2d\u5b9a\u3059\u308b \u4eca\u56de\u306f\u300cFlashSoftDevice\u300d\u3068\u300cApplication\u300d\u3068\u3059\u308b SoftDevice\u306e\u8aad\u307f\u8fbc\u307f 6.1. Manage Run-Time Environment\u3092\u9078\u629e\u3059\u308b 6.2. nRF_SoftDevice\u304b\u3089s110_hex\u3092\u9078\u629e\u3059\u308b \u3053\u306e\u6642\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u308a\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304c\u3001\u5de6\u4e0b\u306eResolve\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u4fee\u6b63\u3055\u308c\u307e\u3059\u3002 6.3. OK\u3092\u62bc\u3057\u3066\u9589\u3058\u308b Target\u306e\u8a2d\u5b9a 7.1. Options for Target\u3092\u9078\u629e\u3059\u308b 7.2. Output\u30bf\u30d6\u306eSelect Folder for Objects...\u3092\u9078\u629e\u3057\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u4e0b\u306e\"\\RTE\\nRF_SoftDevice\\nRF51822_xxAA\"\u3092\u9078\u629e\u3059\u308b 7.3. Name of Executable\u306b\"s110_softdevice.hex\"\u3068\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3059\u308b 7.4. Debug\u30bf\u30d6\u306eUse\u3092\"J-LINK / J-TRACE Cortex\"\u306b\u5909\u66f4\u3059\u308b 7.5. Port\u3092SW\u306b\u5909\u66f4\u3059\u308b 7.6. Size\u30920x2000\u306b(\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306eRAM_BASE\u306e\u5024)\u3059\u308b Add\u3092\u9078\u629e\u3057\u3066\"nRF51xxx External ...\"\u3092\u8ffd\u52a0\u3059\u308b \u53e4\u3044Algorithm\u306fRemove\u3067\u524a\u9664\u3059\u308b USB\u306bPCA10000\u3092\u5dee\u3057\u8fbc\u3080 LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059","title":"SoftDevice\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306eTarget\u4f5c\u6210"},{"location":"6.iBeacon/dev802/#softdeviceapplication","text":"\u307e\u305a\u3001\u307e\u3063\u3055\u3089\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001SoftDevice\u306e\u6a5f\u80fd\u306f\u5229\u7528\u3057\u306a\u3044\u304c\u3001SoftDevice\u3068\u5171\u5b58\u3059\u308b\u7121\u6a5f\u80fd\u306eApplication\u3092\u4f5c\u6210\u3059\u308b \u6b21\u306bLED\u3092\u5149\u3089\u305b\u3001\u6700\u5f8c\u306bSoftDevice\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u6bb5\u968e\u7684\u306b\u8aac\u660e\u3059\u308b Application\u7528\u306eTarget\u3092\u4f5c\u6210 1.1. ManageProjectItems\u3092\u9078\u629e\u3059\u308b 1.2. \u65b0\u3057\u3044Target\u3092\u4f5c\u6210\u3059\u308b \u4eca\u56de\u306f\"nRF51822_s110\"\u3068\u3059\u308b 1.3. \u65b0\u3057\u3044\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u9078\u629e\u3059\u308b hex\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u5916\u3059 2.1. nRF_SoftDevice\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Options for Component...\"\u3092\u9078\u629e\u3059\u308b 2.2. \"Include in target build\"\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5916\u3059 \u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b 3.1. Options for Target\u3092\u9078\u629e\u3059\u308b 3.2. Target\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * Xtal:16.0 * Use MicroLIB: ON * IROM1 Start: 0x18000 * IROM1 Size: 0x28000 * IRAM1 Start: 0x20002000 * IRAM1 Size: 0x6000 Xtal\u306f\u767a\u632f\u5668\u306e\u901f\u5ea6\u3001MicroLIB\u306f\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u3001MemoryArea\u306f\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092\u53c2\u8003\u306bROM\u306b\u306fAPP_CODE_BASE\u3001RAM\u306b\u306fAPP_RAM_BASE\u3092\u5165\u529b\u3059\u308b 3.3. Output\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Select Folder for Objects..\"\u3067\u51fa\u529b\u30d5\u30a9\u30eb\u30c0\u3092\u9078\u629e\u3059\u308b * \u3053\u3053\u3067\u306f\"_build\"\u3068\u3059\u308b * \"Name of Executable\"\u306b\u51fa\u529bhex\u540d\u3092\u5165\u529b\u3059\u308b * \"Create HEX File\"\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b 3.4. Listing\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Select Folder for Listings..\"\u3067Output\u3067\u8a2d\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u3092\u9078\u629e\u3059\u308b 3.5. Linker\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Use Memory Layout from Target Dialog\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092Target\u30bf\u30d6\u3067\u306e\u8a2d\u5b9a\u3068\u540c\u3058\u304f\u3059\u308b 3.6. JLink\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Reset and Run\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u66f8\u304d\u8fbc\u307f\u6642\u306b\u30ea\u30bb\u30c3\u30c8\uff06\u5b9f\u884c\u3092\u884c\u3046 \u5fc5\u8981\u306aPack\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b 4.1. Manage Run-Time Environment\u3092\u9078\u629e\u3059\u308b 4.2. Device\u306eStartup\u3092\u9078\u629e\u3057\u3001Boot\u306b\u5fc5\u8981\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b Application\u3092\u4f5c\u6210\u3059\u308b 5.1. Project\u5185\u306e\u30b0\u30eb\u30fc\u30d7\u540d(\u4eca\u56de\u306fApplication)\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Add New Item to..\"\u3092\u9078\u629e\u3059\u308b 5.2. main.c\u3092\u4f5c\u6210\u3059\u308b 5.3. \u4eca\u56de\u306f\u7121\u6a5f\u80fd\u306eApplication\u306a\u306e\u3067\u3001\u7a7a\u306emain\u6587\u306e\u307f\u306b\u3059\u308b int main() { } \u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u6a5f\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b 6.1. \u30d3\u30eb\u30c9\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059 6.2. LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059","title":"SoftDevice\u3092\u5229\u7528\u3057\u306a\u3044Application\u4f5c\u6210"},{"location":"6.iBeacon/dev802/#_3","text":"","title":"\u30e1\u30e2"},{"location":"6.iBeacon/dev802/#_4","text":"\u30b7\u30ea\u30a2\u30eb\u3067\u30ed\u30b0\u51fa\u529b\u3059\u308b\u5834\u5408\u306fapp_trace\u3092\u5229\u7528\u3059\u308b\u3002 pack\u3067nRF_Libraries->app_trace\u3092\u8ffd\u52a0\u3059\u308b\u3002 \u3053\u306e\u307e\u307e\u3060\u3068\uff11\u6587\u5b57\u3057\u304b\u51fa\u529b\u3055\u308c\u306a\u3044\u306e\u3067\u3001nRF_Drivers->app_uart\u306e\u30c9\u30ed\u30c3\u30d7\u30c0\u30a6\u30f3\u304b\u3089Fifo\u3092\u9078\u629e\u3059\u308b\u3002","title":"\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0"},{"location":"6.iBeacon/dev802/#softdevice_handler_initclock_source-evt_handler","text":"Akabeacon\u3067\u306f\u6c34\u6676\u306b ABS05 \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002 \u30b9\u30da\u30c3\u30af\u3092\u898b\u308b\u3068\u8aa4\u5dee20ppm\u306a\u306e\u3067\u3001NRF_CLOCK_LFCLKSRC_XTAL_20_PPM\u3092\u6307\u5b9a\u3059\u308b\u3002 \u5916\u90e8\u6c34\u6676\u304c\u306a\u3044\u5834\u5408\u306f\u3001NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3068\u5185\u90e8\u6c34\u6676\u3092\u5229\u7528\u3059\u308b\u3002 \u5185\u90e8\u6c34\u6676\u306f250ppm\u306a\u306e\u3067\u6642\u3005\u88dc\u6b63\u304c\u5fc5\u8981\u3067\u30014000MS\u79d2\u6bce\u306b\u88dc\u6b63\u3092\u884c\u3046\u3068\u3044\u3046\u610f\u5473\u3002","title":"SOFTDEVICE_HANDLER_INIT(CLOCK_SOURCE, EVT_HANDLER)"},{"location":"6.iBeacon/dev802/#ble_gap_conn_params_t","text":"min_conn_interval / max_conn_interval Central\u304cPeripheral\u306b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u306b\u884c\u304f\u9593\u9694\u30027.5ms~4s\u3002 slave_latency \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306b\u63a5\u7d9a\u3092\u7121\u8996\u3067\u304d\u308b\u56de\u6570\u3002 conn_sup_timeout \u63a5\u7d9a\u304c\u5207\u308c\u305f\u3068\u5224\u65ad\u3059\u308b\u307e\u3067\u306e\u6642\u9593\u3002","title":"ble_gap_conn_params_t"},{"location":"6.iBeacon/dev802/#basic-rateenchanced-data-ratebredr","text":"BLE\u3058\u3083\u306a\u3044\u666e\u901a\u306eBluetooth\u3002","title":"Basic Rate/Enchanced Data Rate\uff08BR/EDR\uff09"},{"location":"6.iBeacon/dev802/#user-information-configuration-registers-uicr","text":"\u8a2d\u5b9a\u5024\u3092\u56fa\u5b9a\u30ec\u30b8\u30b9\u30bf\u306b\u66f8\u3044\u3066\u304a\u304f\u3053\u3068\u3067\u30d3\u30eb\u30c9\u4e0d\u8981\u3067\u8a2d\u5b9a\u5024\u3092\u5909\u66f4\u3059\u308b\u4ed5\u7d44\u307f\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002 uint32_t UICR_ADDR_0x80 __attribute__((at(0x10001080))) __attribute__((used)) = 0x12345678; \u3053\u306e\u5024\u3092J-Link\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u4e8b\u3067\u66f8\u304d\u63db\u3048\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002 nrfjprog --snr <Segger-chip-Serial-Number> --memwr 0x10001080 --val 0xabcd0102","title":"User Information Configuration Registers (UICR)"},{"location":"6.iBeacon/dev_sd802/","text":"\u958b\u767a\u74b0\u5883(SoftDevice 8.02/Keil MDK5.16) SoftDevice\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5 \u4f7f\u7528\u3057\u305f\u74b0\u5883 MDK-Lite Ver. 5.16a Windows 7 nRF51822 Development Dongle (PCA10000) \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u624b\u9806 SoftDevice\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306eTarget\u4f5c\u6210 nRFgo Studio\u3067\u3082SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u306f\u3067\u304d\u308b\u304c\u3001Keil\u4e0a\u306b\u69cb\u7bc9\u3057\u3066\u304a\u3051\u3070SoftDevice\u3068Application\u306e\u66f8\u304d\u8fbc\u307f\u306e\u4e21\u65b9\u3092\u540c\u3058\u30c4\u30fc\u30eb\u4e0a\u3067\u3067\u304d\u308b\u306e\u3067\u4fbf\u5229\u306b\u306a\u308b\u3002 Keil uVision5\u3092\u8d77\u52d5\u3059\u308b Pack\u3067SoftDevice\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b 2.1. PackInstaller\u3092\u8d77\u52d5\u3059\u308b 2.2. \u5de6\u30da\u30a4\u30f3\u306eDevices\u304b\u3089Nordic\u3092\u9078\u629e\u3059\u308b 2.3. \u53f3\u30da\u30a4\u30f3\u306ePacks\u304b\u3089SoftDevice_S110\u3092Install\u3059\u308b 2.4. PackInstaller\u3092\u9589\u3058\u308b uVision5\u306eProject\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u65b0\u305f\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b Device\u306e\u8a2d\u5b9a\u3092\u805e\u304b\u308c\u308b\u306e\u3067Sofware Packs\u306enRF51822_xxAA\u3092\u9078\u629e\u3059\u308b Target\u306e\u4f5c\u6210 5.1. ManageProjectItems\u3092\u9078\u629e\u3059\u308b 5.2. Target\u540d\u3068Gropus\u3092\u8a2d\u5b9a\u3059\u308b \u4eca\u56de\u306f\u300cFlashSoftDevice\u300d\u3068\u300cApplication\u300d\u3068\u3059\u308b SoftDevice\u306e\u8aad\u307f\u8fbc\u307f 6.1. Manage Run-Time Environment\u3092\u9078\u629e\u3059\u308b 6.2. nRF_SoftDevice\u304b\u3089s110_hex\u3092\u9078\u629e\u3059\u308b \u3053\u306e\u6642\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u308a\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304c\u3001\u5de6\u4e0b\u306eResolve\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u4fee\u6b63\u3055\u308c\u307e\u3059\u3002 6.3. OK\u3092\u62bc\u3057\u3066\u9589\u3058\u308b Target\u306e\u8a2d\u5b9a 7.1. Options for Target\u3092\u9078\u629e\u3059\u308b 7.2. Output\u30bf\u30d6\u306eSelect Folder for Objects...\u3092\u9078\u629e\u3057\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u4e0b\u306e\"\\RTE\\nRF_SoftDevice\\nRF51822_xxAA\"\u3092\u9078\u629e\u3059\u308b 7.3. Name of Executable\u306b\"s110_softdevice.hex\"\u3068\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3059\u308b 7.4. Debug\u30bf\u30d6\u306eUse\u3092\"J-LINK / J-TRACE Cortex\"\u306b\u5909\u66f4\u3059\u308b 7.5. Port\u3092SW\u306b\u5909\u66f4\u3059\u308b 7.6. Size\u30920x2000\u306b(\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306eRAM_BASE\u306e\u5024)\u3059\u308b Add\u3092\u9078\u629e\u3057\u3066\"nRF51xxx External ...\"\u3092\u8ffd\u52a0\u3059\u308b \u53e4\u3044Algorithm\u306fRemove\u3067\u524a\u9664\u3059\u308b USB\u306bPCA10000\u3092\u5dee\u3057\u8fbc\u3080 LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059 SoftDevice\u3092\u5229\u7528\u3057\u306a\u3044Application\u4f5c\u6210 \u307e\u305a\u3001\u307e\u3063\u3055\u3089\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001SoftDevice\u306e\u6a5f\u80fd\u306f\u5229\u7528\u3057\u306a\u3044\u304c\u3001SoftDevice\u3068\u5171\u5b58\u3059\u308b\u7121\u6a5f\u80fd\u306eApplication\u3092\u4f5c\u6210\u3059\u308b \u6b21\u306bLED\u3092\u5149\u3089\u305b\u3001\u6700\u5f8c\u306bSoftDevice\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u6bb5\u968e\u7684\u306b\u8aac\u660e\u3059\u308b Application\u7528\u306eTarget\u3092\u4f5c\u6210 1.1. ManageProjectItems\u3092\u9078\u629e\u3059\u308b 1.2. \u65b0\u3057\u3044Target\u3092\u4f5c\u6210\u3059\u308b \u4eca\u56de\u306f\"nRF51822_s110\"\u3068\u3059\u308b 1.3. \u65b0\u3057\u3044\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u9078\u629e\u3059\u308b hex\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u5916\u3059 2.1. nRF_SoftDevice\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Options for Component...\"\u3092\u9078\u629e\u3059\u308b 2.2. \"Include in target build\"\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5916\u3059 \u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b 3.1. Options for Target\u3092\u9078\u629e\u3059\u308b 3.2. Target\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * Xtal:16.0 * Use MicroLIB: ON * IROM1 Start: 0x18000 * IROM1 Size: 0x28000 * IRAM1 Start: 0x20002000 * IRAM1 Size: 0x6000 Xtal\u306f\u767a\u632f\u5668\u306e\u901f\u5ea6\u3001MicroLIB\u306f\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u3001MemoryArea\u306f\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092\u53c2\u8003\u306bROM\u306b\u306fAPP_CODE_BASE\u3001RAM\u306b\u306fAPP_RAM_BASE\u3092\u5165\u529b\u3059\u308b 3.3. Output\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Select Folder for Objects..\"\u3067\u51fa\u529b\u30d5\u30a9\u30eb\u30c0\u3092\u9078\u629e\u3059\u308b * \u3053\u3053\u3067\u306f\"_build\"\u3068\u3059\u308b * \"Name of Executable\"\u306b\u51fa\u529bhex\u540d\u3092\u5165\u529b\u3059\u308b * \"Create HEX File\"\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b 3.4. Listing\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Select Folder for Listings..\"\u3067Output\u3067\u8a2d\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u3092\u9078\u629e\u3059\u308b 3.5. Linker\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Use Memory Layout from Target Dialog\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092Target\u30bf\u30d6\u3067\u306e\u8a2d\u5b9a\u3068\u540c\u3058\u304f\u3059\u308b 3.6. JLink\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Reset and Run\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u66f8\u304d\u8fbc\u307f\u6642\u306b\u30ea\u30bb\u30c3\u30c8\uff06\u5b9f\u884c\u3092\u884c\u3046 \u5fc5\u8981\u306aPack\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b 4.1. Manage Run-Time Environment\u3092\u9078\u629e\u3059\u308b 4.2. Device\u306eStartup\u3092\u9078\u629e\u3057\u3001Boot\u306b\u5fc5\u8981\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b Application\u3092\u4f5c\u6210\u3059\u308b 5.1. Project\u5185\u306e\u30b0\u30eb\u30fc\u30d7\u540d(\u4eca\u56de\u306fApplication)\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Add New Item to..\"\u3092\u9078\u629e\u3059\u308b 5.2. main.c\u3092\u4f5c\u6210\u3059\u308b 5.3. \u4eca\u56de\u306f\u7121\u6a5f\u80fd\u306eApplication\u306a\u306e\u3067\u3001\u7a7a\u306emain\u6587\u306e\u307f\u306b\u3059\u308b int main() { } \u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u6a5f\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b 6.1. \u30d3\u30eb\u30c9\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059 6.2. LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059 \u30e1\u30e2 \u30c7\u30d0\u30c3\u30b0\u30ed\u30b0 \u30b7\u30ea\u30a2\u30eb\u3067\u30ed\u30b0\u51fa\u529b\u3059\u308b\u5834\u5408\u306fapp_trace\u3092\u5229\u7528\u3059\u308b\u3002 pack\u3067nRF_Libraries->app_trace\u3092\u8ffd\u52a0\u3059\u308b\u3002 \u3053\u306e\u307e\u307e\u3060\u3068\uff11\u6587\u5b57\u3057\u304b\u51fa\u529b\u3055\u308c\u306a\u3044\u306e\u3067\u3001nRF_Drivers->app_uart\u306e\u30c9\u30ed\u30c3\u30d7\u30c0\u30a6\u30f3\u304b\u3089Fifo\u3092\u9078\u629e\u3059\u308b\u3002 SOFTDEVICE_HANDLER_INIT(CLOCK_SOURCE, EVT_HANDLER) Akabeacon\u3067\u306f\u6c34\u6676\u306b ABS05 \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002 \u30b9\u30da\u30c3\u30af\u3092\u898b\u308b\u3068\u8aa4\u5dee20ppm\u306a\u306e\u3067\u3001NRF_CLOCK_LFCLKSRC_XTAL_20_PPM\u3092\u6307\u5b9a\u3059\u308b\u3002 \u5916\u90e8\u6c34\u6676\u304c\u306a\u3044\u5834\u5408\u306f\u3001NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3068\u5185\u90e8\u6c34\u6676\u3092\u5229\u7528\u3059\u308b\u3002 \u5185\u90e8\u6c34\u6676\u306f250ppm\u306a\u306e\u3067\u6642\u3005\u88dc\u6b63\u304c\u5fc5\u8981\u3067\u30014000MS\u79d2\u6bce\u306b\u88dc\u6b63\u3092\u884c\u3046\u3068\u3044\u3046\u610f\u5473\u3002 ble_gap_conn_params_t min_conn_interval / max_conn_interval Central\u304cPeripheral\u306b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u306b\u884c\u304f\u9593\u9694\u30027.5ms~4s\u3002 slave_latency \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306b\u63a5\u7d9a\u3092\u7121\u8996\u3067\u304d\u308b\u56de\u6570\u3002 conn_sup_timeout \u63a5\u7d9a\u304c\u5207\u308c\u305f\u3068\u5224\u65ad\u3059\u308b\u307e\u3067\u306e\u6642\u9593\u3002 Basic Rate/Enchanced Data Rate\uff08BR/EDR\uff09 BLE\u3058\u3083\u306a\u3044\u666e\u901a\u306eBluetooth\u3002 User Information Configuration Registers (UICR) \u8a2d\u5b9a\u5024\u3092\u56fa\u5b9a\u30ec\u30b8\u30b9\u30bf\u306b\u66f8\u3044\u3066\u304a\u304f\u3053\u3068\u3067\u30d3\u30eb\u30c9\u4e0d\u8981\u3067\u8a2d\u5b9a\u5024\u3092\u5909\u66f4\u3059\u308b\u4ed5\u7d44\u307f\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002 uint32_t UICR_ADDR_0x80 __attribute__((at(0x10001080))) __attribute__((used)) = 0x12345678; \u3053\u306e\u5024\u3092J-Link\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u4e8b\u3067\u66f8\u304d\u63db\u3048\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002 nrfjprog --snr <Segger-chip-Serial-Number> --memwr 0x10001080 --val 0xabcd0102","title":"\u958b\u767a\u74b0\u5883(SoftDevice 8.02/Keil MDK5.16)"},{"location":"6.iBeacon/dev_sd802/#softdevice-802keil-mdk516","text":"","title":"\u958b\u767a\u74b0\u5883(SoftDevice 8.02/Keil MDK5.16)"},{"location":"6.iBeacon/dev_sd802/#softdevice","text":"","title":"SoftDevice\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u65b9\u6cd5"},{"location":"6.iBeacon/dev_sd802/#_1","text":"MDK-Lite Ver. 5.16a Windows 7 nRF51822 Development Dongle (PCA10000) \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","title":"\u4f7f\u7528\u3057\u305f\u74b0\u5883"},{"location":"6.iBeacon/dev_sd802/#_2","text":"","title":"\u624b\u9806"},{"location":"6.iBeacon/dev_sd802/#softdevicetarget","text":"nRFgo Studio\u3067\u3082SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u306f\u3067\u304d\u308b\u304c\u3001Keil\u4e0a\u306b\u69cb\u7bc9\u3057\u3066\u304a\u3051\u3070SoftDevice\u3068Application\u306e\u66f8\u304d\u8fbc\u307f\u306e\u4e21\u65b9\u3092\u540c\u3058\u30c4\u30fc\u30eb\u4e0a\u3067\u3067\u304d\u308b\u306e\u3067\u4fbf\u5229\u306b\u306a\u308b\u3002 Keil uVision5\u3092\u8d77\u52d5\u3059\u308b Pack\u3067SoftDevice\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b 2.1. PackInstaller\u3092\u8d77\u52d5\u3059\u308b 2.2. \u5de6\u30da\u30a4\u30f3\u306eDevices\u304b\u3089Nordic\u3092\u9078\u629e\u3059\u308b 2.3. \u53f3\u30da\u30a4\u30f3\u306ePacks\u304b\u3089SoftDevice_S110\u3092Install\u3059\u308b 2.4. PackInstaller\u3092\u9589\u3058\u308b uVision5\u306eProject\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u65b0\u305f\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b Device\u306e\u8a2d\u5b9a\u3092\u805e\u304b\u308c\u308b\u306e\u3067Sofware Packs\u306enRF51822_xxAA\u3092\u9078\u629e\u3059\u308b Target\u306e\u4f5c\u6210 5.1. ManageProjectItems\u3092\u9078\u629e\u3059\u308b 5.2. Target\u540d\u3068Gropus\u3092\u8a2d\u5b9a\u3059\u308b \u4eca\u56de\u306f\u300cFlashSoftDevice\u300d\u3068\u300cApplication\u300d\u3068\u3059\u308b SoftDevice\u306e\u8aad\u307f\u8fbc\u307f 6.1. Manage Run-Time Environment\u3092\u9078\u629e\u3059\u308b 6.2. nRF_SoftDevice\u304b\u3089s110_hex\u3092\u9078\u629e\u3059\u308b \u3053\u306e\u6642\u30aa\u30ec\u30f3\u30b8\u8272\u306b\u306a\u308a\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304c\u3001\u5de6\u4e0b\u306eResolve\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u4fee\u6b63\u3055\u308c\u307e\u3059\u3002 6.3. OK\u3092\u62bc\u3057\u3066\u9589\u3058\u308b Target\u306e\u8a2d\u5b9a 7.1. Options for Target\u3092\u9078\u629e\u3059\u308b 7.2. Output\u30bf\u30d6\u306eSelect Folder for Objects...\u3092\u9078\u629e\u3057\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u4e0b\u306e\"\\RTE\\nRF_SoftDevice\\nRF51822_xxAA\"\u3092\u9078\u629e\u3059\u308b 7.3. Name of Executable\u306b\"s110_softdevice.hex\"\u3068\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5165\u529b\u3059\u308b 7.4. Debug\u30bf\u30d6\u306eUse\u3092\"J-LINK / J-TRACE Cortex\"\u306b\u5909\u66f4\u3059\u308b 7.5. Port\u3092SW\u306b\u5909\u66f4\u3059\u308b 7.6. Size\u30920x2000\u306b(\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u306eRAM_BASE\u306e\u5024)\u3059\u308b Add\u3092\u9078\u629e\u3057\u3066\"nRF51xxx External ...\"\u3092\u8ffd\u52a0\u3059\u308b \u53e4\u3044Algorithm\u306fRemove\u3067\u524a\u9664\u3059\u308b USB\u306bPCA10000\u3092\u5dee\u3057\u8fbc\u3080 LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059","title":"SoftDevice\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306eTarget\u4f5c\u6210"},{"location":"6.iBeacon/dev_sd802/#softdeviceapplication","text":"\u307e\u305a\u3001\u307e\u3063\u3055\u3089\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001SoftDevice\u306e\u6a5f\u80fd\u306f\u5229\u7528\u3057\u306a\u3044\u304c\u3001SoftDevice\u3068\u5171\u5b58\u3059\u308b\u7121\u6a5f\u80fd\u306eApplication\u3092\u4f5c\u6210\u3059\u308b \u6b21\u306bLED\u3092\u5149\u3089\u305b\u3001\u6700\u5f8c\u306bSoftDevice\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u6bb5\u968e\u7684\u306b\u8aac\u660e\u3059\u308b Application\u7528\u306eTarget\u3092\u4f5c\u6210 1.1. ManageProjectItems\u3092\u9078\u629e\u3059\u308b 1.2. \u65b0\u3057\u3044Target\u3092\u4f5c\u6210\u3059\u308b \u4eca\u56de\u306f\"nRF51822_s110\"\u3068\u3059\u308b 1.3. \u65b0\u3057\u3044\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u9078\u629e\u3059\u308b hex\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u30bf\u30fc\u30b2\u30c3\u30c8\u304b\u3089\u5916\u3059 2.1. nRF_SoftDevice\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Options for Component...\"\u3092\u9078\u629e\u3059\u308b 2.2. \"Include in target build\"\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5916\u3059 \u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b 3.1. Options for Target\u3092\u9078\u629e\u3059\u308b 3.2. Target\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * Xtal:16.0 * Use MicroLIB: ON * IROM1 Start: 0x18000 * IROM1 Size: 0x28000 * IRAM1 Start: 0x20002000 * IRAM1 Size: 0x6000 Xtal\u306f\u767a\u632f\u5668\u306e\u901f\u5ea6\u3001MicroLIB\u306f\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u3001MemoryArea\u306f\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092\u53c2\u8003\u306bROM\u306b\u306fAPP_CODE_BASE\u3001RAM\u306b\u306fAPP_RAM_BASE\u3092\u5165\u529b\u3059\u308b 3.3. Output\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Select Folder for Objects..\"\u3067\u51fa\u529b\u30d5\u30a9\u30eb\u30c0\u3092\u9078\u629e\u3059\u308b * \u3053\u3053\u3067\u306f\"_build\"\u3068\u3059\u308b * \"Name of Executable\"\u306b\u51fa\u529bhex\u540d\u3092\u5165\u529b\u3059\u308b * \"Create HEX File\"\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b 3.4. Listing\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Select Folder for Listings..\"\u3067Output\u3067\u8a2d\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u3092\u9078\u629e\u3059\u308b 3.5. Linker\u30bf\u30d6\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Use Memory Layout from Target Dialog\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3092Target\u30bf\u30d6\u3067\u306e\u8a2d\u5b9a\u3068\u540c\u3058\u304f\u3059\u308b 3.6. JLink\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b * \"Reset and Run\"\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u66f8\u304d\u8fbc\u307f\u6642\u306b\u30ea\u30bb\u30c3\u30c8\uff06\u5b9f\u884c\u3092\u884c\u3046 \u5fc5\u8981\u306aPack\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b 4.1. Manage Run-Time Environment\u3092\u9078\u629e\u3059\u308b 4.2. Device\u306eStartup\u3092\u9078\u629e\u3057\u3001Boot\u306b\u5fc5\u8981\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b Application\u3092\u4f5c\u6210\u3059\u308b 5.1. Project\u5185\u306e\u30b0\u30eb\u30fc\u30d7\u540d(\u4eca\u56de\u306fApplication)\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\"Add New Item to..\"\u3092\u9078\u629e\u3059\u308b 5.2. main.c\u3092\u4f5c\u6210\u3059\u308b 5.3. \u4eca\u56de\u306f\u7121\u6a5f\u80fd\u306eApplication\u306a\u306e\u3067\u3001\u7a7a\u306emain\u6587\u306e\u307f\u306b\u3059\u308b int main() { } \u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u6a5f\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b 6.1. \u30d3\u30eb\u30c9\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059 6.2. LOAD\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068SoftDevice\u306e\u66f8\u304d\u8fbc\u307f\u304c\u958b\u59cb\u3055\u308c\u307e\u3059","title":"SoftDevice\u3092\u5229\u7528\u3057\u306a\u3044Application\u4f5c\u6210"},{"location":"6.iBeacon/dev_sd802/#_3","text":"","title":"\u30e1\u30e2"},{"location":"6.iBeacon/dev_sd802/#_4","text":"\u30b7\u30ea\u30a2\u30eb\u3067\u30ed\u30b0\u51fa\u529b\u3059\u308b\u5834\u5408\u306fapp_trace\u3092\u5229\u7528\u3059\u308b\u3002 pack\u3067nRF_Libraries->app_trace\u3092\u8ffd\u52a0\u3059\u308b\u3002 \u3053\u306e\u307e\u307e\u3060\u3068\uff11\u6587\u5b57\u3057\u304b\u51fa\u529b\u3055\u308c\u306a\u3044\u306e\u3067\u3001nRF_Drivers->app_uart\u306e\u30c9\u30ed\u30c3\u30d7\u30c0\u30a6\u30f3\u304b\u3089Fifo\u3092\u9078\u629e\u3059\u308b\u3002","title":"\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0"},{"location":"6.iBeacon/dev_sd802/#softdevice_handler_initclock_source-evt_handler","text":"Akabeacon\u3067\u306f\u6c34\u6676\u306b ABS05 \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002 \u30b9\u30da\u30c3\u30af\u3092\u898b\u308b\u3068\u8aa4\u5dee20ppm\u306a\u306e\u3067\u3001NRF_CLOCK_LFCLKSRC_XTAL_20_PPM\u3092\u6307\u5b9a\u3059\u308b\u3002 \u5916\u90e8\u6c34\u6676\u304c\u306a\u3044\u5834\u5408\u306f\u3001NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3068\u5185\u90e8\u6c34\u6676\u3092\u5229\u7528\u3059\u308b\u3002 \u5185\u90e8\u6c34\u6676\u306f250ppm\u306a\u306e\u3067\u6642\u3005\u88dc\u6b63\u304c\u5fc5\u8981\u3067\u30014000MS\u79d2\u6bce\u306b\u88dc\u6b63\u3092\u884c\u3046\u3068\u3044\u3046\u610f\u5473\u3002","title":"SOFTDEVICE_HANDLER_INIT(CLOCK_SOURCE, EVT_HANDLER)"},{"location":"6.iBeacon/dev_sd802/#ble_gap_conn_params_t","text":"min_conn_interval / max_conn_interval Central\u304cPeripheral\u306b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u306b\u884c\u304f\u9593\u9694\u30027.5ms~4s\u3002 slave_latency \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306b\u63a5\u7d9a\u3092\u7121\u8996\u3067\u304d\u308b\u56de\u6570\u3002 conn_sup_timeout \u63a5\u7d9a\u304c\u5207\u308c\u305f\u3068\u5224\u65ad\u3059\u308b\u307e\u3067\u306e\u6642\u9593\u3002","title":"ble_gap_conn_params_t"},{"location":"6.iBeacon/dev_sd802/#basic-rateenchanced-data-ratebredr","text":"BLE\u3058\u3083\u306a\u3044\u666e\u901a\u306eBluetooth\u3002","title":"Basic Rate/Enchanced Data Rate\uff08BR/EDR\uff09"},{"location":"6.iBeacon/dev_sd802/#user-information-configuration-registers-uicr","text":"\u8a2d\u5b9a\u5024\u3092\u56fa\u5b9a\u30ec\u30b8\u30b9\u30bf\u306b\u66f8\u3044\u3066\u304a\u304f\u3053\u3068\u3067\u30d3\u30eb\u30c9\u4e0d\u8981\u3067\u8a2d\u5b9a\u5024\u3092\u5909\u66f4\u3059\u308b\u4ed5\u7d44\u307f\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002 uint32_t UICR_ADDR_0x80 __attribute__((at(0x10001080))) __attribute__((used)) = 0x12345678; \u3053\u306e\u5024\u3092J-Link\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u4e8b\u3067\u66f8\u304d\u63db\u3048\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002 nrfjprog --snr <Segger-chip-Serial-Number> --memwr 0x10001080 --val 0xabcd0102","title":"User Information Configuration Registers (UICR)"},{"location":"6.iBeacon/e.advstart/","text":"Advertising\u306e\u958b\u59cb Define\u306e\u5b9a\u7fa9 1 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) /**< The advertising interval for non-connectable advertisement (100 ms). This value can vary between 100ms to 10.24s). */ Advertising\u306e\u958b\u59cb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /**@brief Function for starting advertising. */ static void advertising_start ( void ) { uint32_t err_code ; ble_gap_adv_params_t adv_params ; // Start advertising memset ( & adv_params , 0 , sizeof ( adv_params )); adv_params . type = BLE_GAP_ADV_TYPE_ADV_NONCONN_IND ; // ADV_NONCONN_IND adv_params . p_peer_addr = NULL ; adv_params . fp = BLE_GAP_ADV_FP_ANY ; adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; // \u767a\u4fe1\u5468\u671f adv_params . timeout = 0 ; err_code = sd_ble_gap_adv_start ( & adv_params ); APP_ERROR_CHECK ( err_code ); // Advertising\u958b\u59cb\u5f8c\u306bLED3\u3092\u70b9\u706f bsp_board_led_on ( LED3 ); } ble_gap_adv_params_t sd_ble_gap_adv_start \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #include \"ble.h\" #include \"ble_hci.h\" #include \"ble_srv_common.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" #include \"ble_lbs.h\" #include \"ble_gap.h\" #include \"softdevice_handler.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 #define CENTRAL_LINK_COUNT 0 #define PERIPHERAL_LINK_COUNT 1 #define APP_COMPANY_IDENTIFIER 0x002C // Apple #define APP_BEACON_INFO_LENGTH 0x17 // Beacon\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055 #define APP_BEACON_TYPE 0x02, 0x15 // Beacon\u306e\u30bf\u30a4\u30d7 #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 // iBeacon\u306eUUID #define APP_MAJOR_VALUE 0x01, 0x02 // iBeacon\u306eMajor #define APP_MINOR_VALUE 0x03, 0x04 // iBeacon\u306eMinor #define APP_MEASURED_RSSI 0xC3 // RSSI\u51fa\u529b\u306e\u8a08\u6e2c\u5024 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) /**< The advertising interval for non-connectable advertisement (100 ms). This value can vary between 100ms to 10.24s). */ static uint8_t m_beacon_info [ APP_BEACON_INFO_LENGTH ] = // iBeacon\u306eAdvertising Data { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; /**@brief Error */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for the Power Manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /**@brief Function for dispatching a BLE stack event. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for initializing the BLE stack. */ static void ble_stack_init ( void ) { // SoftDevice\u306e\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f\u7b49\u306e\u8a2d\u5b9a uint32_t err_code ; nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC ; SOFTDEVICE_HANDLER_INIT ( & clock_lf_cfg , NULL ); // Default\u306eConfig\u3092\u53d6\u5f97 ble_enable_params_t ble_enable_params ; err_code = softdevice_enable_get_default_config ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT , & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // RAM\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af CHECK_RAM_START_ADDR ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT ); // BLE Stack\u3092Enable\u306b err_code = softdevice_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // Event\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332 err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // Init\u5b8c\u4e86\u6642\u306bLED1\u3092\u70b9\u706f\u3055\u305b\u308b\u3002 bsp_board_led_on ( LED1 ); } /**@brief Function for initializing the Advertising functionality. */ static void advertising_init ( void ) { uint32_t err_code ; // AdvData\u306eManufacture Specific\u306e\u9818\u57df\u306e\u5024\u306e\u5b9a\u7fa9. ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; // AdvData\u3092\u69cb\u7bc9. ble_advdata_t advdata ; memset ( & advdata , 0 , sizeof ( advdata )); // AdvData\u306e\u8a2d\u5b9a. advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; // Manufacture Specific\u306e\u5024\u3092\u8a2d\u5b9a. advdata . p_manuf_specific_data = & manuf_specific_data ; // AdvData\u3092\u767b\u9332. err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); // AdvData\u8a2d\u5b9a\u5f8c\u306bLED2\u3092\u70b9\u706f bsp_board_led_on ( LED2 ); } /**@brief Function for starting advertising. */ static void advertising_start ( void ) { uint32_t err_code ; ble_gap_adv_params_t adv_params ; // Start advertising memset ( & adv_params , 0 , sizeof ( adv_params )); adv_params . type = BLE_GAP_ADV_TYPE_ADV_NONCONN_IND ; // ADV_NONCONN_IND adv_params . p_peer_addr = NULL ; adv_params . fp = BLE_GAP_ADV_FP_ANY ; adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; // \u767a\u4fe1\u5468\u671f adv_params . timeout = 0 ; err_code = sd_ble_gap_adv_start ( & adv_params ); APP_ERROR_CHECK ( err_code ); // Advertising\u958b\u59cb\u5f8c\u306bLED3\u3092\u70b9\u706f bsp_board_led_on ( LED3 ); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); leds_init (); ble_stack_init (); advertising_init (); advertising_start (); // Enter main loop. for (;;) { if ( NRF_LOG_PROCESS () == false ) { power_manage (); } } } /** * @} */","title":"Advertising\u306e\u958b\u59cb"},{"location":"6.iBeacon/e.advstart/#advertising","text":"","title":"Advertising\u306e\u958b\u59cb"},{"location":"6.iBeacon/e.advstart/#define","text":"1 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) /**< The advertising interval for non-connectable advertisement (100 ms). This value can vary between 100ms to 10.24s). */","title":"Define\u306e\u5b9a\u7fa9"},{"location":"6.iBeacon/e.advstart/#advertising_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /**@brief Function for starting advertising. */ static void advertising_start ( void ) { uint32_t err_code ; ble_gap_adv_params_t adv_params ; // Start advertising memset ( & adv_params , 0 , sizeof ( adv_params )); adv_params . type = BLE_GAP_ADV_TYPE_ADV_NONCONN_IND ; // ADV_NONCONN_IND adv_params . p_peer_addr = NULL ; adv_params . fp = BLE_GAP_ADV_FP_ANY ; adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; // \u767a\u4fe1\u5468\u671f adv_params . timeout = 0 ; err_code = sd_ble_gap_adv_start ( & adv_params ); APP_ERROR_CHECK ( err_code ); // Advertising\u958b\u59cb\u5f8c\u306bLED3\u3092\u70b9\u706f bsp_board_led_on ( LED3 ); } ble_gap_adv_params_t sd_ble_gap_adv_start","title":"Advertising\u306e\u958b\u59cb"},{"location":"6.iBeacon/e.advstart/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 #include <stdbool.h> #include <stdint.h> #include <string.h> #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsp.h\" #include \"ble.h\" #include \"ble_hci.h\" #include \"ble_srv_common.h\" #include \"ble_advdata.h\" #include \"ble_conn_params.h\" #include \"ble_lbs.h\" #include \"ble_gap.h\" #include \"softdevice_handler.h\" #define LED1 BSP_BOARD_LED_0 #define LED2 BSP_BOARD_LED_1 #define LED3 BSP_BOARD_LED_2 #define LED4 BSP_BOARD_LED_3 #define CENTRAL_LINK_COUNT 0 #define PERIPHERAL_LINK_COUNT 1 #define APP_COMPANY_IDENTIFIER 0x002C // Apple #define APP_BEACON_INFO_LENGTH 0x17 // Beacon\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055 #define APP_BEACON_TYPE 0x02, 0x15 // Beacon\u306e\u30bf\u30a4\u30d7 #define APP_BEACON_UUID 0x01, 0x12, 0x23, 0x34, \\ 0x45, 0xaa, 0x67, 0x78, \\ 0x89, 0xba, 0x13, 0xbc, \\ 0x33, 0x1a, 0x22, 0xf0 // iBeacon\u306eUUID #define APP_MAJOR_VALUE 0x01, 0x02 // iBeacon\u306eMajor #define APP_MINOR_VALUE 0x03, 0x04 // iBeacon\u306eMinor #define APP_MEASURED_RSSI 0xC3 // RSSI\u51fa\u529b\u306e\u8a08\u6e2c\u5024 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) /**< The advertising interval for non-connectable advertisement (100 ms). This value can vary between 100ms to 10.24s). */ static uint8_t m_beacon_info [ APP_BEACON_INFO_LENGTH ] = // iBeacon\u306eAdvertising Data { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; /**@brief Error */ void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { NRF_LOG_INFO ( \"id:0x%x \\r\\n \" , id ) NRF_LOG_INFO ( \"info:0x%x \\r\\n \" , pc ) NRF_LOG_INFO ( \"pc:0x%x \\r\\n \" , info ); NRF_LOG_FLUSH (); NVIC_SystemReset (); } /**@brief Function for the LEDs initialization. * * @details Initializes all LEDs used by the application. */ static void leds_init ( void ) { bsp_board_leds_init (); } /**@brief Function for the Power Manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } /**@brief Function for dispatching a BLE stack event. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for initializing the BLE stack. */ static void ble_stack_init ( void ) { // SoftDevice\u306e\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f\u7b49\u306e\u8a2d\u5b9a uint32_t err_code ; nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC ; SOFTDEVICE_HANDLER_INIT ( & clock_lf_cfg , NULL ); // Default\u306eConfig\u3092\u53d6\u5f97 ble_enable_params_t ble_enable_params ; err_code = softdevice_enable_get_default_config ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT , & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // RAM\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af CHECK_RAM_START_ADDR ( CENTRAL_LINK_COUNT , PERIPHERAL_LINK_COUNT ); // BLE Stack\u3092Enable\u306b err_code = softdevice_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // Event\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332 err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // Init\u5b8c\u4e86\u6642\u306bLED1\u3092\u70b9\u706f\u3055\u305b\u308b\u3002 bsp_board_led_on ( LED1 ); } /**@brief Function for initializing the Advertising functionality. */ static void advertising_init ( void ) { uint32_t err_code ; // AdvData\u306eManufacture Specific\u306e\u9818\u57df\u306e\u5024\u306e\u5b9a\u7fa9. ble_advdata_manuf_data_t manuf_specific_data ; manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * ) m_beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; // AdvData\u3092\u69cb\u7bc9. ble_advdata_t advdata ; memset ( & advdata , 0 , sizeof ( advdata )); // AdvData\u306e\u8a2d\u5b9a. advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; // Manufacture Specific\u306e\u5024\u3092\u8a2d\u5b9a. advdata . p_manuf_specific_data = & manuf_specific_data ; // AdvData\u3092\u767b\u9332. err_code = ble_advdata_set ( & advdata , NULL ); APP_ERROR_CHECK ( err_code ); // AdvData\u8a2d\u5b9a\u5f8c\u306bLED2\u3092\u70b9\u706f bsp_board_led_on ( LED2 ); } /**@brief Function for starting advertising. */ static void advertising_start ( void ) { uint32_t err_code ; ble_gap_adv_params_t adv_params ; // Start advertising memset ( & adv_params , 0 , sizeof ( adv_params )); adv_params . type = BLE_GAP_ADV_TYPE_ADV_NONCONN_IND ; // ADV_NONCONN_IND adv_params . p_peer_addr = NULL ; adv_params . fp = BLE_GAP_ADV_FP_ANY ; adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; // \u767a\u4fe1\u5468\u671f adv_params . timeout = 0 ; err_code = sd_ble_gap_adv_start ( & adv_params ); APP_ERROR_CHECK ( err_code ); // Advertising\u958b\u59cb\u5f8c\u306bLED3\u3092\u70b9\u706f bsp_board_led_on ( LED3 ); } /**@brief Function for application main entry. */ int main ( void ) { ret_code_t err_code ; err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); leds_init (); ble_stack_init (); advertising_init (); advertising_start (); // Enter main loop. for (;;) { if ( NRF_LOG_PROCESS () == false ) { power_manage (); } } } /** * @} */","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"},{"location":"6.iBeacon/ibeadondevice/","text":"iBeacon\u30c7\u30d0\u30a4\u30b9 | \u5546\u54c1\u540d | Maker\u3000| \u30c7\u30fc\u30bf\u30b7\u30fc\u30c8|BLE Module | \u96fb\u6c60 | | -- | -- | -- |-- | | IBKS105 | accent systems | URL ||CR2477| | AprilBeacon 242 | April Browser ||CC2541|CR2477| | BarBlue Beacon | BlueSense Network | |BLE113|CR2450| | Estimote Beacon | Estimote ||nRF51822|CR2450| | Gimabl Series 21 | Gimbal ||\u72ec\u81ea|\u53583 4\u672c| | Bluetooth Beacon | Kontact.io ||nRF51822|CR2477| | Particle | KSTechnology | URL ||CR2032| | MiniBeacon | MiNew |||| | Model X | ROXIMITY |||\u53583 3\u672c| | RadBeacon | RadiusNetwork |||| | RecoBeacon | Reco |||| | RedBear | RedBear |||| | tod | AERO |||| | MyBeacon | Aplix |||| | EMBC02 | EM Microelectronics |||CR2032| | LinkTaggaer ||||| | BeaconPlus | pinMicro ||||| \u53c2\u8003\u306b\u306a\u308b\u60c5\u5831 Beacon\u6bd4\u8f03 \u4e2d\u83efBeacon","title":"iBeacon\u30c7\u30d0\u30a4\u30b9"},{"location":"6.iBeacon/ibeadondevice/#ibeacon","text":"| \u5546\u54c1\u540d | Maker\u3000| \u30c7\u30fc\u30bf\u30b7\u30fc\u30c8|BLE Module | \u96fb\u6c60 | | -- | -- | -- |-- | | IBKS105 | accent systems | URL ||CR2477| | AprilBeacon 242 | April Browser ||CC2541|CR2477| | BarBlue Beacon | BlueSense Network | |BLE113|CR2450| | Estimote Beacon | Estimote ||nRF51822|CR2450| | Gimabl Series 21 | Gimbal ||\u72ec\u81ea|\u53583 4\u672c| | Bluetooth Beacon | Kontact.io ||nRF51822|CR2477| | Particle | KSTechnology | URL ||CR2032| | MiniBeacon | MiNew |||| | Model X | ROXIMITY |||\u53583 3\u672c| | RadBeacon | RadiusNetwork |||| | RecoBeacon | Reco |||| | RedBear | RedBear |||| | tod | AERO |||| | MyBeacon | Aplix |||| | EMBC02 | EM Microelectronics |||CR2032| | LinkTaggaer ||||| | BeaconPlus | pinMicro |||||","title":"iBeacon\u30c7\u30d0\u30a4\u30b9"},{"location":"6.iBeacon/ibeadondevice/#_1","text":"Beacon\u6bd4\u8f03 \u4e2d\u83efBeacon","title":"\u53c2\u8003\u306b\u306a\u308b\u60c5\u5831"},{"location":"6.iBeacon/memo/","text":"\u30e1\u30e2 \u5dee\u5206 app_timer.h nRF_libraries: 3.0.1 1 APP_TIMER_INIT(PRESCALER, MAX_TIMERS, OP_QUEUES_SIZE, USE_SCHEDULER) https://devzone.nordicsemi.com/documentation/nrf51/6.1.0/s110/html/a00682.html#ga9eb4ec72345e8b61aa833ee299a788fe nRF_libraries: 3.1.0(SDK10) 1 APP_TIMER_INIT(PRESCALER,OP_QUEUES_SIZE,SCHEDULER_FUNC); APP_TIMER_INT\u30de\u30af\u30ed\u306eMAX_TIMES\u5909\u6570\u304c\u5ec3\u6b62\u3002 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v10.0.0%2Fgroup__app__timer.html&anchor=ga63243f2b20523cb832fe0bf3d56c1bc9 sd_app_evt_wait sd_app_evt_wait\u306f\u3001#include \"nrf_sdm.h\"\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002 type BLE_UUID_TYPE_VENDOR_BEGIN\u306f\u3001S110\u306eSDK 8\u306eble_types.h\u3067\u5b9a\u7fa9 https://developer.nordicsemi.com/nRF51_SDK/nRF51_SDK_v8.x.x/doc/8.0.0/s110/html/a00864.html Service UUID definitions Service UUID definitions ble_srv_common.h \u3067\u5b9a\u7fa9 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v10.0.0%2Fgroup u u_i_d _s_e_r_v_i_c_e_s.html&resultof=%22Service%22%20%22servic%22%20%22UUID%22%20%22uuid%22%20%22definitions%22%20%22definit%22%20","title":"\u30e1\u30e2"},{"location":"6.iBeacon/memo/#_1","text":"","title":"\u30e1\u30e2"},{"location":"6.iBeacon/memo/#app_timerh","text":"nRF_libraries: 3.0.1 1 APP_TIMER_INIT(PRESCALER, MAX_TIMERS, OP_QUEUES_SIZE, USE_SCHEDULER) https://devzone.nordicsemi.com/documentation/nrf51/6.1.0/s110/html/a00682.html#ga9eb4ec72345e8b61aa833ee299a788fe nRF_libraries: 3.1.0(SDK10) 1 APP_TIMER_INIT(PRESCALER,OP_QUEUES_SIZE,SCHEDULER_FUNC); APP_TIMER_INT\u30de\u30af\u30ed\u306eMAX_TIMES\u5909\u6570\u304c\u5ec3\u6b62\u3002 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v10.0.0%2Fgroup__app__timer.html&anchor=ga63243f2b20523cb832fe0bf3d56c1bc9","title":"\u5dee\u5206 app_timer.h"},{"location":"6.iBeacon/memo/#sd_app_evt_wait","text":"sd_app_evt_wait\u306f\u3001#include \"nrf_sdm.h\"\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002","title":"sd_app_evt_wait"},{"location":"6.iBeacon/memo/#type","text":"BLE_UUID_TYPE_VENDOR_BEGIN\u306f\u3001S110\u306eSDK 8\u306eble_types.h\u3067\u5b9a\u7fa9 https://developer.nordicsemi.com/nRF51_SDK/nRF51_SDK_v8.x.x/doc/8.0.0/s110/html/a00864.html","title":"type"},{"location":"6.iBeacon/memo/#service-uuid-definitions","text":"Service UUID definitions ble_srv_common.h \u3067\u5b9a\u7fa9 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v10.0.0%2Fgroup u u_i_d _s_e_r_v_i_c_e_s.html&resultof=%22Service%22%20%22servic%22%20%22UUID%22%20%22uuid%22%20%22definitions%22%20%22definit%22%20","title":"Service UUID definitions"},{"location":"6.iBeacon/nrf51memo/","text":"\u30e1\u30e2 \u5dee\u5206 app_timer.h nRF_libraries: 3.0.1 1 APP_TIMER_INIT(PRESCALER, MAX_TIMERS, OP_QUEUES_SIZE, USE_SCHEDULER) https://devzone.nordicsemi.com/documentation/nrf51/6.1.0/s110/html/a00682.html#ga9eb4ec72345e8b61aa833ee299a788fe nRF_libraries: 3.1.0(SDK10) 1 APP_TIMER_INIT(PRESCALER,OP_QUEUES_SIZE,SCHEDULER_FUNC); APP_TIMER_INT\u30de\u30af\u30ed\u306eMAX_TIMES\u5909\u6570\u304c\u5ec3\u6b62\u3002 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v10.0.0%2Fgroup__app__timer.html&anchor=ga63243f2b20523cb832fe0bf3d56c1bc9 sd_app_evt_wait sd_app_evt_wait\u306f\u3001#include \"nrf_sdm.h\"\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002 type BLE_UUID_TYPE_VENDOR_BEGIN\u306f\u3001S110\u306eSDK 8\u306eble_types.h\u3067\u5b9a\u7fa9 https://developer.nordicsemi.com/nRF51_SDK/nRF51_SDK_v8.x.x/doc/8.0.0/s110/html/a00864.html Service UUID definitions Service UUID definitions ble_srv_common.h \u3067\u5b9a\u7fa9 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v10.0.0%2Fgroup u u_i_d _s_e_r_v_i_c_e_s.html&resultof=%22Service%22%20%22servic%22%20%22UUID%22%20%22uuid%22%20%22definitions%22%20%22definit%22%20","title":"\u30e1\u30e2"},{"location":"6.iBeacon/nrf51memo/#_1","text":"","title":"\u30e1\u30e2"},{"location":"6.iBeacon/nrf51memo/#app_timerh","text":"nRF_libraries: 3.0.1 1 APP_TIMER_INIT(PRESCALER, MAX_TIMERS, OP_QUEUES_SIZE, USE_SCHEDULER) https://devzone.nordicsemi.com/documentation/nrf51/6.1.0/s110/html/a00682.html#ga9eb4ec72345e8b61aa833ee299a788fe nRF_libraries: 3.1.0(SDK10) 1 APP_TIMER_INIT(PRESCALER,OP_QUEUES_SIZE,SCHEDULER_FUNC); APP_TIMER_INT\u30de\u30af\u30ed\u306eMAX_TIMES\u5909\u6570\u304c\u5ec3\u6b62\u3002 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v10.0.0%2Fgroup__app__timer.html&anchor=ga63243f2b20523cb832fe0bf3d56c1bc9","title":"\u5dee\u5206 app_timer.h"},{"location":"6.iBeacon/nrf51memo/#sd_app_evt_wait","text":"sd_app_evt_wait\u306f\u3001#include \"nrf_sdm.h\"\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002","title":"sd_app_evt_wait"},{"location":"6.iBeacon/nrf51memo/#type","text":"BLE_UUID_TYPE_VENDOR_BEGIN\u306f\u3001S110\u306eSDK 8\u306eble_types.h\u3067\u5b9a\u7fa9 https://developer.nordicsemi.com/nRF51_SDK/nRF51_SDK_v8.x.x/doc/8.0.0/s110/html/a00864.html","title":"type"},{"location":"6.iBeacon/nrf51memo/#service-uuid-definitions","text":"Service UUID definitions ble_srv_common.h \u3067\u5b9a\u7fa9 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v10.0.0%2Fgroup u u_i_d _s_e_r_v_i_c_e_s.html&resultof=%22Service%22%20%22servic%22%20%22UUID%22%20%22uuid%22%20%22definitions%22%20%22definit%22%20","title":"Service UUID definitions"},{"location":"6.iBeacon/serialization/","text":"Serialization \u6982\u8981 nRF51\u306b\u76f4\u63a5\u5b9f\u88c5\u305b\u305a\u306b\u5916\u90e8MCU\u306a\u3069\u304b\u3089\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u5236\u5fa1\u3059\u308b\u65b9\u5f0f\u3092BLE serialization\u3068\u547c\u3076\u3002 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u65b9\u6cd5\u306f\u958b\u767a\u30dc\u30fc\u30c9\u3092\u4e8c\u53f0\u63a5\u7d9a\u3057\u3066\u3001ApplicationBoard\uff08\u5236\u5fa1\u3059\u308b\u5074\uff09\u3068ConnectivityBoard\uff08\u5236\u5fa1\u3055\u308c\u308b\u5074\uff09\u306b\u5206\u3051\u3066\u5b9f\u88c5\u3092\u884c\u3046\u65b9\u6cd5\u306b\u306a\u308b\u3002 \u5b9f\u969b\u306fApplicationBoard\u5074\u306fnRF51\u3092\u4f7f\u7528\u305b\u305a\u306bARM\u3092\u76f4\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u306a\u308b\u306f\u305a\u3002 \u63a5\u7d9a\u306fUART, SPI, HCI\u304c\u5229\u7528\u3067\u304d\u308b\u3002 ApplicationBoard\u3067\u306fSoftdevice\u3092\u4f7f\u7528\u3057\u306a\u3044\u304c\u5c02\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u308aSoftdevice\u3092\u4f7f\u7528\u3057\u305f\u6642\u3068\u540c\u3058\u30b3\u30fc\u30c9\u3067ConnectivityBoard\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 ConnectivityBoard\u306b\u306f\u3001Softdevice\u3068\u63a5\u7d9a\u7528\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002 Arduino\u3068\u3064\u306a\u3050 Arduino\u3092ApplicationBoard\u3068\u3057\u3066\u3064\u306a\u3050\u5834\u5408\u306f\u5c02\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5229\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u76f4\u306b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002 \u307e\u305f\u3001Arduino\u306f\u30d5\u30ed\u30fc\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u304c\u3067\u304d\u306a\u3044\u306a\u3069\u3001\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u306e\u8a2d\u5b9a\u3082\u5909\u3048\u308b\u5fc5\u8981\u3082\u3042\u308b\u3002 \u63a5\u7d9a\u30a2\u30d7\u30ea\u306e\u30b3\u30f3\u30d1\u30a4\u30eb \u63a5\u7d9a\u30a2\u30d7\u30ea\u306f\u30b3\u30fc\u30c9\u91cf\u304c\u591a\u3044\u306e\u3067Keil\u306e\u7121\u6599\u7248\u3067\u3070\u30d3\u30eb\u30c9\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306fGCC\u3092\u7528\u3044\u307e\u3059\u3002 \u3053\u3061\u3089 \u304b\u3089Arm\u7528\u306eGCC\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u4efb\u610f\u306e\u5834\u6240\u3078\u7f6e\u304f\u3002 \u4e0b\u8a18\u306eGNU_INSTALL_ROOT\u306bGCC\u306e\u5834\u6240\u3092\u8a18\u8f09\u3059\u308b\u3002 [SDK]/components/toolchain/gcc/Makefile.posix \u4e0b\u8a18\u306e\u30d8\u30c3\u30c0\u306b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u306e\u8a2d\u5b9a\u304c\u3042\u308b\u306e\u3067\u3001Arduino\u306b\u5408\u308f\u305b\u305f\u8a2d\u5b9a\u306b\u3059\u308b\u3002 [SDK]/components/serialization/common/ser_config.h ``` /* UART transmission parameters / //#define SER_PHY_UART_FLOW_CTRL APP_UART_FLOW_CONTROL_ENABLED //#define SER_PHY_UART_PARITY true //#define SER_PHY_UART_BAUDRATE UART_BAUDRATE_BAUDRATE_Baud1M define SER_PHY_UART_FLOW_CTRL APP_UART_FLOW_CONTROL_DISABLED define SER_PHY_UART_PARITY false define SER_PHY_UART_BAUDRATE UART_BAUDRATE_BAUDRATE_Baud115200 ``` \u63a5\u7d9a\u30a2\u30d7\u30ea\u306f\u5229\u7528\u3059\u308bSoftdevice\u6bce\u306b\u4e0b\u8a18\u30d5\u30a9\u30eb\u30c0\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u79fb\u52d5\u3057\u3066make\u3092\u5b9f\u884c\u3059\u308b\u3068hex\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u308b\u3002 [SDK]/examples/ble_central_and_peripheral/ble_connectivity [S130] [SDK]/examples/ble_peripheral/ble_connectivity [S110] [SDK]/examples/ble_central/ble_connectivity [S120] \u958b\u767a\u30dc\u30fc\u30c9\u306bSoftdevice\u3068\u5148\u307b\u3069\u306ehex\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u3080\u3002 \u63a5\u7d9a \u8868\u306e\u901a\u308a\u306bGPIO\u3092\u63a5\u7d9a\u3059\u308b\u3002 \u958b\u767a\u30dc\u30fc\u30c9 Arduino GND GND P0.12 P2 P0.13 P3 Arduino\u30d7\u30ed\u30b0\u30e9\u30e0 iBeacon\u3092\u767a\u4fe1\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002 ``` include SoftwareSerial serial(2, 3); int state = 0; int count = 0; void setup() { // BLE\u3068\u306e\u901a\u4fe1\u7528 serial.begin(115200); // \u30ed\u30b0\u51fa\u529b\u7528 Serial.begin(9600); Serial.write(\"*Start!\\n\"); // BLE\u3092\u6709\u52b9\u5316 Serial.write(\"sd_ble_enable()\\n\"); sd_ble_enable(); } void loop() { while (serial.available()) { Serial.print(serial.read(), HEX); if (count++ > 6) { Serial.write(\"\\n\"); count = 0; switch(state++) { case 0: Serial.write(\" sd_ble_gap_adv_data_set()\\n\"); sd_ble_gap_adv_data_set(); break; case 1: Serial.write(\" sd_ble_gap_adv_start()\\n\"); sd_ble_gap_adv_start(); break; case 2: Serial.write(\"*Finish!\\n\"); break; } } else { Serial.write(\",\"); } } } // \u30c7\u30fc\u30bf\u9001\u4fe1 void send_data(byte *data) { int len = data[0] + 2; for (int i=0; i<len; i++) { serial.write(data[i]); } } // BLE\u3092\u6709\u52b9\u5316 void sd_ble_enable() { byte data[] = { // \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba 0x08, 0x00, // \u30bf\u30a4\u30d7\uff080:\u30b3\u30de\u30f3\u30c9, 1:\u30ec\u30b9\u30dd\u30f3\u30b9\uff09 0x00, // \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 0x60, // \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }; send_data(data); } // Advertising\u306e\u30c7\u30fc\u30bf\u3092\u8a2d\u5b9a void sd_ble_gap_adv_data_set() { byte data[] = { 0x24, 0x00, 0x00, 0x72, 0x1e, 0x01, // Header 0x02, 0x01, 0x06, 0x1a, 0xff, 0x4c, 0x00, 0x02, 0x15, // UUID 0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xf0, // Major 0x01, 0x02, // Minor 0x03, 0x4, 0xc3, 0x00, 0x00}; send_data(data); } // Advertising\u958b\u59cb void sd_ble_gap_adv_start() { byte data[] = { 0x0c, 0x00, 0x00, 0x73, 0x01, // ADV_NONCONN_IND 0x03, 0x00, 0x00, 0x00, // Interval(0.625 ms units) 0xa0, 0x00, 0x00, 0x00, 0x00}; send_data(data); } ``` \u30d1\u30b1\u30c3\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u4f8b\uff09sd_ble_enable\u306e\u30d1\u30b1\u30c3\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u4ed6\u306e\u30d1\u30b1\u30c3\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f \u3053\u3061\u3089 \u30b5\u30a4\u30ba \u30bf\u30a4\u30d7 \u30b3\u30de\u30f3\u30c9 \u30b3\u30de\u30f3\u30c9 \u30d1\u30e9\u30e1\u30fc\u30bf 2Byte 1byte 1byte 1byte 5byte 0x08, 0x00 0x00 0x60 0x01 0x00... \u4ee5\u964d8Byte \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 sd_ble_enable\u3092\u8868\u3059 BLE\u3092\u6709\u52b9\u5316\u3059\u308b 5byte byte data[] = { // \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba 0x08, 0x00, // \u30bf\u30a4\u30d7\uff080:\u30b3\u30de\u30f3\u30c9, 1:\u30ec\u30b9\u30dd\u30f3\u30b9\uff09 0x00, // \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 0x60, // \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }; \u30b9\u30ad\u30e3\u30f3\u3059\u308b \u6e96\u5099 Advertising\u30d1\u30b1\u30c3\u30c8\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u306b\u306f sd_ble_gap_scan_start \u3092\u5229\u7528\u3059\u308b\u3002 \u3053\u308c\u306fS110\u306e\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3067\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001S130\u3092\u66f8\u304d\u8fbc\u3080\u3002 Arduino\u30d7\u30ed\u30b0\u30e9\u30e0 ``` include SoftwareSerial serial(2, 3); int state = 0; int count = 0; uint8_t buff[255]; int buff_pos = 0; int data_len = 0; int data_com = 0; void setup() { // BLE\u3068\u306e\u901a\u4fe1\u7528 serial.begin(115200); // \u30ed\u30b0\u51fa\u529b\u7528 Serial.begin(38400); Serial.write(\"*Start!\\n\"); // BLE\u3092\u6709\u52b9\u5316 Serial.write(\"sd_ble_enable()\\n\"); sd_ble_enable(); } // \u30d1\u30b1\u30c3\u30c8\u306e\u5185\u5bb9\u3092\u30d1\u30fc\u30b9 void parse(uint8_t data) { buff[buff_pos++] = data; if (buff_pos == 2) { data_len = buff[0] + (buff[1] << 8); Serial.write(\"len:\"); Serial.print(data_len, DEC); Serial.write(\"\\n\"); } if (buff_pos == 3) { Serial.write(\"type:\"); Serial.print(data, HEX); Serial.write(\"\\n\"); } if (buff_pos == 4) { data_com = data; Serial.write(\"command:\"); Serial.print(data, HEX); Serial.write(\"\\n\"); } if (buff_pos > 4) { Serial.print(data, HEX); } else { return; } if (data_len == buff_pos -2) { buff_pos = 0; data_len = 0; state++; Serial.write(\"\\n\"); } else { Serial.write(\",\"); } } void loop() { if (serial.overflow()) { // SoftwareSerial\u306f\u30d0\u30c3\u30d5\u30a1\u304c64byte\u3057\u304b\u306a\u304f\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u56de\u907f\u7b56\u304c\u5fc5\u8981\u3002 Serial.println(\"\\nSoftwareSerial overflow!\"); delay(100); exit(1); } while (serial.available()) { parse(serial.read()); if (state == 1 && buff_pos == 0) { Serial.println(\"sd_ble_gap_scan_start()\"); sd_ble_gap_scan_start(); } } } // \u30c7\u30fc\u30bf\u9001\u4fe1 void send_data(byte *data) { int len = data[0] + 2; for (int i=0; i<len; i++) { serial.write(data[i]); } } // BLE\u3092\u6709\u52b9\u5316 void sd_ble_enable() { byte data[] = { // \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba 0x08, 0x00, // \u30bf\u30a4\u30d7\uff080:\u30b3\u30de\u30f3\u30c9, 1:\u30ec\u30b9\u30dd\u30f3\u30b9\uff09 0x00, // \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 0x60, // \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }; send_data(data); } // Scan\u958b\u59cb void sd_ble_gap_scan_start() { byte data[] = { // \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba 0x0b, 0x00, // \u30bf\u30a4\u30d7\uff080:\u30b3\u30de\u30f3\u30c9, 1:\u30ec\u30b9\u30dd\u30f3\u30b9\uff09 0x00, // \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 0x86, // \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9 0x01, // present 0x00, // Active Scanning 0x00, // Whitelist 0x40, 0x06, // Interval(0.625 ms units) 0x50, 0x00, // Scan window(0.625 ms units) 0x00, 0x00 // Timeout(No timeout) }; send_data(data); } ``` \u6539\u826f SimpleFIFO \u3092\u5229\u7528\u3057\u3066SoftwareSerial\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u56de\u907f\u3059\u308b\u3002 ``` include SimpleFIFO sFIFO; // ~~\u7565~~ void loop() { // \u30b7\u30ea\u30a2\u30eb\u304b\u3089\u8aad\u307f\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u306f\u3059\u3050\u306bQueue\u306b\u5165\u308c\u308b while (serial.available()) { sFIFO.enqueue(serial.read()); } // \u30b7\u30ea\u30a2\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u304c\u7121\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u3059\u308b if (sFIFO.count() > 0) { parse(sFIFO.dequeue()); if (state == 1 && buff_pos == 0) { Serial.println(\"sd_ble_gap_scan_start()\"); sd_ble_gap_scan_start(); } } } ``` \u3088\u308a\u898b\u3084\u3059\u304f parse\u95a2\u6570\u306e\u5185\u5bb9\u3092\u5909\u66f4\u3057\u3066BLE_GAP_EVT_ADV_REPORT\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u3088\u308a\u8a73\u7d30\u306b\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u6539\u826f\u3002 ``` // ~~\u7565~~ if (buff_pos > 4) { if (data_com == 0x1b) { // BLE_GAP_EVT_ADV_REPORT if (buff_pos > 16) { Serial.print(data, HEX); } else if (buff_pos == 16) { Serial.write(\"handle:\"); Serial.print(buff[5], HEX); Serial.print(buff[6], HEX); Serial.write(\"\\n\"); Serial.write(\"type:\"); Serial.print(buff[7], HEX); Serial.write(\"\\n\"); Serial.write(\"address:\"); Serial.print(buff[8], HEX); Serial.print(buff[9], HEX); Serial.print(buff[10], HEX); Serial.print(buff[11], HEX); Serial.print(buff[12], HEX); Serial.print(buff[13], HEX); Serial.write(\"\\n\"); Serial.write(\"rssi:\"); Serial.print(buff[14], HEX); Serial.write(\"\\n\"); return; } else { return; } } else { Serial.print(data, HEX); } } else { return; } // ~~\u7565~~ ```","title":"Serialization"},{"location":"6.iBeacon/serialization/#serialization","text":"","title":"Serialization"},{"location":"6.iBeacon/serialization/#_1","text":"nRF51\u306b\u76f4\u63a5\u5b9f\u88c5\u305b\u305a\u306b\u5916\u90e8MCU\u306a\u3069\u304b\u3089\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u5236\u5fa1\u3059\u308b\u65b9\u5f0f\u3092BLE serialization\u3068\u547c\u3076\u3002 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u65b9\u6cd5\u306f\u958b\u767a\u30dc\u30fc\u30c9\u3092\u4e8c\u53f0\u63a5\u7d9a\u3057\u3066\u3001ApplicationBoard\uff08\u5236\u5fa1\u3059\u308b\u5074\uff09\u3068ConnectivityBoard\uff08\u5236\u5fa1\u3055\u308c\u308b\u5074\uff09\u306b\u5206\u3051\u3066\u5b9f\u88c5\u3092\u884c\u3046\u65b9\u6cd5\u306b\u306a\u308b\u3002 \u5b9f\u969b\u306fApplicationBoard\u5074\u306fnRF51\u3092\u4f7f\u7528\u305b\u305a\u306bARM\u3092\u76f4\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u306a\u308b\u306f\u305a\u3002 \u63a5\u7d9a\u306fUART, SPI, HCI\u304c\u5229\u7528\u3067\u304d\u308b\u3002 ApplicationBoard\u3067\u306fSoftdevice\u3092\u4f7f\u7528\u3057\u306a\u3044\u304c\u5c02\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u308aSoftdevice\u3092\u4f7f\u7528\u3057\u305f\u6642\u3068\u540c\u3058\u30b3\u30fc\u30c9\u3067ConnectivityBoard\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 ConnectivityBoard\u306b\u306f\u3001Softdevice\u3068\u63a5\u7d9a\u7528\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002","title":"\u6982\u8981"},{"location":"6.iBeacon/serialization/#arduino","text":"Arduino\u3092ApplicationBoard\u3068\u3057\u3066\u3064\u306a\u3050\u5834\u5408\u306f\u5c02\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5229\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u76f4\u306b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002 \u307e\u305f\u3001Arduino\u306f\u30d5\u30ed\u30fc\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u304c\u3067\u304d\u306a\u3044\u306a\u3069\u3001\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u306e\u8a2d\u5b9a\u3082\u5909\u3048\u308b\u5fc5\u8981\u3082\u3042\u308b\u3002","title":"Arduino\u3068\u3064\u306a\u3050"},{"location":"6.iBeacon/serialization/#_2","text":"\u63a5\u7d9a\u30a2\u30d7\u30ea\u306f\u30b3\u30fc\u30c9\u91cf\u304c\u591a\u3044\u306e\u3067Keil\u306e\u7121\u6599\u7248\u3067\u3070\u30d3\u30eb\u30c9\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306fGCC\u3092\u7528\u3044\u307e\u3059\u3002 \u3053\u3061\u3089 \u304b\u3089Arm\u7528\u306eGCC\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u4efb\u610f\u306e\u5834\u6240\u3078\u7f6e\u304f\u3002 \u4e0b\u8a18\u306eGNU_INSTALL_ROOT\u306bGCC\u306e\u5834\u6240\u3092\u8a18\u8f09\u3059\u308b\u3002 [SDK]/components/toolchain/gcc/Makefile.posix \u4e0b\u8a18\u306e\u30d8\u30c3\u30c0\u306b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u306e\u8a2d\u5b9a\u304c\u3042\u308b\u306e\u3067\u3001Arduino\u306b\u5408\u308f\u305b\u305f\u8a2d\u5b9a\u306b\u3059\u308b\u3002 [SDK]/components/serialization/common/ser_config.h ``` /* UART transmission parameters / //#define SER_PHY_UART_FLOW_CTRL APP_UART_FLOW_CONTROL_ENABLED //#define SER_PHY_UART_PARITY true //#define SER_PHY_UART_BAUDRATE UART_BAUDRATE_BAUDRATE_Baud1M","title":"\u63a5\u7d9a\u30a2\u30d7\u30ea\u306e\u30b3\u30f3\u30d1\u30a4\u30eb"},{"location":"6.iBeacon/serialization/#define-ser_phy_uart_flow_ctrl-app_uart_flow_control_disabled","text":"","title":"define SER_PHY_UART_FLOW_CTRL          APP_UART_FLOW_CONTROL_DISABLED"},{"location":"6.iBeacon/serialization/#define-ser_phy_uart_parity-false","text":"","title":"define SER_PHY_UART_PARITY             false"},{"location":"6.iBeacon/serialization/#define-ser_phy_uart_baudrate-uart_baudrate_baudrate_baud115200","text":"``` \u63a5\u7d9a\u30a2\u30d7\u30ea\u306f\u5229\u7528\u3059\u308bSoftdevice\u6bce\u306b\u4e0b\u8a18\u30d5\u30a9\u30eb\u30c0\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u79fb\u52d5\u3057\u3066make\u3092\u5b9f\u884c\u3059\u308b\u3068hex\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u308b\u3002 [SDK]/examples/ble_central_and_peripheral/ble_connectivity [S130] [SDK]/examples/ble_peripheral/ble_connectivity [S110] [SDK]/examples/ble_central/ble_connectivity [S120] \u958b\u767a\u30dc\u30fc\u30c9\u306bSoftdevice\u3068\u5148\u307b\u3069\u306ehex\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u3080\u3002","title":"define SER_PHY_UART_BAUDRATE           UART_BAUDRATE_BAUDRATE_Baud115200"},{"location":"6.iBeacon/serialization/#_3","text":"\u8868\u306e\u901a\u308a\u306bGPIO\u3092\u63a5\u7d9a\u3059\u308b\u3002 \u958b\u767a\u30dc\u30fc\u30c9 Arduino GND GND P0.12 P2 P0.13 P3","title":"\u63a5\u7d9a"},{"location":"6.iBeacon/serialization/#arduino_1","text":"iBeacon\u3092\u767a\u4fe1\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002 ```","title":"Arduino\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"6.iBeacon/serialization/#include","text":"SoftwareSerial serial(2, 3); int state = 0; int count = 0; void setup() { // BLE\u3068\u306e\u901a\u4fe1\u7528 serial.begin(115200); // \u30ed\u30b0\u51fa\u529b\u7528 Serial.begin(9600); Serial.write(\"*Start!\\n\"); // BLE\u3092\u6709\u52b9\u5316 Serial.write(\"sd_ble_enable()\\n\"); sd_ble_enable(); } void loop() { while (serial.available()) { Serial.print(serial.read(), HEX); if (count++ > 6) { Serial.write(\"\\n\"); count = 0; switch(state++) { case 0: Serial.write(\" sd_ble_gap_adv_data_set()\\n\"); sd_ble_gap_adv_data_set(); break; case 1: Serial.write(\" sd_ble_gap_adv_start()\\n\"); sd_ble_gap_adv_start(); break; case 2: Serial.write(\"*Finish!\\n\"); break; } } else { Serial.write(\",\"); } } } // \u30c7\u30fc\u30bf\u9001\u4fe1 void send_data(byte *data) { int len = data[0] + 2; for (int i=0; i<len; i++) { serial.write(data[i]); } } // BLE\u3092\u6709\u52b9\u5316 void sd_ble_enable() { byte data[] = { // \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba 0x08, 0x00, // \u30bf\u30a4\u30d7\uff080:\u30b3\u30de\u30f3\u30c9, 1:\u30ec\u30b9\u30dd\u30f3\u30b9\uff09 0x00, // \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 0x60, // \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }; send_data(data); } // Advertising\u306e\u30c7\u30fc\u30bf\u3092\u8a2d\u5b9a void sd_ble_gap_adv_data_set() { byte data[] = { 0x24, 0x00, 0x00, 0x72, 0x1e, 0x01, // Header 0x02, 0x01, 0x06, 0x1a, 0xff, 0x4c, 0x00, 0x02, 0x15, // UUID 0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xf0, // Major 0x01, 0x02, // Minor 0x03, 0x4, 0xc3, 0x00, 0x00}; send_data(data); } // Advertising\u958b\u59cb void sd_ble_gap_adv_start() { byte data[] = { 0x0c, 0x00, 0x00, 0x73, 0x01, // ADV_NONCONN_IND 0x03, 0x00, 0x00, 0x00, // Interval(0.625 ms units) 0xa0, 0x00, 0x00, 0x00, 0x00}; send_data(data); } ```","title":"include "},{"location":"6.iBeacon/serialization/#_4","text":"\u4f8b\uff09sd_ble_enable\u306e\u30d1\u30b1\u30c3\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u4ed6\u306e\u30d1\u30b1\u30c3\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f \u3053\u3061\u3089 \u30b5\u30a4\u30ba \u30bf\u30a4\u30d7 \u30b3\u30de\u30f3\u30c9 \u30b3\u30de\u30f3\u30c9 \u30d1\u30e9\u30e1\u30fc\u30bf 2Byte 1byte 1byte 1byte 5byte 0x08, 0x00 0x00 0x60 0x01 0x00... \u4ee5\u964d8Byte \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 sd_ble_enable\u3092\u8868\u3059 BLE\u3092\u6709\u52b9\u5316\u3059\u308b 5byte byte data[] = { // \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba 0x08, 0x00, // \u30bf\u30a4\u30d7\uff080:\u30b3\u30de\u30f3\u30c9, 1:\u30ec\u30b9\u30dd\u30f3\u30b9\uff09 0x00, // \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 0x60, // \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 };","title":"\u30d1\u30b1\u30c3\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"6.iBeacon/serialization/#_5","text":"","title":"\u30b9\u30ad\u30e3\u30f3\u3059\u308b"},{"location":"6.iBeacon/serialization/#_6","text":"Advertising\u30d1\u30b1\u30c3\u30c8\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u306b\u306f sd_ble_gap_scan_start \u3092\u5229\u7528\u3059\u308b\u3002 \u3053\u308c\u306fS110\u306e\u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u3067\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001S130\u3092\u66f8\u304d\u8fbc\u3080\u3002","title":"\u6e96\u5099"},{"location":"6.iBeacon/serialization/#arduino_2","text":"```","title":"Arduino\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"6.iBeacon/serialization/#include_1","text":"SoftwareSerial serial(2, 3); int state = 0; int count = 0; uint8_t buff[255]; int buff_pos = 0; int data_len = 0; int data_com = 0; void setup() { // BLE\u3068\u306e\u901a\u4fe1\u7528 serial.begin(115200); // \u30ed\u30b0\u51fa\u529b\u7528 Serial.begin(38400); Serial.write(\"*Start!\\n\"); // BLE\u3092\u6709\u52b9\u5316 Serial.write(\"sd_ble_enable()\\n\"); sd_ble_enable(); } // \u30d1\u30b1\u30c3\u30c8\u306e\u5185\u5bb9\u3092\u30d1\u30fc\u30b9 void parse(uint8_t data) { buff[buff_pos++] = data; if (buff_pos == 2) { data_len = buff[0] + (buff[1] << 8); Serial.write(\"len:\"); Serial.print(data_len, DEC); Serial.write(\"\\n\"); } if (buff_pos == 3) { Serial.write(\"type:\"); Serial.print(data, HEX); Serial.write(\"\\n\"); } if (buff_pos == 4) { data_com = data; Serial.write(\"command:\"); Serial.print(data, HEX); Serial.write(\"\\n\"); } if (buff_pos > 4) { Serial.print(data, HEX); } else { return; } if (data_len == buff_pos -2) { buff_pos = 0; data_len = 0; state++; Serial.write(\"\\n\"); } else { Serial.write(\",\"); } } void loop() { if (serial.overflow()) { // SoftwareSerial\u306f\u30d0\u30c3\u30d5\u30a1\u304c64byte\u3057\u304b\u306a\u304f\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u56de\u907f\u7b56\u304c\u5fc5\u8981\u3002 Serial.println(\"\\nSoftwareSerial overflow!\"); delay(100); exit(1); } while (serial.available()) { parse(serial.read()); if (state == 1 && buff_pos == 0) { Serial.println(\"sd_ble_gap_scan_start()\"); sd_ble_gap_scan_start(); } } } // \u30c7\u30fc\u30bf\u9001\u4fe1 void send_data(byte *data) { int len = data[0] + 2; for (int i=0; i<len; i++) { serial.write(data[i]); } } // BLE\u3092\u6709\u52b9\u5316 void sd_ble_enable() { byte data[] = { // \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba 0x08, 0x00, // \u30bf\u30a4\u30d7\uff080:\u30b3\u30de\u30f3\u30c9, 1:\u30ec\u30b9\u30dd\u30f3\u30b9\uff09 0x00, // \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 0x60, // \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }; send_data(data); } // Scan\u958b\u59cb void sd_ble_gap_scan_start() { byte data[] = { // \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba 0x0b, 0x00, // \u30bf\u30a4\u30d7\uff080:\u30b3\u30de\u30f3\u30c9, 1:\u30ec\u30b9\u30dd\u30f3\u30b9\uff09 0x00, // \u30b3\u30de\u30f3\u30c9\u30bf\u30a4\u30d7 0x86, // \u30b3\u30de\u30f3\u30c9\u306e\u5185\u5bb9 0x01, // present 0x00, // Active Scanning 0x00, // Whitelist 0x40, 0x06, // Interval(0.625 ms units) 0x50, 0x00, // Scan window(0.625 ms units) 0x00, 0x00 // Timeout(No timeout) }; send_data(data); } ```","title":"include "},{"location":"6.iBeacon/serialization/#_7","text":"SimpleFIFO \u3092\u5229\u7528\u3057\u3066SoftwareSerial\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u56de\u907f\u3059\u308b\u3002 ```","title":"\u6539\u826f"},{"location":"6.iBeacon/serialization/#include_2","text":"SimpleFIFO sFIFO; // ~~\u7565~~ void loop() { // \u30b7\u30ea\u30a2\u30eb\u304b\u3089\u8aad\u307f\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u306f\u3059\u3050\u306bQueue\u306b\u5165\u308c\u308b while (serial.available()) { sFIFO.enqueue(serial.read()); } // \u30b7\u30ea\u30a2\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u304c\u7121\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u3059\u308b if (sFIFO.count() > 0) { parse(sFIFO.dequeue()); if (state == 1 && buff_pos == 0) { Serial.println(\"sd_ble_gap_scan_start()\"); sd_ble_gap_scan_start(); } } } ```","title":"include "},{"location":"6.iBeacon/serialization/#_8","text":"parse\u95a2\u6570\u306e\u5185\u5bb9\u3092\u5909\u66f4\u3057\u3066BLE_GAP_EVT_ADV_REPORT\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u3088\u308a\u8a73\u7d30\u306b\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u6539\u826f\u3002 ``` // ~~\u7565~~ if (buff_pos > 4) { if (data_com == 0x1b) { // BLE_GAP_EVT_ADV_REPORT if (buff_pos > 16) { Serial.print(data, HEX); } else if (buff_pos == 16) { Serial.write(\"handle:\"); Serial.print(buff[5], HEX); Serial.print(buff[6], HEX); Serial.write(\"\\n\"); Serial.write(\"type:\"); Serial.print(buff[7], HEX); Serial.write(\"\\n\"); Serial.write(\"address:\"); Serial.print(buff[8], HEX); Serial.print(buff[9], HEX); Serial.print(buff[10], HEX); Serial.print(buff[11], HEX); Serial.print(buff[12], HEX); Serial.print(buff[13], HEX); Serial.write(\"\\n\"); Serial.write(\"rssi:\"); Serial.print(buff[14], HEX); Serial.write(\"\\n\"); return; } else { return; } } else { Serial.print(data, HEX); } } else { return; } // ~~\u7565~~ ```","title":"\u3088\u308a\u898b\u3084\u3059\u304f"},{"location":"6.iBeacon/soft/","text":"SoftDevice\u3092\u6709\u52b9\u306b\u3059\u308b Nordic\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bnRF5x\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u3002BLE\u7528\u306fS110 SoftDevice, S120 SoftDevice, S130 SoftDevice\u3068\uff13\u7a2e\u985e\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u7528\u9014\u304c\u7570\u306a\u308b\u3002\u3061\u306a\u307f\u306bS210 SoftDevice\u306eANT/ANT+\u7528\u306e\u30b9\u30bf\u30c3\u30af\u3067\u3001S330 SoftDevice\u306fBLE\u3068ANT/ANT+\u7528\u306e\u30b9\u30bf\u30c3\u30af\u306b\u306a\u308b\u3002 Bluetooth 4.2\u5411\u3051\u306b\u306fS132 SoftDevice, S212 SoftDevice, S332 SoftDevice\u304c\u63d0\u4f9b\u3055\u308c\u3001\u3053\u308c\u3089\u306f\u3001nRF52\u30b7\u30ea\u30fc\u30ba\u306e\u307f\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u3002 SoftDevice\u306e\u7d44\u307f\u8fbc\u307f Debug Logger \u3068 Common application error handler \u3092\u4e8b\u524d\u306b\u7d44\u307f\u8fbc\u3080\u3002 Source Code main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <stdbool.h> #include \"nrf_delay.h\" #include \"app_trace.h\" #include \"app_error.h\" #include \"softdevice_handler.h\" #include \"ble_conn_params.h\" #include \"custom_board.h\" /** * @brief \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9.APP_ERROR_CHECK\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u547c\u3070\u308c\u308b. */ void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } /** * @brief \u95a2\u9023\u3059\u308bModule\u7fa4\u306b\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u95a2\u6570. * * @details \u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3042\u3068\u306b\u3001\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] sys_evt \u30b7\u30b9\u30c6\u30e0\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8 */ static void sys_evt_dispatch ( uint32_t sys_evt ) { } /** * @brief BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306eModule\u7fa4\u306bBLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u305f\u3081\u306e\u95a2\u6570. * * @details BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u4fe1\u3057\u305f\u3042\u3068\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] p_ble_evt Bluetooth\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for the Power manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } int main () { uint32_t err_code ; // Denug logger\u306e\u521d\u671f\u5316. app_trace_init (); SOFTDEVICE_HANDLER_INIT ( NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION , NULL ); // BLE\u30b9\u30bf\u30c3\u30af\u3092\u6709\u52b9\u306b\u3059\u308b. ble_enable_params_t ble_enable_params ; memset ( & ble_enable_params , 0 , sizeof ( ble_enable_params )); //ble_enable_params.gatts_enable_params.service_changed = IS_SRVC_CHANGED_CHARACT_PRESENT; err_code = sd_ble_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u7fa4\u306e\u305f\u3081\u306eSoftDevice\u30cf\u30f3\u30c9\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332. err_code = softdevice_sys_evt_handler_set ( sys_evt_dispatch ); APP_ERROR_CHECK ( err_code ); while ( true ){ power_manage (); } } custom_board.h 1 2 3 4 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define RTS_PIN_NUMBER 100 #define CTS_PIN_NUMBER 100 Option\u306e\u8a2d\u5b9a Define: 1 DEBUG BOARD_CUSTOM ENABLE_DEBUG_LOG_SUPPORT BLE_STACK_SUPPORT_REQD BLE\u30b9\u30bf\u30c3\u30af\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001Define\u306b\u3001BLE_STACK_SUPPORT_REQD\u3092\u8ffd\u8a18\u3059\u308b\u3002 1 BLE_STACK_SUPPORT_REQD \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8ffd\u52a0 |nRF_SoftDevice | | -- | -- | | | | Board Support | CMSIS | Device| | -- | -- | | | | | | BLE Modules | nRF_Devices | nRF_Libraries| | -- | -- | | | | |","title":"SoftDevice\u3092\u6709\u52b9\u306b\u3059\u308b"},{"location":"6.iBeacon/soft/#softdevice","text":"Nordic\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bnRF5x\u30b7\u30ea\u30fc\u30ba\u5411\u3051\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u3002BLE\u7528\u306fS110 SoftDevice, S120 SoftDevice, S130 SoftDevice\u3068\uff13\u7a2e\u985e\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u7528\u9014\u304c\u7570\u306a\u308b\u3002\u3061\u306a\u307f\u306bS210 SoftDevice\u306eANT/ANT+\u7528\u306e\u30b9\u30bf\u30c3\u30af\u3067\u3001S330 SoftDevice\u306fBLE\u3068ANT/ANT+\u7528\u306e\u30b9\u30bf\u30c3\u30af\u306b\u306a\u308b\u3002 Bluetooth 4.2\u5411\u3051\u306b\u306fS132 SoftDevice, S212 SoftDevice, S332 SoftDevice\u304c\u63d0\u4f9b\u3055\u308c\u3001\u3053\u308c\u3089\u306f\u3001nRF52\u30b7\u30ea\u30fc\u30ba\u306e\u307f\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u3002","title":"SoftDevice\u3092\u6709\u52b9\u306b\u3059\u308b"},{"location":"6.iBeacon/soft/#softdevice_1","text":"Debug Logger \u3068 Common application error handler \u3092\u4e8b\u524d\u306b\u7d44\u307f\u8fbc\u3080\u3002","title":"SoftDevice\u306e\u7d44\u307f\u8fbc\u307f"},{"location":"6.iBeacon/soft/#source-code","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <stdbool.h> #include \"nrf_delay.h\" #include \"app_trace.h\" #include \"app_error.h\" #include \"softdevice_handler.h\" #include \"ble_conn_params.h\" #include \"custom_board.h\" /** * @brief \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9.APP_ERROR_CHECK\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u547c\u3070\u308c\u308b. */ void app_error_handler ( uint32_t error_code , uint32_t line_num , const uint8_t * p_file_name ) { app_trace_log ( \"error_code: %d \\r\\n \" , error_code ); app_trace_log ( \"line_num: %d \\r\\n \" , line_num ); app_trace_log ( \"p_file_name: %s \\r\\n \" , p_file_name ); } /** * @brief \u95a2\u9023\u3059\u308bModule\u7fa4\u306b\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u95a2\u6570. * * @details \u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3042\u3068\u306b\u3001\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] sys_evt \u30b7\u30b9\u30c6\u30e0\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8 */ static void sys_evt_dispatch ( uint32_t sys_evt ) { } /** * @brief BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306eModule\u7fa4\u306bBLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3059\u308b\u305f\u3081\u306e\u95a2\u6570. * * @details BLE\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u4fe1\u3057\u305f\u3042\u3068\u3001\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306e\u4e2d\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b. * * @param[in] p_ble_evt Bluetooth\u30b9\u30bf\u30c3\u30af\u30a4\u30d9\u30f3\u30c8. */ static void ble_evt_dispatch ( ble_evt_t * p_ble_evt ) { } /**@brief Function for the Power manager. */ static void power_manage ( void ) { uint32_t err_code = sd_app_evt_wait (); APP_ERROR_CHECK ( err_code ); } int main () { uint32_t err_code ; // Denug logger\u306e\u521d\u671f\u5316. app_trace_init (); SOFTDEVICE_HANDLER_INIT ( NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION , NULL ); // BLE\u30b9\u30bf\u30c3\u30af\u3092\u6709\u52b9\u306b\u3059\u308b. ble_enable_params_t ble_enable_params ; memset ( & ble_enable_params , 0 , sizeof ( ble_enable_params )); //ble_enable_params.gatts_enable_params.service_changed = IS_SRVC_CHANGED_CHARACT_PRESENT; err_code = sd_ble_enable ( & ble_enable_params ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b. err_code = softdevice_ble_evt_handler_set ( ble_evt_dispatch ); APP_ERROR_CHECK ( err_code ); // BLE\u30a4\u30d9\u30f3\u30c8\u7fa4\u306e\u305f\u3081\u306eSoftDevice\u30cf\u30f3\u30c9\u30e9\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332. err_code = softdevice_sys_evt_handler_set ( sys_evt_dispatch ); APP_ERROR_CHECK ( err_code ); while ( true ){ power_manage (); } } custom_board.h 1 2 3 4 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define RTS_PIN_NUMBER 100 #define CTS_PIN_NUMBER 100","title":"Source Code"},{"location":"6.iBeacon/soft/#option","text":"Define: 1 DEBUG BOARD_CUSTOM ENABLE_DEBUG_LOG_SUPPORT BLE_STACK_SUPPORT_REQD BLE\u30b9\u30bf\u30c3\u30af\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001Define\u306b\u3001BLE_STACK_SUPPORT_REQD\u3092\u8ffd\u8a18\u3059\u308b\u3002 1 BLE_STACK_SUPPORT_REQD","title":"Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/soft/#_1","text":"|nRF_SoftDevice | | -- | -- | | | | Board Support | CMSIS | Device| | -- | -- | | | | | | BLE Modules | nRF_Devices | nRF_Libraries| | -- | -- | | | | |","title":"\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u8ffd\u52a0"},{"location":"6.iBeacon/ses/001_template/","text":"Project\u306e\u8a2d\u5b9a config\u7528\u30d5\u30a9\u30eb\u30c0\u4f5c\u6210 Project Explorer\u3067Project\u3092\u9078\u629e\u5f8c\u3001\u4e0a\u306eMenu Bar\u3088\u308aProject -> Add New Folder\u3067\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3059\u308b\u3002\u540d\u524d\u306f\u4f55\u3067\u3082OK\u3002(\u4f5c\u6210\u3057\u306a\u304f\u3066\u3082\u826f\u3044) sdk_config.h\u306e\u53d6\u308a\u8fbc\u307f (SDK_PATH)/example/ble_peripheral/ble_app_beacon/pca10040/s132/config/sdk_config.h\u3092Project\u914d\u4e0b\u306b\u53d6\u308a\u8fbc\u307f custom_board.h\u306e\u4f5c\u6210 Project\u914d\u4e0b\u306bcustom_board.h\u3092\u4f5c\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // Shinobi Dev Board #ifndef CUSTOM_BOARD_H #define CUSTOM_BOARD_H #define LEDS_NUMBER 1 #define LED_1 18 #define LEDS_LIST { LED_1 } #define LEDS_ACTIVE_STATE 1 #define BSP_LED_0 LED_1 #define BUTTONS_NUMBER 1 #define BUTTON_0 16 #define BUTTONS_ACTIVE_STATE 0 #define BSP_BUTTON_0 BUTTON_0 #define BUTTONS_LIST { BUTTON_0 } #define BUTTON_PULL NRF_GPIO_PIN_PULLUP #define LEDS_INV_MASK 0 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 10 #define RTS_PIN_NUMBER 8 #define HWFC false #define SPIS_MISO_PIN 20 // SPI MISO signal. #define SPIS_CSN_PIN 21 // SPI CSN signal. #define SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SPIS_SCK_PIN 23 // SPI SCK signal. #define SPIM0_SCK_PIN 23u /**< SPI clock GPIO pin number. */ #define SPIM0_MOSI_PIN 20u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM0_MISO_PIN 22u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM0_SS_PIN 21u /**< SPI Slave Select GPIO pin number. */ #define SPIM1_SCK_PIN 29u /**< SPI clock GPIO pin number. */ #define SPIM1_MOSI_PIN 24u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM1_MISO_PIN 28u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM1_SS_PIN 25u /**< SPI Slave Select GPIO pin number. */ // serialization APPLICATION board // UART // this configuration works with the SPI wires setup #define SER_APP_RX_PIN 20 // UART RX pin number. #define SER_APP_TX_PIN 22 // UART TX pin number. #define SER_APP_CTS_PIN 23 // UART Clear To Send pin number. #define SER_APP_RTS_PIN 21 // UART Request To Send pin number. // serialization CONNECTIVITY board // UART #if 0 #define SER_CON_RX_PIN 22 // UART RX pin number. #define SER_CON_TX_PIN 20 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #else // this configuration works with the SPI wires setup #define SER_CON_RX_PIN 20 // UART RX pin number. #define SER_CON_TX_PIN 22 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #endif #define SER_CONN_ASSERT_LED_PIN LED_0 #define NRF_CLOCK_LFCLKSRC {.source = NRF_CLOCK_LF_SRC_XTAL, \\ .rc_ctiv = 0, \\ .rc_temp_ctiv = 0, \\ .accuracy = NRF_CLOCK_LF_ACCURACY_20_PPM} #endif SEGGER_Flash.icf\u306e\u53d6\u308a\u8fbc\u307f Project Explorer -> Add Existing File\u304b\u3089SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u308a\u8fbc\u307f Build Option\u306e\u8a2d\u5b9a Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3059\u308b \u4ee5\u4e0b\u306eOption\u3092\u8a2d\u5b9a\u3059\u308b Preprocessor -> Preprocessor Definitions Option NRF52832_XXAB BOARD_CUSTOM","title":"Project\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/001_template/#project","text":"","title":"Project\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/001_template/#config","text":"Project Explorer\u3067Project\u3092\u9078\u629e\u5f8c\u3001\u4e0a\u306eMenu Bar\u3088\u308aProject -> Add New Folder\u3067\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3059\u308b\u3002\u540d\u524d\u306f\u4f55\u3067\u3082OK\u3002(\u4f5c\u6210\u3057\u306a\u304f\u3066\u3082\u826f\u3044)","title":"config\u7528\u30d5\u30a9\u30eb\u30c0\u4f5c\u6210"},{"location":"6.iBeacon/ses/001_template/#sdk_configh","text":"(SDK_PATH)/example/ble_peripheral/ble_app_beacon/pca10040/s132/config/sdk_config.h\u3092Project\u914d\u4e0b\u306b\u53d6\u308a\u8fbc\u307f","title":"sdk_config.h\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"6.iBeacon/ses/001_template/#custom_boardh","text":"Project\u914d\u4e0b\u306bcustom_board.h\u3092\u4f5c\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // Shinobi Dev Board #ifndef CUSTOM_BOARD_H #define CUSTOM_BOARD_H #define LEDS_NUMBER 1 #define LED_1 18 #define LEDS_LIST { LED_1 } #define LEDS_ACTIVE_STATE 1 #define BSP_LED_0 LED_1 #define BUTTONS_NUMBER 1 #define BUTTON_0 16 #define BUTTONS_ACTIVE_STATE 0 #define BSP_BUTTON_0 BUTTON_0 #define BUTTONS_LIST { BUTTON_0 } #define BUTTON_PULL NRF_GPIO_PIN_PULLUP #define LEDS_INV_MASK 0 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 10 #define RTS_PIN_NUMBER 8 #define HWFC false #define SPIS_MISO_PIN 20 // SPI MISO signal. #define SPIS_CSN_PIN 21 // SPI CSN signal. #define SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SPIS_SCK_PIN 23 // SPI SCK signal. #define SPIM0_SCK_PIN 23u /**< SPI clock GPIO pin number. */ #define SPIM0_MOSI_PIN 20u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM0_MISO_PIN 22u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM0_SS_PIN 21u /**< SPI Slave Select GPIO pin number. */ #define SPIM1_SCK_PIN 29u /**< SPI clock GPIO pin number. */ #define SPIM1_MOSI_PIN 24u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM1_MISO_PIN 28u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM1_SS_PIN 25u /**< SPI Slave Select GPIO pin number. */ // serialization APPLICATION board // UART // this configuration works with the SPI wires setup #define SER_APP_RX_PIN 20 // UART RX pin number. #define SER_APP_TX_PIN 22 // UART TX pin number. #define SER_APP_CTS_PIN 23 // UART Clear To Send pin number. #define SER_APP_RTS_PIN 21 // UART Request To Send pin number. // serialization CONNECTIVITY board // UART #if 0 #define SER_CON_RX_PIN 22 // UART RX pin number. #define SER_CON_TX_PIN 20 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #else // this configuration works with the SPI wires setup #define SER_CON_RX_PIN 20 // UART RX pin number. #define SER_CON_TX_PIN 22 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #endif #define SER_CONN_ASSERT_LED_PIN LED_0 #define NRF_CLOCK_LFCLKSRC {.source = NRF_CLOCK_LF_SRC_XTAL, \\ .rc_ctiv = 0, \\ .rc_temp_ctiv = 0, \\ .accuracy = NRF_CLOCK_LF_ACCURACY_20_PPM} #endif","title":"custom_board.h\u306e\u4f5c\u6210"},{"location":"6.iBeacon/ses/001_template/#segger_flashicf","text":"Project Explorer -> Add Existing File\u304b\u3089SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u308a\u8fbc\u307f","title":"SEGGER_Flash.icf\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"6.iBeacon/ses/001_template/#build-option","text":"Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3059\u308b \u4ee5\u4e0b\u306eOption\u3092\u8a2d\u5b9a\u3059\u308b","title":"Build Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/001_template/#preprocessor-preprocessor-definitions","text":"Option NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor -&gt; Preprocessor Definitions"},{"location":"6.iBeacon/ses/002_led/","text":"LED\u306e\u70b9\u706f Build Option\u306e\u8a2d\u5b9a Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b Preprocessor -> User Include Directories Path (SDK_PATH)/components/libraries/button (SDK_PATH)/components/drivers_nrf/nrf_soc_nosd (SDK_PATH)/components/libraries/util (SDK_PATH)/components/toolchain/cmsis/include (SDK_PATH)/modules/nrfx/mdk (SDK_PATH)/integration/nrfx (SDK_PATH)/modules/nrfx (SDK_PATH)/modules/nrfx/hal (SDK_PATH)/components/boards (SDK_PATH)/components/libraries/bsp SDK Source File\u306e\u53d6\u308a\u8fbc\u307f Project\u306b\u4ee5\u4e0b\u306eSource\u3092\u53d6\u308a\u8fbc\u3080 Path (SDK_PATH)/components/boards/boards.c main.c 1 2 3 4 5 6 7 8 9 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 int main ( void ) { bsp_board_init ( BSP_INIT_LEDS ); bsp_board_led_on ( LED1 ); }","title":"LED\u306e\u70b9\u706f"},{"location":"6.iBeacon/ses/002_led/#led","text":"","title":"LED\u306e\u70b9\u706f"},{"location":"6.iBeacon/ses/002_led/#build-option","text":"Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b","title":"Build Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/002_led/#preprocessor-user-include-directories","text":"Path (SDK_PATH)/components/libraries/button (SDK_PATH)/components/drivers_nrf/nrf_soc_nosd (SDK_PATH)/components/libraries/util (SDK_PATH)/components/toolchain/cmsis/include (SDK_PATH)/modules/nrfx/mdk (SDK_PATH)/integration/nrfx (SDK_PATH)/modules/nrfx (SDK_PATH)/modules/nrfx/hal (SDK_PATH)/components/boards (SDK_PATH)/components/libraries/bsp","title":"Preprocessor -&gt; User Include Directories"},{"location":"6.iBeacon/ses/002_led/#sdk-source-file","text":"Project\u306b\u4ee5\u4e0b\u306eSource\u3092\u53d6\u308a\u8fbc\u3080 Path (SDK_PATH)/components/boards/boards.c main.c 1 2 3 4 5 6 7 8 9 #include \"bsp.h\" #define LED1 BSP_BOARD_LED_0 int main ( void ) { bsp_board_init ( BSP_INIT_LEDS ); bsp_board_led_on ( LED1 ); }","title":"SDK Source File\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"6.iBeacon/ses/003_log/","text":"LOG\u306e\u51fa\u529b Build Option\u306e\u8a2d\u5b9a Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b Preprocessor -> User Include Directories Path (SDK_PATH)/modules/nrfx/drivers/src/prs (SDK_PATH)/modules/nrfx/drivers/src (SDK_PATH)/components/libraries/atomic (SDK_PATH)/components/libraries/ringbuf (SDK_PATH)/modules/nrfx/drivers/include (SDK_PATH)/integration/nrfx/legacy (SDK_PATH)/external/fprintf (SDK_PATH)/components/libraries/balloc (SDK_PATH)/components/libraries/memobj (SDK_PATH)/components/libraries/log/src (SDK_PATH)/components/libraries/strerror (SDK_PATH)/components/libraries/experimental_section_vars (SDK_PATH)/components/libraries/log Linker -> Linker Symbol Definitions Symbol __start_log_const_data=log_const_data$$Base __stop_log_const_data=log_const_data$$Limit __start_log_dynamic_data=log_dynamic_data$$Base SDK Source File\u306e\u53d6\u308a\u8fbc\u307f Project\u306b\u4ee5\u4e0b\u306eSource\u3092\u53d6\u308a\u8fbc\u3080 Source (SDK_PATH)/components/libraries/util/app_error.c (SDK_PATH)/components/libraries/util/app_error_handler_gcc.c (SDK_PATH)/components/libraries/util/app_error_weak.c (SDK_PATH)/components/libraries/util/app_util_platform.c (SDK_PATH)/components/libraries/atomic/nrf_atomic.c (SDK_PATH)/components/libraries/balloc/nrf_balloc.c (SDK_PATH)/integration/nrfx/legacy/nrf_drv_uart.c (SDK_PATH)/external/fprintf/nrf_fprintf.c (SDK_PATH)/external/fprintf/nrf_fprintf_format.c (SDK_PATH)/components/libraries/log/src/nrf_log_backend_serial.c (SDK_PATH)/components/libraries/log/src/nrf_log_backend_uart.c (SDK_PATH)/components/libraries/log/src/nrf_log_default_backends.c (SDK_PATH)/components/libraries/log/src/nrf_log_frontend.c (SDK_PATH)/components/libraries/log/src/nrf_log_str_formatter.c (SDK_PATH)/components/libraries/memobj/nrf_memobj.c (SDK_PATH)/components/libraries/ringbuf/nrf_ringbuf.c (SDK_PATH)/components/libraries/strerror/nrf_strerror.c (SDK_PATH)/modules/nrfx/drivers/src/prs/nrfx_prs.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_uart.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_uarte.c System File\u306e\u7de8\u96c6 Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u7de8\u96c6\u3092\u884c\u3046 Cortex_M_Startup.s 1 2 3 4 5 6 7 8 9 10 11 12 *** \u7701\u7565 *** ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler * \u5909\u66f4 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 *** \u7701\u7565 *** Linker Script\u306e\u7de8\u96c6 SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u7de8\u96c6\u3092\u884c\u3046 SEGGER_Flash.icf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /*** \u7701\u7565 ***/ // // Block definitions // /*** \u7701\u7565 ***/ define block log_const_data { section . log_const_data * }; //\u8ffd\u52a0 define block log_dynamic_data { section . log_dynamic_data * }; //\u8ffd\u52a0 // // Explicit initialization settings for sections // /*** \u7701\u7565 ***/ place in FLASH { block tdata_load , // Thread-local-storage load image section . nrf_balloc , //\u8ffd\u52a0 section . log_backends , //\u8ffd\u52a0 block log_const_data , //\u8ffd\u52a0 block log_dynamic_data //\u8ffd\u52a0 }; /*** \u7701\u7565 ***/ main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include \"app_error.h\" #include \"bsp.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); bsp_board_led_on ( LED1 ); while ( true ) { } }","title":"LOG\u306e\u51fa\u529b"},{"location":"6.iBeacon/ses/003_log/#log","text":"","title":"LOG\u306e\u51fa\u529b"},{"location":"6.iBeacon/ses/003_log/#build-option","text":"Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b","title":"Build Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/003_log/#preprocessor-user-include-directories","text":"Path (SDK_PATH)/modules/nrfx/drivers/src/prs (SDK_PATH)/modules/nrfx/drivers/src (SDK_PATH)/components/libraries/atomic (SDK_PATH)/components/libraries/ringbuf (SDK_PATH)/modules/nrfx/drivers/include (SDK_PATH)/integration/nrfx/legacy (SDK_PATH)/external/fprintf (SDK_PATH)/components/libraries/balloc (SDK_PATH)/components/libraries/memobj (SDK_PATH)/components/libraries/log/src (SDK_PATH)/components/libraries/strerror (SDK_PATH)/components/libraries/experimental_section_vars (SDK_PATH)/components/libraries/log","title":"Preprocessor -&gt; User Include Directories"},{"location":"6.iBeacon/ses/003_log/#linker-linker-symbol-definitions","text":"Symbol __start_log_const_data=log_const_data$$Base __stop_log_const_data=log_const_data$$Limit __start_log_dynamic_data=log_dynamic_data$$Base","title":"Linker -&gt; Linker Symbol Definitions"},{"location":"6.iBeacon/ses/003_log/#sdk-source-file","text":"Project\u306b\u4ee5\u4e0b\u306eSource\u3092\u53d6\u308a\u8fbc\u3080 Source (SDK_PATH)/components/libraries/util/app_error.c (SDK_PATH)/components/libraries/util/app_error_handler_gcc.c (SDK_PATH)/components/libraries/util/app_error_weak.c (SDK_PATH)/components/libraries/util/app_util_platform.c (SDK_PATH)/components/libraries/atomic/nrf_atomic.c (SDK_PATH)/components/libraries/balloc/nrf_balloc.c (SDK_PATH)/integration/nrfx/legacy/nrf_drv_uart.c (SDK_PATH)/external/fprintf/nrf_fprintf.c (SDK_PATH)/external/fprintf/nrf_fprintf_format.c (SDK_PATH)/components/libraries/log/src/nrf_log_backend_serial.c (SDK_PATH)/components/libraries/log/src/nrf_log_backend_uart.c (SDK_PATH)/components/libraries/log/src/nrf_log_default_backends.c (SDK_PATH)/components/libraries/log/src/nrf_log_frontend.c (SDK_PATH)/components/libraries/log/src/nrf_log_str_formatter.c (SDK_PATH)/components/libraries/memobj/nrf_memobj.c (SDK_PATH)/components/libraries/ringbuf/nrf_ringbuf.c (SDK_PATH)/components/libraries/strerror/nrf_strerror.c (SDK_PATH)/modules/nrfx/drivers/src/prs/nrfx_prs.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_uart.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_uarte.c","title":"SDK Source File\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"6.iBeacon/ses/003_log/#system-file","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u7de8\u96c6\u3092\u884c\u3046 Cortex_M_Startup.s 1 2 3 4 5 6 7 8 9 10 11 12 *** \u7701\u7565 *** ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler * \u5909\u66f4 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 *** \u7701\u7565 ***","title":"System File\u306e\u7de8\u96c6"},{"location":"6.iBeacon/ses/003_log/#linker-script","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u7de8\u96c6\u3092\u884c\u3046 SEGGER_Flash.icf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /*** \u7701\u7565 ***/ // // Block definitions // /*** \u7701\u7565 ***/ define block log_const_data { section . log_const_data * }; //\u8ffd\u52a0 define block log_dynamic_data { section . log_dynamic_data * }; //\u8ffd\u52a0 // // Explicit initialization settings for sections // /*** \u7701\u7565 ***/ place in FLASH { block tdata_load , // Thread-local-storage load image section . nrf_balloc , //\u8ffd\u52a0 section . log_backends , //\u8ffd\u52a0 block log_const_data , //\u8ffd\u52a0 block log_dynamic_data //\u8ffd\u52a0 }; /*** \u7701\u7565 ***/ main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include \"app_error.h\" #include \"bsp.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); bsp_board_led_on ( LED1 ); while ( true ) { } }","title":"Linker Script\u306e\u7de8\u96c6"},{"location":"6.iBeacon/ses/005_softdevice/","text":"SoftDevice\u306e\u713c\u304d\u8fbc\u307f Build Option\u306e\u8a2d\u5b9a Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b Loader -> Additional Load File[0] S132 SoftDevice (SDK_PATH)/components/softdevice/s132/hex/s132_nrf52_6.1.0_softdevice.hex Build -> Memory Segments FLASH\u9818\u57df\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u30920x00026000\u3001\u30b5\u30a4\u30ba\u30920x0005a000\u306b\u8a2d\u5b9a\u3059\u308b\u3002\u66f4\u306bRAM\u9818\u57df\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u30920x20002210\u3001\u30b5\u30a4\u30ba\u30920x0000DDF0\u306b\u8a2d\u5b9a\u3059\u308b Preprocessor -> Preprocessor Definitions Option SOFTDEVICE_PRESENT Preprocessor -> User Include Directories Path (SDK_PATH)/components/softdevice/s132/headers","title":"SoftDevice\u306e\u713c\u304d\u8fbc\u307f"},{"location":"6.iBeacon/ses/005_softdevice/#softdevice","text":"","title":"SoftDevice\u306e\u713c\u304d\u8fbc\u307f"},{"location":"6.iBeacon/ses/005_softdevice/#build-option","text":"Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b","title":"Build Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/005_softdevice/#loader-additional-load-file0","text":"S132 SoftDevice (SDK_PATH)/components/softdevice/s132/hex/s132_nrf52_6.1.0_softdevice.hex","title":"Loader -&gt; Additional Load File[0]"},{"location":"6.iBeacon/ses/005_softdevice/#build-memory-segments","text":"FLASH\u9818\u57df\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u30920x00026000\u3001\u30b5\u30a4\u30ba\u30920x0005a000\u306b\u8a2d\u5b9a\u3059\u308b\u3002\u66f4\u306bRAM\u9818\u57df\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u30920x20002210\u3001\u30b5\u30a4\u30ba\u30920x0000DDF0\u306b\u8a2d\u5b9a\u3059\u308b","title":"Build -&gt; Memory Segments"},{"location":"6.iBeacon/ses/005_softdevice/#preprocessor-preprocessor-definitions","text":"Option SOFTDEVICE_PRESENT","title":"Preprocessor -&gt; Preprocessor Definitions"},{"location":"6.iBeacon/ses/005_softdevice/#preprocessor-user-include-directories","text":"Path (SDK_PATH)/components/softdevice/s132/headers","title":"Preprocessor -&gt; User Include Directories"},{"location":"6.iBeacon/ses/006_power/","text":"PowerManage \u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3002 Build Option\u306e\u8a2d\u5b9a Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b Preprocessor -> User Include Directories Path (SDK_PATH)/components/softdevice/common (SDK_PATH)/components/libraries/mutex (SDK_PATH)/components/libraries/pwr_mgmt Liker -> Linker Symbol Definitions Symbol __start_pwr_mgmt_data=pwr_mgmt_data$$Base __stop_pwr_mgmt_data=pwr_mgmt_data$$Limit SDK Source File\u306e\u53d6\u308a\u8fbc\u307f Project\u306b\u4ee5\u4e0b\u306eSource\u3092\u53d6\u308a\u8fbc\u3080 Source (SDK_PATH)/components/libraries/pwr_mgmt/nrf_pwr_mgmt.c (SDK_PATH)/components/softdevice/common/nrf_sdh.c (SDK_PATH)/components/libraries/experimental_section_vars/nrf_section_iter.c Linker Script\u306e\u7de8\u96c6 SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u7de8\u96c6\u3092\u884c\u3046 SEGGER_Flash.icf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /*** \u7701\u7565 ***/ define block log_const_data { section . log_const_data * }; define block log_dynamic_data { section . log_dynamic_data * }; define block pwr_mgmt_data { section . pwr_mgmt_data * }; //\u8ffd\u52a0 // // Explicit initialization settings for sections // /*** \u7701\u7565 ***/ place in FLASH { block tdata_load , // Thread-local-storage load image section . nrf_balloc , section . log_backends , block log_const_data , block log_dynamic_data , block pwr_mgmt_data //\u8ffd\u52a0 }; /*** \u7701\u7565 ***/ main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); bsp_board_led_on ( LED1 ); while ( true ) { if ( NRF_LOG_PROCESS () == false ) { nrf_pwr_mgmt_run (); } } }","title":"PowerManage"},{"location":"6.iBeacon/ses/006_power/#powermanage","text":"\u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3002","title":"PowerManage"},{"location":"6.iBeacon/ses/006_power/#build-option","text":"Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b","title":"Build Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/006_power/#preprocessor-user-include-directories","text":"Path (SDK_PATH)/components/softdevice/common (SDK_PATH)/components/libraries/mutex (SDK_PATH)/components/libraries/pwr_mgmt","title":"Preprocessor -&gt; User Include Directories"},{"location":"6.iBeacon/ses/006_power/#liker-linker-symbol-definitions","text":"Symbol __start_pwr_mgmt_data=pwr_mgmt_data$$Base __stop_pwr_mgmt_data=pwr_mgmt_data$$Limit","title":"Liker -&gt; Linker Symbol Definitions"},{"location":"6.iBeacon/ses/006_power/#sdk-source-file","text":"Project\u306b\u4ee5\u4e0b\u306eSource\u3092\u53d6\u308a\u8fbc\u3080 Source (SDK_PATH)/components/libraries/pwr_mgmt/nrf_pwr_mgmt.c (SDK_PATH)/components/softdevice/common/nrf_sdh.c (SDK_PATH)/components/libraries/experimental_section_vars/nrf_section_iter.c","title":"SDK Source File\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"6.iBeacon/ses/006_power/#linker-script","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u7de8\u96c6\u3092\u884c\u3046 SEGGER_Flash.icf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /*** \u7701\u7565 ***/ define block log_const_data { section . log_const_data * }; define block log_dynamic_data { section . log_dynamic_data * }; define block pwr_mgmt_data { section . pwr_mgmt_data * }; //\u8ffd\u52a0 // // Explicit initialization settings for sections // /*** \u7701\u7565 ***/ place in FLASH { block tdata_load , // Thread-local-storage load image section . nrf_balloc , section . log_backends , block log_const_data , block log_dynamic_data , block pwr_mgmt_data //\u8ffd\u52a0 }; /*** \u7701\u7565 ***/ main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); bsp_board_led_on ( LED1 ); while ( true ) { if ( NRF_LOG_PROCESS () == false ) { nrf_pwr_mgmt_run (); } } }","title":"Linker Script\u306e\u7de8\u96c6"},{"location":"6.iBeacon/ses/007_init_ble/","text":"BLE Stack\u306e\u521d\u671f\u5316 iBeacon\u3092\u767a\u4fe1\u3059\u308b\u305f\u3081\u306bBLE Stack\u306e\u521d\u671f\u5316\u3092\u884c\u3046\u3002 Define\u306e\u8ffd\u52a0 1 #define APP_BLE_CONN_CFG_TAG 1 Extern\u306e\u8ffd\u52a0 1 extern uint32_t __app_ram_start__ ; BLE Stack\u306e\u521d\u671f\u5316\u51e6\u7406 1 2 3 4 5 6 7 /**@brief Function for initializing the BLE stack. */ void ble_stack_init ( void ) { APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); } Build Option\u306e\u8a2d\u5b9a Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b ### Linker -> Linker Symbol Definitions |Symbol| |:--| | start_sdh_req_observers=sdh_req_observers$$Base| |__stop_sdh_req_observers=sdh_req_observers$$Limit| |__start_sdh_state_observers=sdh_state_observers$$Base| |__stop_sdh_state_observers=sdh_state_observers$$Limit| |__app_ram_start =app_ram_start$$Base| Linker Script\u306e\u7de8\u96c6 SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u7de8\u96c6\u3092\u884c\u3046 SEGGER_Flash.icf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /*** \u7701\u7565 ***/ define block log_const_data { section . log_const_data * }; define block log_dynamic_data { section . log_dynamic_data * }; define block pwr_mgmt_data { section . pwr_mgmt_data * }; define block app_ram_start with size = 4 { }; //\u8ffd\u52a0 define block sdh_req_observers { section . sdh_req_observers * }; //\u8ffd\u52a0 define block sdh_state_observers { section . sdh_state_observers * }; //\u8ffd\u52a0 // // Explicit initialization settings for sections // /*** \u7701\u7565 ***/ place in RAM { // Special sections section . non_init , section . non_init . * , // No initialization section block tls , // Thread-local-storage block block app_ram_start //\u8ffd\u52a0 }; /*** \u7701\u7565 ***/ main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_sdh.h\" #include \"nrf_sdh_ble.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 #define APP_BLE_CONN_CFG_TAG 1 extern uint32_t __app_ram_start__ ; void ble_stack_init ( void ) { APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); } void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); ble_stack_init (); bsp_board_led_on ( LED1 ); while ( true ) { if ( NRF_LOG_PROCESS () == false ) { nrf_pwr_mgmt_run (); } } }","title":"BLE Stack\u306e\u521d\u671f\u5316"},{"location":"6.iBeacon/ses/007_init_ble/#ble-stack","text":"iBeacon\u3092\u767a\u4fe1\u3059\u308b\u305f\u3081\u306bBLE Stack\u306e\u521d\u671f\u5316\u3092\u884c\u3046\u3002","title":"BLE Stack\u306e\u521d\u671f\u5316"},{"location":"6.iBeacon/ses/007_init_ble/#define","text":"1 #define APP_BLE_CONN_CFG_TAG 1","title":"Define\u306e\u8ffd\u52a0"},{"location":"6.iBeacon/ses/007_init_ble/#extern","text":"1 extern uint32_t __app_ram_start__ ;","title":"Extern\u306e\u8ffd\u52a0"},{"location":"6.iBeacon/ses/007_init_ble/#ble-stack_1","text":"1 2 3 4 5 6 7 /**@brief Function for initializing the BLE stack. */ void ble_stack_init ( void ) { APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); }","title":"BLE Stack\u306e\u521d\u671f\u5316\u51e6\u7406"},{"location":"6.iBeacon/ses/007_init_ble/#build-option","text":"Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b ### Linker -> Linker Symbol Definitions |Symbol| |:--| | start_sdh_req_observers=sdh_req_observers$$Base| |__stop_sdh_req_observers=sdh_req_observers$$Limit| |__start_sdh_state_observers=sdh_state_observers$$Base| |__stop_sdh_state_observers=sdh_state_observers$$Limit| |__app_ram_start =app_ram_start$$Base|","title":"Build Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/007_init_ble/#linker-script","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u7de8\u96c6\u3092\u884c\u3046 SEGGER_Flash.icf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /*** \u7701\u7565 ***/ define block log_const_data { section . log_const_data * }; define block log_dynamic_data { section . log_dynamic_data * }; define block pwr_mgmt_data { section . pwr_mgmt_data * }; define block app_ram_start with size = 4 { }; //\u8ffd\u52a0 define block sdh_req_observers { section . sdh_req_observers * }; //\u8ffd\u52a0 define block sdh_state_observers { section . sdh_state_observers * }; //\u8ffd\u52a0 // // Explicit initialization settings for sections // /*** \u7701\u7565 ***/ place in RAM { // Special sections section . non_init , section . non_init . * , // No initialization section block tls , // Thread-local-storage block block app_ram_start //\u8ffd\u52a0 }; /*** \u7701\u7565 ***/ main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_sdh.h\" #include \"nrf_sdh_ble.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 #define APP_BLE_CONN_CFG_TAG 1 extern uint32_t __app_ram_start__ ; void ble_stack_init ( void ) { APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); } void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); ble_stack_init (); bsp_board_led_on ( LED1 ); while ( true ) { if ( NRF_LOG_PROCESS () == false ) { nrf_pwr_mgmt_run (); } } }","title":"Linker Script\u306e\u7de8\u96c6"},{"location":"6.iBeacon/ses/008_advdata/","text":"AdvData\u306e\u8a2d\u5b9a Define\u306e\u5b9a\u7fa9 1 2 3 4 5 6 7 8 #define APP_COMPANY_IDENTIFIER 0x004C #define APP_BEACON_INFO_LENGTH 0x17 #define APP_BEACON_TYPE 0x02,0x15 #define APP_BEACON_UUID 0x01,0x12,0x23,0x34,0x45,0xAA,0x67,0x78,0x89,0xBA,0x13,0xBC,0x33,0x1A,0x22,0xF0 #define APP_MAJOR_VALUE 0x01,0x02 #define APP_MINOR_VALUE 0x03,0x04 #define APP_MEASURED_RSSI 0xC3 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) Data\u306e\u5b9a\u7fa9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static ble_gap_adv_params_t ble_gap_adv_params ; static uint8_t ble_enc_advdata [ BLE_GAP_ADV_SET_DATA_SIZE_MAX ]; static uint8_t ble_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET ; static uint8_t beacon_info [ APP_BEACON_INFO_LENGTH ] = { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; static ble_gap_adv_data_t ble_gap_adv_data = { . adv_data = { . p_data = ble_enc_advdata , . len = BLE_GAP_ADV_SET_DATA_SIZE_MAX }, . scan_rsp_data = { . p_data = NULL , . len = 0 } }; Build Option\u306e\u8a2d\u5b9a Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b Preprocessor -> User Include Directories Path (SDK_PATH)/components/ble/common SDK Source File\u306e\u53d6\u308a\u8fbc\u307f Project\u306b\u4ee5\u4e0b\u306eSource\u3092\u53d6\u308a\u8fbc\u3080 Source (SDK_PATH)/components/ble/common/ble_advdata.c AdvData\u306e\u4f5c\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void ble_advertising_init ( void ) { ble_advdata_manuf_data_t manuf_specific_data ; ble_advdata_t advdata ; memset ( & advdata , 0x00 , sizeof ( ble_advdata_t )); memset ( & ble_gap_adv_params , 0x00 , sizeof ( ble_gap_adv_params_t )); manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . p_manuf_specific_data = & manuf_specific_data ; ble_gap_adv_params . properties . type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED ; ble_gap_adv_params . p_peer_addr = NULL ; ble_gap_adv_params . filter_policy = BLE_GAP_ADV_FP_ANY ; ble_gap_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; ble_gap_adv_params . duration = 0 ; APP_ERROR_CHECK ( ble_advdata_encode ( & advdata , ble_gap_adv_data . adv_data . p_data , & ble_gap_adv_data . adv_data . len )); APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & ble_adv_handle , & ble_gap_adv_data , & ble_gap_adv_params )); } main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_sdh.h\" #include \"nrf_sdh_ble.h\" #include \"ble_advdata.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 #define APP_BLE_CONN_CFG_TAG 1 #define APP_COMPANY_IDENTIFIER 0x004C #define APP_BEACON_INFO_LENGTH 0x17 #define APP_BEACON_TYPE 0x02,0x15 #define APP_BEACON_UUID 0x01,0x12,0x23,0x34,0x45,0xAA,0x67,0x78,0x89,0xBA,0x13,0xBC,0x33,0x1A,0x22,0xF0 #define APP_MAJOR_VALUE 0x01,0x02 #define APP_MINOR_VALUE 0x03,0x04 #define APP_MEASURED_RSSI 0xC3 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) extern uint32_t __app_ram_start__ ; static ble_gap_adv_params_t ble_gap_adv_params ; static uint8_t ble_enc_advdata [ BLE_GAP_ADV_SET_DATA_SIZE_MAX ]; static uint8_t ble_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET ; static uint8_t beacon_info [ APP_BEACON_INFO_LENGTH ] = { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; static ble_gap_adv_data_t ble_gap_adv_data = { . adv_data = { . p_data = ble_enc_advdata , . len = BLE_GAP_ADV_SET_DATA_SIZE_MAX }, . scan_rsp_data = { . p_data = NULL , . len = 0 } }; void ble_advertising_init ( void ) { ble_advdata_manuf_data_t manuf_specific_data ; ble_advdata_t advdata ; memset ( & advdata , 0x00 , sizeof ( ble_advdata_t )); memset ( & ble_gap_adv_params , 0x00 , sizeof ( ble_gap_adv_params_t )); manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . p_manuf_specific_data = & manuf_specific_data ; ble_gap_adv_params . properties . type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED ; ble_gap_adv_params . p_peer_addr = NULL ; ble_gap_adv_params . filter_policy = BLE_GAP_ADV_FP_ANY ; ble_gap_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; ble_gap_adv_params . duration = 0 ; APP_ERROR_CHECK ( ble_advdata_encode ( & advdata , ble_gap_adv_data . adv_data . p_data , & ble_gap_adv_data . adv_data . len )); APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & ble_adv_handle , & ble_gap_adv_data , & ble_gap_adv_params )); } void ble_stack_init ( void ) { APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); } void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); ble_stack_init (); ble_advertising_init (); bsp_board_led_on ( LED1 ); while ( true ) { if ( NRF_LOG_PROCESS () == false ) { nrf_pwr_mgmt_run (); } } }","title":"AdvData\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/008_advdata/#advdata","text":"","title":"AdvData\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/008_advdata/#define","text":"1 2 3 4 5 6 7 8 #define APP_COMPANY_IDENTIFIER 0x004C #define APP_BEACON_INFO_LENGTH 0x17 #define APP_BEACON_TYPE 0x02,0x15 #define APP_BEACON_UUID 0x01,0x12,0x23,0x34,0x45,0xAA,0x67,0x78,0x89,0xBA,0x13,0xBC,0x33,0x1A,0x22,0xF0 #define APP_MAJOR_VALUE 0x01,0x02 #define APP_MINOR_VALUE 0x03,0x04 #define APP_MEASURED_RSSI 0xC3 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS)","title":"Define\u306e\u5b9a\u7fa9"},{"location":"6.iBeacon/ses/008_advdata/#data","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static ble_gap_adv_params_t ble_gap_adv_params ; static uint8_t ble_enc_advdata [ BLE_GAP_ADV_SET_DATA_SIZE_MAX ]; static uint8_t ble_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET ; static uint8_t beacon_info [ APP_BEACON_INFO_LENGTH ] = { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; static ble_gap_adv_data_t ble_gap_adv_data = { . adv_data = { . p_data = ble_enc_advdata , . len = BLE_GAP_ADV_SET_DATA_SIZE_MAX }, . scan_rsp_data = { . p_data = NULL , . len = 0 } };","title":"Data\u306e\u5b9a\u7fa9"},{"location":"6.iBeacon/ses/008_advdata/#build-option","text":"Project Explorer\u3067Project\u9078\u629e\u5f8c\u3001Options\u30dc\u30bf\u30f3\u304b\u3089Option\u753b\u9762\u3092\u958b\u304f\u3002\u305d\u306e\u5f8c\u3001\u5de6\u4e0a\u306edrop-down list\u3067Private Configuration\u306eCommon\u3092\u9078\u629e\u3057\u3001\u4ee5\u4e0b\u306eOption\u3092\u8ffd\u52a0\u8a2d\u5b9a\u3059\u308b","title":"Build Option\u306e\u8a2d\u5b9a"},{"location":"6.iBeacon/ses/008_advdata/#preprocessor-user-include-directories","text":"Path (SDK_PATH)/components/ble/common","title":"Preprocessor -&gt; User Include Directories"},{"location":"6.iBeacon/ses/008_advdata/#sdk-source-file","text":"Project\u306b\u4ee5\u4e0b\u306eSource\u3092\u53d6\u308a\u8fbc\u3080 Source (SDK_PATH)/components/ble/common/ble_advdata.c","title":"SDK Source File\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"6.iBeacon/ses/008_advdata/#advdata_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void ble_advertising_init ( void ) { ble_advdata_manuf_data_t manuf_specific_data ; ble_advdata_t advdata ; memset ( & advdata , 0x00 , sizeof ( ble_advdata_t )); memset ( & ble_gap_adv_params , 0x00 , sizeof ( ble_gap_adv_params_t )); manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . p_manuf_specific_data = & manuf_specific_data ; ble_gap_adv_params . properties . type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED ; ble_gap_adv_params . p_peer_addr = NULL ; ble_gap_adv_params . filter_policy = BLE_GAP_ADV_FP_ANY ; ble_gap_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; ble_gap_adv_params . duration = 0 ; APP_ERROR_CHECK ( ble_advdata_encode ( & advdata , ble_gap_adv_data . adv_data . p_data , & ble_gap_adv_data . adv_data . len )); APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & ble_adv_handle , & ble_gap_adv_data , & ble_gap_adv_params )); } main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_sdh.h\" #include \"nrf_sdh_ble.h\" #include \"ble_advdata.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 #define APP_BLE_CONN_CFG_TAG 1 #define APP_COMPANY_IDENTIFIER 0x004C #define APP_BEACON_INFO_LENGTH 0x17 #define APP_BEACON_TYPE 0x02,0x15 #define APP_BEACON_UUID 0x01,0x12,0x23,0x34,0x45,0xAA,0x67,0x78,0x89,0xBA,0x13,0xBC,0x33,0x1A,0x22,0xF0 #define APP_MAJOR_VALUE 0x01,0x02 #define APP_MINOR_VALUE 0x03,0x04 #define APP_MEASURED_RSSI 0xC3 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) extern uint32_t __app_ram_start__ ; static ble_gap_adv_params_t ble_gap_adv_params ; static uint8_t ble_enc_advdata [ BLE_GAP_ADV_SET_DATA_SIZE_MAX ]; static uint8_t ble_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET ; static uint8_t beacon_info [ APP_BEACON_INFO_LENGTH ] = { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; static ble_gap_adv_data_t ble_gap_adv_data = { . adv_data = { . p_data = ble_enc_advdata , . len = BLE_GAP_ADV_SET_DATA_SIZE_MAX }, . scan_rsp_data = { . p_data = NULL , . len = 0 } }; void ble_advertising_init ( void ) { ble_advdata_manuf_data_t manuf_specific_data ; ble_advdata_t advdata ; memset ( & advdata , 0x00 , sizeof ( ble_advdata_t )); memset ( & ble_gap_adv_params , 0x00 , sizeof ( ble_gap_adv_params_t )); manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . p_manuf_specific_data = & manuf_specific_data ; ble_gap_adv_params . properties . type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED ; ble_gap_adv_params . p_peer_addr = NULL ; ble_gap_adv_params . filter_policy = BLE_GAP_ADV_FP_ANY ; ble_gap_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; ble_gap_adv_params . duration = 0 ; APP_ERROR_CHECK ( ble_advdata_encode ( & advdata , ble_gap_adv_data . adv_data . p_data , & ble_gap_adv_data . adv_data . len )); APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & ble_adv_handle , & ble_gap_adv_data , & ble_gap_adv_params )); } void ble_stack_init ( void ) { APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); } void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); ble_stack_init (); ble_advertising_init (); bsp_board_led_on ( LED1 ); while ( true ) { if ( NRF_LOG_PROCESS () == false ) { nrf_pwr_mgmt_run (); } } }","title":"AdvData\u306e\u4f5c\u6210"},{"location":"6.iBeacon/ses/009_advstart/","text":"Advertising\u306e\u958b\u59cb Advertising\u306e\u958b\u59cb 1 2 3 void ble_advertising_start ( void ) { APP_ERROR_CHECK ( sd_ble_gap_adv_start ( ble_adv_handle , APP_BLE_CONN_CFG_TAG )); } main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_sdh.h\" #include \"nrf_sdh_ble.h\" #include \"ble_advdata.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 #define APP_BLE_CONN_CFG_TAG 1 #define APP_COMPANY_IDENTIFIER 0x004C #define APP_BEACON_INFO_LENGTH 0x17 #define APP_BEACON_TYPE 0x02,0x15 #define APP_BEACON_UUID 0x01,0x12,0x23,0x34,0x45,0xAA,0x67,0x78,0x89,0xBA,0x13,0xBC,0x33,0x1A,0x22,0xF0 #define APP_MAJOR_VALUE 0x01,0x02 #define APP_MINOR_VALUE 0x03,0x04 #define APP_MEASURED_RSSI 0xC3 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) extern uint32_t __app_ram_start__ ; static ble_gap_adv_params_t ble_gap_adv_params ; static uint8_t ble_enc_advdata [ BLE_GAP_ADV_SET_DATA_SIZE_MAX ]; static uint8_t ble_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET ; static uint8_t beacon_info [ APP_BEACON_INFO_LENGTH ] = { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; static ble_gap_adv_data_t ble_gap_adv_data = { . adv_data = { . p_data = ble_enc_advdata , . len = BLE_GAP_ADV_SET_DATA_SIZE_MAX }, . scan_rsp_data = { . p_data = NULL , . len = 0 } }; void ble_advertising_start ( void ) { APP_ERROR_CHECK ( sd_ble_gap_adv_start ( ble_adv_handle , APP_BLE_CONN_CFG_TAG )); } void ble_advertising_init ( void ) { ble_advdata_manuf_data_t manuf_specific_data ; ble_advdata_t advdata ; memset ( & advdata , 0x00 , sizeof ( ble_advdata_t )); memset ( & ble_gap_adv_params , 0x00 , sizeof ( ble_gap_adv_params_t )); manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . p_manuf_specific_data = & manuf_specific_data ; ble_gap_adv_params . properties . type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED ; ble_gap_adv_params . p_peer_addr = NULL ; ble_gap_adv_params . filter_policy = BLE_GAP_ADV_FP_ANY ; ble_gap_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; ble_gap_adv_params . duration = 0 ; APP_ERROR_CHECK ( ble_advdata_encode ( & advdata , ble_gap_adv_data . adv_data . p_data , & ble_gap_adv_data . adv_data . len )); APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & ble_adv_handle , & ble_gap_adv_data , & ble_gap_adv_params )); } void ble_stack_init ( void ) { APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); } void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); ble_stack_init (); ble_advertising_init (); ble_advertising_start (); bsp_board_led_on ( LED1 ); while ( true ) { if ( NRF_LOG_PROCESS () == false ) { nrf_pwr_mgmt_run (); } } }","title":"Advertising\u306e\u958b\u59cb"},{"location":"6.iBeacon/ses/009_advstart/#advertising","text":"","title":"Advertising\u306e\u958b\u59cb"},{"location":"6.iBeacon/ses/009_advstart/#advertising_1","text":"1 2 3 void ble_advertising_start ( void ) { APP_ERROR_CHECK ( sd_ble_gap_adv_start ( ble_adv_handle , APP_BLE_CONN_CFG_TAG )); } main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_sdh.h\" #include \"nrf_sdh_ble.h\" #include \"ble_advdata.h\" #define NRF_LOG_MODULE_NAME iBEACON_SAMPLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define LED1 BSP_BOARD_LED_0 #define APP_BLE_CONN_CFG_TAG 1 #define APP_COMPANY_IDENTIFIER 0x004C #define APP_BEACON_INFO_LENGTH 0x17 #define APP_BEACON_TYPE 0x02,0x15 #define APP_BEACON_UUID 0x01,0x12,0x23,0x34,0x45,0xAA,0x67,0x78,0x89,0xBA,0x13,0xBC,0x33,0x1A,0x22,0xF0 #define APP_MAJOR_VALUE 0x01,0x02 #define APP_MINOR_VALUE 0x03,0x04 #define APP_MEASURED_RSSI 0xC3 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) extern uint32_t __app_ram_start__ ; static ble_gap_adv_params_t ble_gap_adv_params ; static uint8_t ble_enc_advdata [ BLE_GAP_ADV_SET_DATA_SIZE_MAX ]; static uint8_t ble_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET ; static uint8_t beacon_info [ APP_BEACON_INFO_LENGTH ] = { APP_BEACON_TYPE , APP_BEACON_UUID , APP_MAJOR_VALUE , APP_MINOR_VALUE , APP_MEASURED_RSSI }; static ble_gap_adv_data_t ble_gap_adv_data = { . adv_data = { . p_data = ble_enc_advdata , . len = BLE_GAP_ADV_SET_DATA_SIZE_MAX }, . scan_rsp_data = { . p_data = NULL , . len = 0 } }; void ble_advertising_start ( void ) { APP_ERROR_CHECK ( sd_ble_gap_adv_start ( ble_adv_handle , APP_BLE_CONN_CFG_TAG )); } void ble_advertising_init ( void ) { ble_advdata_manuf_data_t manuf_specific_data ; ble_advdata_t advdata ; memset ( & advdata , 0x00 , sizeof ( ble_advdata_t )); memset ( & ble_gap_adv_params , 0x00 , sizeof ( ble_gap_adv_params_t )); manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = beacon_info ; manuf_specific_data . data . size = APP_BEACON_INFO_LENGTH ; advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . p_manuf_specific_data = & manuf_specific_data ; ble_gap_adv_params . properties . type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED ; ble_gap_adv_params . p_peer_addr = NULL ; ble_gap_adv_params . filter_policy = BLE_GAP_ADV_FP_ANY ; ble_gap_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; ble_gap_adv_params . duration = 0 ; APP_ERROR_CHECK ( ble_advdata_encode ( & advdata , ble_gap_adv_data . adv_data . p_data , & ble_gap_adv_data . adv_data . len )); APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & ble_adv_handle , & ble_gap_adv_data , & ble_gap_adv_params )); } void ble_stack_init ( void ) { APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); } void log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } int main ( void ) { log_init (); NRF_LOG_INFO ( \"iBEACON_SAMPLE\" ); NRF_LOG_FLUSH (); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); ble_stack_init (); ble_advertising_init (); ble_advertising_start (); bsp_board_led_on ( LED1 ); while ( true ) { if ( NRF_LOG_PROCESS () == false ) { nrf_pwr_mgmt_run (); } } }","title":"Advertising\u306e\u958b\u59cb"},{"location":"6.iBeacon/ses/010_sample_222_Environment/","text":"Sample(222 Environment) Build Option Preprocessor Preprocessor Definitions Preprocessor Definitions NRF52832_XXAB BOARD_CUSTOM NRFX_TWI_ENABLED NRFX_TWI0_ENABLED TWI_ENABLED TWI0_ENABLED NRFX_RTC_ENABLED RTC_ENABLED NRFX_RTC1_ENABLED RTC1_ENABLED SOFTDEVICE_PRESENT User Include Directories User Include Directories ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/ble/common ../nRF5_SDK/components/softdevice/s132/headers ../nRF5_SDK/components/softdevice/common ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/button ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk ../nRF5_SDK/components/libraries/util . Linker Linker Symbol Definitions Linker Symbol Definitions app_ram_start =app_ram_start$$Base __start_sdh_req_observers=sdh_req_observers$$Base __stop_sdh_req_observers=sdh_req_observers$$Limit __start_sdh_state_observers=sdh_state_observers$$Base __stop_sdh_state_observers=sdh_state_observers$$Limit __start_pwr_mgmt_data=pwr_mgmt_data$$Base __stop_pwr_mgmt_data=pwr_mgmt_data$$Limit __start_log_const_data=log_const_data$$Base __start_log_dynamic_data=log_dynamic_data$$Base __stop_log_const_data=log_const_data$$Limit Build Memory Segments FLASH RX 0x00026000 0x0005A000 RAM RWX 0x20002210 0x0000DDF0 Code Generation ARM FP ABI Type Hard -> Soft\u306b\u5909\u66f4 Loader Additional Load File[0] Additional Load File[0] (SDK_PATH)/components/softdevice/s132/hex/s132_nrf52_6.1.0_softdevice.hex SDK Source Code SDK Source Code (SDK_PATH)/components/libraries/util/app_error.c (SDK_PATH)/components/libraries/util/app_error_handler_gcc.c (SDK_PATH)/components/libraries/util/app_error_weak.c (SDK_PATH)/components/libraries/util/app_util_platform.c (SDK_PATH)/components/ble/common/ble_advdata.c (SDK_PATH)/components/boards/boards.c (SDK_PATH)/components/libraries/atomic/nrf_atomic.c (SDK_PATH)/components/libraries/balloc/nrf_balloc.c (SDK_PATH)/integration/nrfx/legacy/nrf_drv_clock.c (SDK_PATH)/integration/nrfx/legacy/nrf_drv_twi.c (SDK_PATH)/integration/nrfx/legacy/nrf_drv_uart.c (SDK_PATH)/external/fprintf/nrf_fprintf.c (SDK_PATH)/external/fprintf/nrf_fprintf_format.c (SDK_PATH)/components/libraries/log/src/nrf_log_backend_serial.c (SDK_PATH)/components/libraries/log/src/nrf_log_backend_uart.c (SDK_PATH)/components/libraries/log/src/nrf_log_default_backends.c (SDK_PATH)/components/libraries/log/src/nrf_log_frontend.c (SDK_PATH)/components/libraries/log/src/nrf_log_str_formatter.c (SDK_PATH)/components/libraries/memobj/nrf_memobj.c (SDK_PATH)/components/libraries/pwr_mgmt/nrf_pwr_mgmt.c (SDK_PATH)/components/libraries/ringbuf/nrf_ringbuf.c (SDK_PATH)/components/softdevice/common/nrf_sdh.c (SDK_PATH)/components/softdevice/common/nrf_sdh_ble.c (SDK_PATH)/components/libraries/experimental_section_vars/nrf_section_iter.c (SDK_PATH)/components/libraries/strerror/nrf_strerror.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_clock.c (SDK_PATH)/modules/nrfx/drivers/src/prs/nrfx_prs.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_rtc.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_twi.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_uart.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_uarte.c Linker Script(SEGGER_Flash.icf) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // ********************************************************************** // * SEGGER Microcontroller GmbH * // * The Embedded Experts * // ********************************************************************** // * * // * (c) 2014 - 2018 SEGGER Microcontroller GmbH * // * (c) 2001 - 2018 Rowley Associates Limited * // * * // * www.segger.com Support: support@segger.com * // * * // ********************************************************************** // * * // * All rights reserved. * // * * // * Redistribution and use in source and binary forms, with or * // * without modification, are permitted provided that the following * // * conditions are met: * // * * // * - Redistributions of source code must retain the above copyright * // * notice, this list of conditions and the following disclaimer. * // * * // * - Neither the name of SEGGER Microcontroller GmbH * // * nor the names of its contributors may be used to endorse or * // * promote products derived from this software without specific * // * prior written permission. * // * * // * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND * // * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, * // * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * // * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * // * DISCLAIMED. * // * IN NO EVENT SHALL SEGGER Microcontroller GmbH BE LIABLE FOR * // * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * // * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT * // * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; * // * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * // * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT * // * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * // * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * // * DAMAGE. * // * * // ********************************************************************** define memory with size = 4 G ; // // Block definitions // define block ctors { section . ctors , section . ctors . * , block with alphabetical order { init_array } }; define block dtors { section . dtors , section . dtors . * , block with reverse alphabetical order { fini_array } }; define block exidx { section . ARM . exidx , section . ARM . exidx . * }; define block tbss { section . tbss , section . tbss . * }; define block tdata { section . tdata , section . tdata . * }; define block tls { block tbss , block tdata }; define block tdata_load { copy of block tdata }; define block heap with size = __HEAPSIZE__ , alignment = 8 , /* fill =0x00, */ readwrite access { }; define block stack with size = __STACKSIZE__ , alignment = 8 , /* fill =0xCD, */ readwrite access { }; define block log_const_data { section . log_const_data * }; define block log_dynamic_data { section . log_dynamic_data * }; define block pwr_mgmt_data { section . pwr_mgmt_data * }; define block app_ram_start { }; define block sdh_req_observers { section . sdh_req_observers * }; define block sdh_state_observers { section . sdh_state_observers * }; // // Explicit initialization settings for sections // do not initialize { section . non_init , section . non_init . * }; initialize by copy /* with packing=auto */ { section . data , section . data . * }; initialize by copy /* with packing=auto */ { section . fast , section . fast . * }; // // ROM Placement // place at start of FLASH { section . vectors // Vector table section }; place in FLASH with minimum size order { section . init , section . init . * , // Init code section section . text , section . text . * , // Code section section . rodata , section . rodata . * , // Read-only data section section . segger . * , // Auto-generated initialization block exidx , // ARM exception unwinding block block ctors , // Constructors block block dtors // Destructors block }; place in FLASH { block tdata_load , // Thread-local-storage load image section . nrf_balloc , section . log_backends , block log_const_data , block log_dynamic_data , block pwr_mgmt_data , block sdh_req_observers , block sdh_state_observers }; // // RAM Placement // place in RAM { // Special sections section . non_init , section . non_init . * , // No initialization section block tls , // Thread-local-storage block block app_ram_start }; place in RAM with auto order { // Initialized sections section . fast , section . fast . * , // \"ramfunc\" section section . data , section . data . * , // Initialized data section section . bss , section . bss . * // Static data section }; place in RAM { /* expandable */ block heap // Heap reserved block }; place at end of RAM { block stack // Stack reserved block at the end }; Sample Code main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #define NRF_LOG_MODULE_NAME MAIN #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsec_integration.h\" #include \"app_log.h\" #include \"app_twi.h\" #include \"app_bsec.h\" #include \"app_ble.h\" #define LED1 BSP_BOARD_LED_0 #define TEMP_OFFSET 0.0f NRF_LOG_MODULE_REGISTER (); int main ( void ) { return_values_init rc_init ; bsec_version_t bsec_version ; app_log_init (); NRF_LOG_INFO ( \"ble advertising + bsec sample\" ); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); app_ble_stack_init (); app_twi_init (); app_bsec_rtc_init (); bsec_get_version ( & bsec_version ); NRF_LOG_DEBUG ( \"bsec_version.major : %d\" , bsec_version . major ); NRF_LOG_DEBUG ( \"bsec_version.minor : %d\" , bsec_version . minor ); NRF_LOG_DEBUG ( \"bsec_version.major_bugfix : %d\" , bsec_version . major_bugfix ); NRF_LOG_DEBUG ( \"bsec_version.minor_bugfix : %d\" , bsec_version . minor_bugfix ); rc_init = bsec_iot_init ( BSEC_SAMPLE_RATE_LP , TEMP_OFFSET , app_twi_tx_func , app_twi_rx_func , app_bsec_sleep , app_bsec_state_load , app_bsec_config_load ); NRF_LOG_DEBUG ( \"rc_init.bme680_status : %d\" , rc_init . bme680_status ); NRF_LOG_DEBUG ( \"rc_init.bsec_status : %d\" , rc_init . bsec_status ); if ( rc_init . bme680_status == BSEC_OK && rc_init . bsec_status == BSEC_OK ) { bsec_iot_loop ( app_bsec_sleep , app_bsec_get_timestamp , app_bsec_output , app_bsec_state_save , 10000 ); } } app_log.h 1 2 3 4 5 6 #ifndef _APP_LOG_H #define _APP_LOG_H void app_log_init ( void ); #endif app_log.c 1 2 3 4 5 6 7 8 9 10 11 #include \"app_error.h\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #include \"app_log.h\" void app_log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } app_twi.h 1 2 3 4 5 6 7 8 #ifndef _APP_TWI_H #define _APP_TWI_H void app_twi_init ( void ); int8_t app_twi_tx_func ( uint8_t dev_addr , uint8_t reg_addr , uint8_t * tx_buff_addr , uint16_t tx_data_size ); int8_t app_twi_rx_func ( uint8_t dev_addr , uint8_t reg_addr , uint8_t * rx_buff_addr , uint16_t rx_data_size ); #endif app_twi.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 #define NRF_LOG_MODULE_NAME APP_TWI #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_log.h\" #include \"app_twi.h\" #define ARDUINO_SCL_PIN 27 #define ARDUINO_SDA_PIN 26 static nrf_drv_twi_t app_twi_instance = NRF_DRV_TWI_INSTANCE ( 0 ); static volatile bool app_twi_xfer_done = false ; NRF_LOG_MODULE_REGISTER (); void app_twi_event_handler ( nrf_drv_twi_evt_t const * a_event , void * a_context ) { NRF_LOG_DEBUG ( \"app_twi_event_handler() ### START ###\" ); NRF_LOG_DEBUG ( \"a_event->type = %d\" , a_event -> type ); switch ( a_event -> type ) { case NRF_DRV_TWI_EVT_DONE : NRF_LOG_DEBUG ( \"app_twi_xfer_done = %d\" , app_twi_xfer_done ); if ( app_twi_xfer_done == false ) { app_twi_xfer_done = true ; } break ; default : break ; } NRF_LOG_DEBUG ( \"app_twi_event_handler() ### END ###\" ); } void app_twi_init ( void ) { NRF_LOG_DEBUG ( \"app_twi_init() ### START ###\" ); nrf_drv_twi_config_t config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_400K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; APP_ERROR_CHECK ( nrf_drv_twi_init ( & app_twi_instance , & config , app_twi_event_handler , NULL )); nrf_drv_twi_enable ( & app_twi_instance ); NRF_LOG_DEBUG ( \"app_twi_init() ### END ###\" ); } int8_t app_twi_tx_func ( uint8_t dev_id , uint8_t reg_addr , uint8_t * data , uint16_t len ) { uint8_t tx_buf [ len + 1 ]; NRF_LOG_DEBUG ( \"app_twi_tx_func() ### START ###\" ); NRF_LOG_DEBUG ( \"dev_id : %02X\" , dev_id ); NRF_LOG_DEBUG ( \"reg_addr : %02X\" , reg_addr ); NRF_LOG_DEBUG ( \"data : %08X\" , data ); NRF_LOG_DEBUG ( \"len : %d\" , len ); memset ( tx_buf , 0 , len + 1 ); tx_buf [ 0 ] = reg_addr ; if ( len ) { memcpy ( & tx_buf [ 1 ], data , len ); } NRF_LOG_HEXDUMP_DEBUG ( tx_buf , len + 1 ); app_twi_xfer_done = false ; APP_ERROR_CHECK ( nrf_drv_twi_tx ( & app_twi_instance , dev_id , tx_buf , len + 1 , false )); while ( app_twi_xfer_done == false ); NRF_LOG_DEBUG ( \"app_twi_tx_func() ### END ###\" ); return 0 ; } int8_t app_twi_rx_func ( uint8_t dev_id , uint8_t reg_addr , uint8_t * data , uint16_t len ) { NRF_LOG_DEBUG ( \"app_twi_rx_func() ### START ###\" ); NRF_LOG_DEBUG ( \"dev_id : %02X\" , dev_id ); NRF_LOG_DEBUG ( \"reg_addr : %02X\" , reg_addr ); NRF_LOG_DEBUG ( \"data : %08X\" , data ); NRF_LOG_DEBUG ( \"len : %d\" , len ); memset ( data , 0x00 , len ); app_twi_tx_func ( dev_id , reg_addr , NULL , 0 ); app_twi_xfer_done = false ; APP_ERROR_CHECK ( nrf_drv_twi_rx ( & app_twi_instance , dev_id , data , len )); while ( app_twi_xfer_done == false ); NRF_LOG_HEXDUMP_DEBUG ( data , len ); NRF_LOG_DEBUG ( \"app_twi_rx_func() ### END ###\" ); return 0 ; } app_bsec.h 1 2 3 4 5 6 7 8 9 10 11 12 #ifndef _APP_BSEC_H #define _APP_BSEC_H void app_bsec_output ( int64_t , float , uint8_t , float , float , float , float , float , float , bsec_library_return_t , float , float , float ); void app_bsec_state_save ( const uint8_t * , uint32_t ); int64_t app_bsec_get_timestamp ( void ); void app_bsec_sleep ( uint32_t ); uint32_t app_bsec_state_load ( uint8_t * , uint32_t ); uint32_t app_bsec_config_load ( uint8_t * , uint32_t ); void app_bsec_rtc_init ( void ); #endif app_bsec.c SoftDevice\u6709\u52b9\u6642\u306bRTC1\u3092\u4f7f\u3046\u5834\u5408\u3001CLOCK\u95a2\u9023\u306e\u521d\u671f\u5316\u306fSoftDevice\u304c\u5b9f\u65bd\u3059\u308b\u306e\u3067\u3001APL\u5074\u3067\u3084\u3063\u3066\u306f\u3044\u3051\u306a\u3044 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #define NRF_LOG_MODULE_NAME APP_BSEC #include <stdint.h> #include \"nrf_drv_rtc.h\" #include \"nrf_drv_clock.h\" #include \"nrf_delay.h\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsec_integration.h\" #include \"app_ble.h\" #include \"app_bsec.h\" nrf_drv_rtc_t app_bsec_rtc = NRF_DRV_RTC_INSTANCE ( 1 ); static uint32_t app_bsec_rtc_ovr_flw_ctr = 0 ; static int32_t app_bsec_rtc_max_ticks = 0 ; NRF_LOG_MODULE_REGISTER (); void app_bsec_rtc_handler ( nrf_drv_rtc_int_type_t int_type ) { NRF_LOG_DEBUG ( \"app_bsec_rtc_handler() ### START ###\" ); NRF_LOG_DEBUG ( \"int_type = %d\" , int_type ); if ( int_type == NRF_DRV_RTC_INT_OVERFLOW ) { NRF_LOG_DEBUG ( \"rtc1 overflow detection.\" ); app_bsec_rtc_ovr_flw_ctr ++ ; } NRF_LOG_DEBUG ( \"app_bsec_rtc_handler() ### END ###\" ); } void app_bsec_rtc_init ( void ) { nrf_drv_rtc_config_t app_bsec_rtc_config = NRF_DRV_RTC_DEFAULT_CONFIG ; #ifndef SOFTDEVICE_PRESENT APP_ERROR_CHECK ( nrf_drv_clock_init ()); nrf_drv_clock_lfclk_request ( NULL ); #endif APP_ERROR_CHECK ( nrf_drv_rtc_init ( & app_bsec_rtc , & app_bsec_rtc_config , app_bsec_rtc_handler )); nrf_drv_rtc_enable ( & app_bsec_rtc ); nrf_drv_rtc_overflow_enable ( & app_bsec_rtc , true ); app_bsec_rtc_max_ticks = nrf_drv_rtc_max_ticks_get ( & app_bsec_rtc ); } void app_bsec_output ( int64_t timestamp , float iaq , uint8_t iaq_accuracy , float temperature , float humidity , float pressure , float raw_temperature , float raw_humidity , float gas , bsec_library_return_t bsec_status , float static_iaq , float co2_equivalent , float breath_voc_equivalent ) { NRF_LOG_DEBUG ( \"app_bsec_output() ### START ###\" ); NRF_LOG_INFO ( \"timestamp : %lu\" , timestamp / 10000000 ); NRF_LOG_INFO ( \"iaq : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( iaq )); NRF_LOG_INFO ( \"iaq_accuracy : %d\" , iaq_accuracy ); NRF_LOG_INFO ( \"temperature : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( temperature )); NRF_LOG_INFO ( \"humidity : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( humidity )); NRF_LOG_INFO ( \"pressure : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( pressure )); NRF_LOG_INFO ( \"raw_temperature : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( raw_temperature )); NRF_LOG_INFO ( \"raw_humidity : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( raw_humidity )); NRF_LOG_INFO ( \"gas : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( gas )); NRF_LOG_INFO ( \"bsec_status : %d\" , bsec_status ); NRF_LOG_INFO ( \"static_iaq : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( static_iaq )); NRF_LOG_INFO ( \"co2_equivalent : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( co2_equivalent )); NRF_LOG_INFO ( \"breath_voc_equivalent : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( breath_voc_equivalent )); NRF_LOG_DEBUG ( \"app_bsec_output() ### END ###\" ); app_ble_beacon_info_set ( temperature * 100 , humidity * 100 , pressure / 100 , gas , iaq * 100 ); app_ble_advertising_start (); } void app_bsec_state_save ( const uint8_t * a_state , uint32_t len ) { NRF_LOG_DEBUG ( \"app_bsec_state_save() ### START ###\" ); NRF_LOG_DEBUG ( \"a_state : 0x%08X\" , a_state ); NRF_LOG_DEBUG ( \"len : %d\" , len ); NRF_LOG_DEBUG ( \"app_bsec_state_save() ### END ###\" ); } int64_t app_bsec_get_timestamp ( void ) { int32_t rtc_counter = nrf_drv_rtc_counter_get ( & app_bsec_rtc ); float temp1 , temp2 ; int64_t ret ; NRF_LOG_DEBUG ( \"app_bsec_get_timestamp() ### START ###\" ); NRF_LOG_DEBUG ( \"rtc_counter = %u\" , rtc_counter ); ret = ( float )(( float ) rtc_counter + ( float )( app_bsec_rtc_max_ticks * app_bsec_rtc_ovr_flw_ctr )) / ( float ) NRFX_RTC_DEFAULT_CONFIG_FREQUENCY * 1000000 ; NRF_LOG_DEBUG ( \"ret = %ld\" , ret ); NRF_LOG_DEBUG ( \"app_bsec_get_timestamp() ### END ###\" ); return ret ; } void app_bsec_sleep ( uint32_t msec ) { NRF_LOG_DEBUG ( \"app_bsec_sleep() ### START ###\" ); NRF_LOG_DEBUG ( \"msec = %d\" , msec ); nrf_delay_ms ( msec ); NRF_LOG_DEBUG ( \"app_bsec_sleep() ### END ###\" ); } uint32_t app_bsec_state_load ( uint8_t * a_buf , uint32_t buf_size ) { uint8_t work_buffer_state [ BSEC_MAX_STATE_BLOB_SIZE ]; uint32_t n_work_buffer_size = BSEC_MAX_STATE_BLOB_SIZE ; uint32_t n_serialized_state = 0 ; NRF_LOG_DEBUG ( \"app_bsec_state_load() ### START ###\" ); bsec_get_state ( 0 , a_buf , buf_size , work_buffer_state , n_work_buffer_size , & n_serialized_state ); NRF_LOG_HEXDUMP_DEBUG ( a_buf , n_serialized_state ); NRF_LOG_DEBUG ( \"app_bsec_state_load() ### END ### n_serialized_state : %d\" , n_serialized_state ); return n_serialized_state ; } uint32_t app_bsec_config_load ( uint8_t * a_buf , uint32_t buf_size ) { uint8_t work_buffer [ BSEC_MAX_PROPERTY_BLOB_SIZE ]; uint32_t n_work_buffer = BSEC_MAX_PROPERTY_BLOB_SIZE ; uint32_t n_serialized_settings = 0 ; NRF_LOG_DEBUG ( \"app_bsec_config_load() ### START ###\" ); bsec_get_configuration ( 0 , a_buf , buf_size , work_buffer , n_work_buffer , & n_serialized_settings ); NRF_LOG_HEXDUMP_DEBUG ( a_buf , n_serialized_settings ); NRF_LOG_DEBUG ( \"app_bsec_config_load() ### END ### n_serialized_settings : %d\" , n_serialized_settings ); return n_serialized_settings ; } app_ble.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #ifndef _APP_BLE_H #define _APP_BLE_H #include <stdint.h> #ifdef SOFTDEVICE_PRESENT void app_ble_stack_init ( void ); void app_ble_advertising_init ( void ); void app_ble_advertising_start ( void ); void app_ble_beacon_info_set ( uint16_t temperature , uint16_t hummidity , uint16_t pressure , uint32_t gas , uint16_t iaq ); extern uint32_t __app_ram_start__ ; #else #define app_ble_stack_init() #define app_ble_advertising_init() #define app_ble_advertising_start() #define app_ble_beacon_info_set(temperature, humidyty, pressure, gas, iaq) #endif #endif app_ble.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 #ifdef SOFTDEVICE_PRESENT #define NRF_LOG_MODULE_NAME APP_BLE #include \"app_error.h\" #include \"nrf_sdh.h\" #include \"nrf_sdh_ble.h\" #include \"ble_advdata.h\" #include \"nrf_error_sdm.h\" #include \"nrf_log.h\" #include \"app_ble.h\" #define APP_BLE_CONN_CFG_TAG 1 #define APP_COMPANY_IDENTIFIER 0x0059 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) #define APP_BLE_ADVERTISING_STATUS_START 1 #define APP_BLE_ADVERTISING_STATUS_STOP 0 typedef struct { uint8_t sensor_id [ 4 ]; uint8_t device_id [ 2 ]; uint8_t temperature [ 2 ]; uint8_t humidity [ 2 ]; uint8_t pressure [ 2 ]; uint8_t gas [ 4 ]; uint8_t iaq [ 2 ]; } app_ble_bme680_advertising_data_t ; extern uint32_t __app_ram_start__ ; static ble_gap_adv_params_t app_ble_gap_adv_params ; static uint8_t app_ble_enc_advdata [ BLE_GAP_ADV_SET_DATA_SIZE_MAX ]; static uint8_t app_ble_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET ; static uint16_t app_ble_conn_handle = BLE_CONN_HANDLE_INVALID ; static uint8_t app_ble_advertising_status = APP_BLE_ADVERTISING_STATUS_STOP ; static ble_gap_adv_data_t app_ble_gap_adv_data = { . adv_data = { . p_data = app_ble_enc_advdata , . len = BLE_GAP_ADV_SET_DATA_SIZE_MAX }, . scan_rsp_data = { . p_data = NULL , . len = 0 } }; app_ble_bme680_advertising_data_t app_ble_bme680_advertising_data = { . sensor_id = { 0xff , 0xff , 0xff , 0xff }, . device_id = { 0xff , 0xff }, }; NRF_LOG_MODULE_REGISTER (); void app_ble_stack_init ( void ) { NRF_LOG_DEBUG ( \"app_ble_stack_init() ### START ###\" ); APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); NRF_LOG_DEBUG ( \"app_ble_stack_init() ### END ###\" ); } void app_ble_advertising_init ( void ) { NRF_LOG_DEBUG ( \"app_ble_advertising_init() ### START ###\" ); ble_advdata_manuf_data_t manuf_specific_data ; ble_advdata_t advdata ; memset ( & advdata , 0x00 , sizeof ( ble_advdata_t )); memset ( & app_ble_gap_adv_params , 0x00 , sizeof ( ble_gap_adv_params_t )); manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * )( & app_ble_bme680_advertising_data ); manuf_specific_data . data . size = sizeof ( app_ble_bme680_advertising_data_t ); advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . p_manuf_specific_data = & manuf_specific_data ; app_ble_gap_adv_params . properties . type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED ; app_ble_gap_adv_params . p_peer_addr = NULL ; app_ble_gap_adv_params . filter_policy = BLE_GAP_ADV_FP_ANY ; app_ble_gap_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; app_ble_gap_adv_params . duration = 0 ; APP_ERROR_CHECK ( ble_advdata_encode ( & advdata , app_ble_gap_adv_data . adv_data . p_data , & app_ble_gap_adv_data . adv_data . len )); NRF_LOG_DEBUG ( \"app_ble_advertising_init() ### END ###\" ); } void app_ble_advertising_update ( void ) { NRF_LOG_DEBUG ( \"app_ble_advertising_update() ### START ###\" ); APP_ERROR_CHECK ( sd_ble_gap_adv_stop ( app_ble_adv_handle )); APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & app_ble_adv_handle , & app_ble_gap_adv_data , & app_ble_gap_adv_params )); APP_ERROR_CHECK ( sd_ble_gap_adv_start ( app_ble_adv_handle , APP_BLE_CONN_CFG_TAG )); NRF_LOG_DEBUG ( \"app_ble_advertising_update() ### END ###\" ); } void app_ble_advertising_start ( void ) { NRF_LOG_DEBUG ( \"app_ble_advertising_start() ### START ###\" ); app_ble_advertising_init (); NRF_LOG_DEBUG ( \"app_ble_advertising_status = %d\" , app_ble_advertising_status ); if ( app_ble_advertising_status == APP_BLE_ADVERTISING_STATUS_START ) { app_ble_advertising_update (); } else { APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & app_ble_adv_handle , & app_ble_gap_adv_data , & app_ble_gap_adv_params )); APP_ERROR_CHECK ( sd_ble_gap_adv_start ( app_ble_adv_handle , APP_BLE_CONN_CFG_TAG )); app_ble_advertising_status = APP_BLE_ADVERTISING_STATUS_START ; } NRF_LOG_DEBUG ( \"app_ble_advertising_start() ### END ###\" ); } void app_ble_beacon_info_set ( uint16_t temperature , uint16_t humidity , uint16_t pressure , uint32_t gas , uint16_t iaq ) { NRF_LOG_DEBUG ( \"app_ble_beacon_info_set() ### START ###\" ); NRF_LOG_INFO ( \"temperature = %u\" , temperature ); NRF_LOG_HEXDUMP_INFO ( & temperature , sizeof ( uint16_t )); NRF_LOG_INFO ( \"humidity = %u\" , humidity ); NRF_LOG_HEXDUMP_INFO ( & humidity , sizeof ( uint16_t )); NRF_LOG_INFO ( \"pressure = %u\" , pressure ); NRF_LOG_HEXDUMP_INFO ( & pressure , sizeof ( uint16_t )); NRF_LOG_INFO ( \"gas = %u\" , gas ); NRF_LOG_HEXDUMP_INFO ( & gas , sizeof ( uint32_t )); NRF_LOG_INFO ( \"iaq = %u\" , iaq ); NRF_LOG_HEXDUMP_INFO ( & iaq , sizeof ( uint16_t )); memcpy ( app_ble_bme680_advertising_data . temperature , & temperature , sizeof ( uint16_t )); memcpy ( app_ble_bme680_advertising_data . humidity , & humidity , sizeof ( uint16_t )); memcpy ( app_ble_bme680_advertising_data . pressure , & pressure , sizeof ( uint16_t )); memcpy ( app_ble_bme680_advertising_data . gas , & gas , sizeof ( uint32_t )); memcpy ( app_ble_bme680_advertising_data . iaq , & iaq , sizeof ( uint16_t )); NRF_LOG_INFO ( \"app_ble_bme680_advertising_data hex dump\" ); NRF_LOG_HEXDUMP_INFO ( & app_ble_bme680_advertising_data , sizeof ( app_ble_bme680_advertising_data_t )); NRF_LOG_DEBUG ( \"app_ble_beacon_info_set() ### END ###\" ); } #endif Cortex_M_Startup.s 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 // ********************************************************************** // * SEGGER Microcontroller GmbH * // * The Embedded Experts * // ********************************************************************** // * * // * (c) 2014 - 2018 SEGGER Microcontroller GmbH * // * (c) 2001 - 2018 Rowley Associates Limited * // * * // * www.segger.com Support: support@segger.com * // * * // ********************************************************************** // * * // * All rights reserved. * // * * // * Redistribution and use in source and binary forms, with or * // * without modification, are permitted provided that the following * // * conditions are met: * // * * // * - Redistributions of source code must retain the above copyright * // * notice, this list of conditions and the following disclaimer. * // * * // * - Neither the name of SEGGER Microcontroller GmbH * // * nor the names of its contributors may be used to endorse or * // * promote products derived from this software without specific * // * prior written permission. * // * * // * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND * // * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, * // * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * // * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * // * DISCLAIMED. * // * IN NO EVENT SHALL SEGGER Microcontroller GmbH BE LIABLE FOR * // * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * // * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT * // * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; * // * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * // * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT * // * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * // * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * // * DAMAGE. * // * * // ********************************************************************** . macro ISR_HANDLER name = . section . vectors , \"ax\" . word \\ name . section . init , \"ax\" . thumb_func . weak \\ name \\ name : 1 : b 1 b /* endless loop */ . endm . macro ISR_RESERVED . section . vectors , \"ax\" . word 0 . endm . syntax unified . global reset_handler . global Reset_Handler . equ Reset_Handler , reset_handler . section . vectors , \"ax\" . code 16 . balign 2 . global _vectors . macro DEFAULT_ISR_HANDLER name = . thumb_func . weak \\ name \\ name : 1 : b 1 b /* endless loop */ . endm _vectors : . word __stack_end__ . word reset_handler ISR_HANDLER NMI_Handler ISR_HANDLER HardFault_Handler ISR_HANDLER MemManage_Handler ISR_HANDLER BusFault_Handler ISR_HANDLER UsageFault_Handler ISR_RESERVED ISR_RESERVED ISR_RESERVED ISR_RESERVED ISR_HANDLER SVC_Handler ISR_HANDLER DebugMon_Handler ISR_RESERVED ISR_HANDLER PendSV_Handler ISR_HANDLER SysTick_Handler #ifdef __VECTORS #include __VECTORS #else ISR_HANDLER POWER_CLOCK_IRQHandler ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 ISR_HANDLER ExternalISR11 ISR_HANDLER ExternalISR12 ISR_HANDLER ExternalISR13 ISR_HANDLER ExternalISR14 ISR_HANDLER ExternalISR15 ISR_HANDLER ExternalISR16 ISR_HANDLER RTC1_IRQHandler ISR_HANDLER ExternalISR18 ISR_HANDLER ExternalISR19 ISR_HANDLER ExternalISR20 ISR_HANDLER ExternalISR21 ISR_HANDLER ExternalISR22 ISR_HANDLER ExternalISR23 ISR_HANDLER ExternalISR24 ISR_HANDLER ExternalISR25 ISR_HANDLER ExternalISR26 ISR_HANDLER ExternalISR27 ISR_HANDLER ExternalISR28 ISR_HANDLER ExternalISR29 ISR_HANDLER ExternalISR30 ISR_HANDLER ExternalISR31 #endif . section . vectors , \"ax\" _vectors_end : . section . init , \"ax\" . balign 2 . thumb_func reset_handler : #ifndef __NO_SYSTEM_INIT ldr r0 , = __stack_end__ mov sp , r0 bl SystemInit #endif #if !defined(__SOFTFP__) // Enable CP11 and CP10 with CPACR |= (0xf<<20) movw r0 , 0xED88 movt r0 , 0xE000 ldr r1 , [ r0 ] orrs r1 , r1 , # ( 0xf << 20 ) str r1 , [ r0 ] #endif b _start #ifndef __NO_SYSTEM_INIT . thumb_func . weak SystemInit SystemInit : bx lr #endif BME680/BSEC\u95a2\u9023\u306f\u2193 https://www.bosch-sensortec.com/bst/products/all_products/bsec","title":"Sample(222 Environment)"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#sample222-environment","text":"","title":"Sample(222 Environment)"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#build-option","text":"","title":"Build Option"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#preprocessor","text":"","title":"Preprocessor"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#preprocessor-definitions","text":"Preprocessor Definitions NRF52832_XXAB BOARD_CUSTOM NRFX_TWI_ENABLED NRFX_TWI0_ENABLED TWI_ENABLED TWI0_ENABLED NRFX_RTC_ENABLED RTC_ENABLED NRFX_RTC1_ENABLED RTC1_ENABLED SOFTDEVICE_PRESENT","title":"Preprocessor Definitions"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#user-include-directories","text":"User Include Directories ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/ble/common ../nRF5_SDK/components/softdevice/s132/headers ../nRF5_SDK/components/softdevice/common ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/button ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk ../nRF5_SDK/components/libraries/util .","title":"User Include Directories"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#linker","text":"","title":"Linker"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#linker-symbol-definitions","text":"Linker Symbol Definitions app_ram_start =app_ram_start$$Base __start_sdh_req_observers=sdh_req_observers$$Base __stop_sdh_req_observers=sdh_req_observers$$Limit __start_sdh_state_observers=sdh_state_observers$$Base __stop_sdh_state_observers=sdh_state_observers$$Limit __start_pwr_mgmt_data=pwr_mgmt_data$$Base __stop_pwr_mgmt_data=pwr_mgmt_data$$Limit __start_log_const_data=log_const_data$$Base __start_log_dynamic_data=log_dynamic_data$$Base __stop_log_const_data=log_const_data$$Limit","title":"Linker Symbol Definitions"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#build","text":"","title":"Build"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#memory-segments","text":"FLASH RX 0x00026000 0x0005A000 RAM RWX 0x20002210 0x0000DDF0","title":"Memory Segments"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#code-generation","text":"","title":"Code Generation"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#arm-fp-abi-type","text":"Hard -> Soft\u306b\u5909\u66f4","title":"ARM FP ABI Type"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#loader","text":"","title":"Loader"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#additional-load-file0","text":"Additional Load File[0] (SDK_PATH)/components/softdevice/s132/hex/s132_nrf52_6.1.0_softdevice.hex","title":"Additional Load File[0]"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#sdk-source-code","text":"SDK Source Code (SDK_PATH)/components/libraries/util/app_error.c (SDK_PATH)/components/libraries/util/app_error_handler_gcc.c (SDK_PATH)/components/libraries/util/app_error_weak.c (SDK_PATH)/components/libraries/util/app_util_platform.c (SDK_PATH)/components/ble/common/ble_advdata.c (SDK_PATH)/components/boards/boards.c (SDK_PATH)/components/libraries/atomic/nrf_atomic.c (SDK_PATH)/components/libraries/balloc/nrf_balloc.c (SDK_PATH)/integration/nrfx/legacy/nrf_drv_clock.c (SDK_PATH)/integration/nrfx/legacy/nrf_drv_twi.c (SDK_PATH)/integration/nrfx/legacy/nrf_drv_uart.c (SDK_PATH)/external/fprintf/nrf_fprintf.c (SDK_PATH)/external/fprintf/nrf_fprintf_format.c (SDK_PATH)/components/libraries/log/src/nrf_log_backend_serial.c (SDK_PATH)/components/libraries/log/src/nrf_log_backend_uart.c (SDK_PATH)/components/libraries/log/src/nrf_log_default_backends.c (SDK_PATH)/components/libraries/log/src/nrf_log_frontend.c (SDK_PATH)/components/libraries/log/src/nrf_log_str_formatter.c (SDK_PATH)/components/libraries/memobj/nrf_memobj.c (SDK_PATH)/components/libraries/pwr_mgmt/nrf_pwr_mgmt.c (SDK_PATH)/components/libraries/ringbuf/nrf_ringbuf.c (SDK_PATH)/components/softdevice/common/nrf_sdh.c (SDK_PATH)/components/softdevice/common/nrf_sdh_ble.c (SDK_PATH)/components/libraries/experimental_section_vars/nrf_section_iter.c (SDK_PATH)/components/libraries/strerror/nrf_strerror.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_clock.c (SDK_PATH)/modules/nrfx/drivers/src/prs/nrfx_prs.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_rtc.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_twi.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_uart.c (SDK_PATH)/modules/nrfx/drivers/src/nrfx_uarte.c","title":"SDK Source Code"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#linker-scriptsegger_flashicf","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 // ********************************************************************** // * SEGGER Microcontroller GmbH * // * The Embedded Experts * // ********************************************************************** // * * // * (c) 2014 - 2018 SEGGER Microcontroller GmbH * // * (c) 2001 - 2018 Rowley Associates Limited * // * * // * www.segger.com Support: support@segger.com * // * * // ********************************************************************** // * * // * All rights reserved. * // * * // * Redistribution and use in source and binary forms, with or * // * without modification, are permitted provided that the following * // * conditions are met: * // * * // * - Redistributions of source code must retain the above copyright * // * notice, this list of conditions and the following disclaimer. * // * * // * - Neither the name of SEGGER Microcontroller GmbH * // * nor the names of its contributors may be used to endorse or * // * promote products derived from this software without specific * // * prior written permission. * // * * // * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND * // * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, * // * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * // * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * // * DISCLAIMED. * // * IN NO EVENT SHALL SEGGER Microcontroller GmbH BE LIABLE FOR * // * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * // * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT * // * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; * // * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * // * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT * // * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * // * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * // * DAMAGE. * // * * // ********************************************************************** define memory with size = 4 G ; // // Block definitions // define block ctors { section . ctors , section . ctors . * , block with alphabetical order { init_array } }; define block dtors { section . dtors , section . dtors . * , block with reverse alphabetical order { fini_array } }; define block exidx { section . ARM . exidx , section . ARM . exidx . * }; define block tbss { section . tbss , section . tbss . * }; define block tdata { section . tdata , section . tdata . * }; define block tls { block tbss , block tdata }; define block tdata_load { copy of block tdata }; define block heap with size = __HEAPSIZE__ , alignment = 8 , /* fill =0x00, */ readwrite access { }; define block stack with size = __STACKSIZE__ , alignment = 8 , /* fill =0xCD, */ readwrite access { }; define block log_const_data { section . log_const_data * }; define block log_dynamic_data { section . log_dynamic_data * }; define block pwr_mgmt_data { section . pwr_mgmt_data * }; define block app_ram_start { }; define block sdh_req_observers { section . sdh_req_observers * }; define block sdh_state_observers { section . sdh_state_observers * }; // // Explicit initialization settings for sections // do not initialize { section . non_init , section . non_init . * }; initialize by copy /* with packing=auto */ { section . data , section . data . * }; initialize by copy /* with packing=auto */ { section . fast , section . fast . * }; // // ROM Placement // place at start of FLASH { section . vectors // Vector table section }; place in FLASH with minimum size order { section . init , section . init . * , // Init code section section . text , section . text . * , // Code section section . rodata , section . rodata . * , // Read-only data section section . segger . * , // Auto-generated initialization block exidx , // ARM exception unwinding block block ctors , // Constructors block block dtors // Destructors block }; place in FLASH { block tdata_load , // Thread-local-storage load image section . nrf_balloc , section . log_backends , block log_const_data , block log_dynamic_data , block pwr_mgmt_data , block sdh_req_observers , block sdh_state_observers }; // // RAM Placement // place in RAM { // Special sections section . non_init , section . non_init . * , // No initialization section block tls , // Thread-local-storage block block app_ram_start }; place in RAM with auto order { // Initialized sections section . fast , section . fast . * , // \"ramfunc\" section section . data , section . data . * , // Initialized data section section . bss , section . bss . * // Static data section }; place in RAM { /* expandable */ block heap // Heap reserved block }; place at end of RAM { block stack // Stack reserved block at the end };","title":"Linker Script(SEGGER_Flash.icf)"},{"location":"6.iBeacon/ses/010_sample_222_Environment/#sample-code","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #define NRF_LOG_MODULE_NAME MAIN #include \"app_error.h\" #include \"bsp.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsec_integration.h\" #include \"app_log.h\" #include \"app_twi.h\" #include \"app_bsec.h\" #include \"app_ble.h\" #define LED1 BSP_BOARD_LED_0 #define TEMP_OFFSET 0.0f NRF_LOG_MODULE_REGISTER (); int main ( void ) { return_values_init rc_init ; bsec_version_t bsec_version ; app_log_init (); NRF_LOG_INFO ( \"ble advertising + bsec sample\" ); bsp_board_init ( BSP_INIT_LEDS ); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); app_ble_stack_init (); app_twi_init (); app_bsec_rtc_init (); bsec_get_version ( & bsec_version ); NRF_LOG_DEBUG ( \"bsec_version.major : %d\" , bsec_version . major ); NRF_LOG_DEBUG ( \"bsec_version.minor : %d\" , bsec_version . minor ); NRF_LOG_DEBUG ( \"bsec_version.major_bugfix : %d\" , bsec_version . major_bugfix ); NRF_LOG_DEBUG ( \"bsec_version.minor_bugfix : %d\" , bsec_version . minor_bugfix ); rc_init = bsec_iot_init ( BSEC_SAMPLE_RATE_LP , TEMP_OFFSET , app_twi_tx_func , app_twi_rx_func , app_bsec_sleep , app_bsec_state_load , app_bsec_config_load ); NRF_LOG_DEBUG ( \"rc_init.bme680_status : %d\" , rc_init . bme680_status ); NRF_LOG_DEBUG ( \"rc_init.bsec_status : %d\" , rc_init . bsec_status ); if ( rc_init . bme680_status == BSEC_OK && rc_init . bsec_status == BSEC_OK ) { bsec_iot_loop ( app_bsec_sleep , app_bsec_get_timestamp , app_bsec_output , app_bsec_state_save , 10000 ); } } app_log.h 1 2 3 4 5 6 #ifndef _APP_LOG_H #define _APP_LOG_H void app_log_init ( void ); #endif app_log.c 1 2 3 4 5 6 7 8 9 10 11 #include \"app_error.h\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #include \"app_log.h\" void app_log_init ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); } app_twi.h 1 2 3 4 5 6 7 8 #ifndef _APP_TWI_H #define _APP_TWI_H void app_twi_init ( void ); int8_t app_twi_tx_func ( uint8_t dev_addr , uint8_t reg_addr , uint8_t * tx_buff_addr , uint16_t tx_data_size ); int8_t app_twi_rx_func ( uint8_t dev_addr , uint8_t reg_addr , uint8_t * rx_buff_addr , uint16_t rx_data_size ); #endif app_twi.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 #define NRF_LOG_MODULE_NAME APP_TWI #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_log.h\" #include \"app_twi.h\" #define ARDUINO_SCL_PIN 27 #define ARDUINO_SDA_PIN 26 static nrf_drv_twi_t app_twi_instance = NRF_DRV_TWI_INSTANCE ( 0 ); static volatile bool app_twi_xfer_done = false ; NRF_LOG_MODULE_REGISTER (); void app_twi_event_handler ( nrf_drv_twi_evt_t const * a_event , void * a_context ) { NRF_LOG_DEBUG ( \"app_twi_event_handler() ### START ###\" ); NRF_LOG_DEBUG ( \"a_event->type = %d\" , a_event -> type ); switch ( a_event -> type ) { case NRF_DRV_TWI_EVT_DONE : NRF_LOG_DEBUG ( \"app_twi_xfer_done = %d\" , app_twi_xfer_done ); if ( app_twi_xfer_done == false ) { app_twi_xfer_done = true ; } break ; default : break ; } NRF_LOG_DEBUG ( \"app_twi_event_handler() ### END ###\" ); } void app_twi_init ( void ) { NRF_LOG_DEBUG ( \"app_twi_init() ### START ###\" ); nrf_drv_twi_config_t config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_400K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; APP_ERROR_CHECK ( nrf_drv_twi_init ( & app_twi_instance , & config , app_twi_event_handler , NULL )); nrf_drv_twi_enable ( & app_twi_instance ); NRF_LOG_DEBUG ( \"app_twi_init() ### END ###\" ); } int8_t app_twi_tx_func ( uint8_t dev_id , uint8_t reg_addr , uint8_t * data , uint16_t len ) { uint8_t tx_buf [ len + 1 ]; NRF_LOG_DEBUG ( \"app_twi_tx_func() ### START ###\" ); NRF_LOG_DEBUG ( \"dev_id : %02X\" , dev_id ); NRF_LOG_DEBUG ( \"reg_addr : %02X\" , reg_addr ); NRF_LOG_DEBUG ( \"data : %08X\" , data ); NRF_LOG_DEBUG ( \"len : %d\" , len ); memset ( tx_buf , 0 , len + 1 ); tx_buf [ 0 ] = reg_addr ; if ( len ) { memcpy ( & tx_buf [ 1 ], data , len ); } NRF_LOG_HEXDUMP_DEBUG ( tx_buf , len + 1 ); app_twi_xfer_done = false ; APP_ERROR_CHECK ( nrf_drv_twi_tx ( & app_twi_instance , dev_id , tx_buf , len + 1 , false )); while ( app_twi_xfer_done == false ); NRF_LOG_DEBUG ( \"app_twi_tx_func() ### END ###\" ); return 0 ; } int8_t app_twi_rx_func ( uint8_t dev_id , uint8_t reg_addr , uint8_t * data , uint16_t len ) { NRF_LOG_DEBUG ( \"app_twi_rx_func() ### START ###\" ); NRF_LOG_DEBUG ( \"dev_id : %02X\" , dev_id ); NRF_LOG_DEBUG ( \"reg_addr : %02X\" , reg_addr ); NRF_LOG_DEBUG ( \"data : %08X\" , data ); NRF_LOG_DEBUG ( \"len : %d\" , len ); memset ( data , 0x00 , len ); app_twi_tx_func ( dev_id , reg_addr , NULL , 0 ); app_twi_xfer_done = false ; APP_ERROR_CHECK ( nrf_drv_twi_rx ( & app_twi_instance , dev_id , data , len )); while ( app_twi_xfer_done == false ); NRF_LOG_HEXDUMP_DEBUG ( data , len ); NRF_LOG_DEBUG ( \"app_twi_rx_func() ### END ###\" ); return 0 ; } app_bsec.h 1 2 3 4 5 6 7 8 9 10 11 12 #ifndef _APP_BSEC_H #define _APP_BSEC_H void app_bsec_output ( int64_t , float , uint8_t , float , float , float , float , float , float , bsec_library_return_t , float , float , float ); void app_bsec_state_save ( const uint8_t * , uint32_t ); int64_t app_bsec_get_timestamp ( void ); void app_bsec_sleep ( uint32_t ); uint32_t app_bsec_state_load ( uint8_t * , uint32_t ); uint32_t app_bsec_config_load ( uint8_t * , uint32_t ); void app_bsec_rtc_init ( void ); #endif app_bsec.c SoftDevice\u6709\u52b9\u6642\u306bRTC1\u3092\u4f7f\u3046\u5834\u5408\u3001CLOCK\u95a2\u9023\u306e\u521d\u671f\u5316\u306fSoftDevice\u304c\u5b9f\u65bd\u3059\u308b\u306e\u3067\u3001APL\u5074\u3067\u3084\u3063\u3066\u306f\u3044\u3051\u306a\u3044 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #define NRF_LOG_MODULE_NAME APP_BSEC #include <stdint.h> #include \"nrf_drv_rtc.h\" #include \"nrf_drv_clock.h\" #include \"nrf_delay.h\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"bsec_integration.h\" #include \"app_ble.h\" #include \"app_bsec.h\" nrf_drv_rtc_t app_bsec_rtc = NRF_DRV_RTC_INSTANCE ( 1 ); static uint32_t app_bsec_rtc_ovr_flw_ctr = 0 ; static int32_t app_bsec_rtc_max_ticks = 0 ; NRF_LOG_MODULE_REGISTER (); void app_bsec_rtc_handler ( nrf_drv_rtc_int_type_t int_type ) { NRF_LOG_DEBUG ( \"app_bsec_rtc_handler() ### START ###\" ); NRF_LOG_DEBUG ( \"int_type = %d\" , int_type ); if ( int_type == NRF_DRV_RTC_INT_OVERFLOW ) { NRF_LOG_DEBUG ( \"rtc1 overflow detection.\" ); app_bsec_rtc_ovr_flw_ctr ++ ; } NRF_LOG_DEBUG ( \"app_bsec_rtc_handler() ### END ###\" ); } void app_bsec_rtc_init ( void ) { nrf_drv_rtc_config_t app_bsec_rtc_config = NRF_DRV_RTC_DEFAULT_CONFIG ; #ifndef SOFTDEVICE_PRESENT APP_ERROR_CHECK ( nrf_drv_clock_init ()); nrf_drv_clock_lfclk_request ( NULL ); #endif APP_ERROR_CHECK ( nrf_drv_rtc_init ( & app_bsec_rtc , & app_bsec_rtc_config , app_bsec_rtc_handler )); nrf_drv_rtc_enable ( & app_bsec_rtc ); nrf_drv_rtc_overflow_enable ( & app_bsec_rtc , true ); app_bsec_rtc_max_ticks = nrf_drv_rtc_max_ticks_get ( & app_bsec_rtc ); } void app_bsec_output ( int64_t timestamp , float iaq , uint8_t iaq_accuracy , float temperature , float humidity , float pressure , float raw_temperature , float raw_humidity , float gas , bsec_library_return_t bsec_status , float static_iaq , float co2_equivalent , float breath_voc_equivalent ) { NRF_LOG_DEBUG ( \"app_bsec_output() ### START ###\" ); NRF_LOG_INFO ( \"timestamp : %lu\" , timestamp / 10000000 ); NRF_LOG_INFO ( \"iaq : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( iaq )); NRF_LOG_INFO ( \"iaq_accuracy : %d\" , iaq_accuracy ); NRF_LOG_INFO ( \"temperature : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( temperature )); NRF_LOG_INFO ( \"humidity : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( humidity )); NRF_LOG_INFO ( \"pressure : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( pressure )); NRF_LOG_INFO ( \"raw_temperature : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( raw_temperature )); NRF_LOG_INFO ( \"raw_humidity : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( raw_humidity )); NRF_LOG_INFO ( \"gas : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( gas )); NRF_LOG_INFO ( \"bsec_status : %d\" , bsec_status ); NRF_LOG_INFO ( \"static_iaq : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( static_iaq )); NRF_LOG_INFO ( \"co2_equivalent : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( co2_equivalent )); NRF_LOG_INFO ( \"breath_voc_equivalent : \" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( breath_voc_equivalent )); NRF_LOG_DEBUG ( \"app_bsec_output() ### END ###\" ); app_ble_beacon_info_set ( temperature * 100 , humidity * 100 , pressure / 100 , gas , iaq * 100 ); app_ble_advertising_start (); } void app_bsec_state_save ( const uint8_t * a_state , uint32_t len ) { NRF_LOG_DEBUG ( \"app_bsec_state_save() ### START ###\" ); NRF_LOG_DEBUG ( \"a_state : 0x%08X\" , a_state ); NRF_LOG_DEBUG ( \"len : %d\" , len ); NRF_LOG_DEBUG ( \"app_bsec_state_save() ### END ###\" ); } int64_t app_bsec_get_timestamp ( void ) { int32_t rtc_counter = nrf_drv_rtc_counter_get ( & app_bsec_rtc ); float temp1 , temp2 ; int64_t ret ; NRF_LOG_DEBUG ( \"app_bsec_get_timestamp() ### START ###\" ); NRF_LOG_DEBUG ( \"rtc_counter = %u\" , rtc_counter ); ret = ( float )(( float ) rtc_counter + ( float )( app_bsec_rtc_max_ticks * app_bsec_rtc_ovr_flw_ctr )) / ( float ) NRFX_RTC_DEFAULT_CONFIG_FREQUENCY * 1000000 ; NRF_LOG_DEBUG ( \"ret = %ld\" , ret ); NRF_LOG_DEBUG ( \"app_bsec_get_timestamp() ### END ###\" ); return ret ; } void app_bsec_sleep ( uint32_t msec ) { NRF_LOG_DEBUG ( \"app_bsec_sleep() ### START ###\" ); NRF_LOG_DEBUG ( \"msec = %d\" , msec ); nrf_delay_ms ( msec ); NRF_LOG_DEBUG ( \"app_bsec_sleep() ### END ###\" ); } uint32_t app_bsec_state_load ( uint8_t * a_buf , uint32_t buf_size ) { uint8_t work_buffer_state [ BSEC_MAX_STATE_BLOB_SIZE ]; uint32_t n_work_buffer_size = BSEC_MAX_STATE_BLOB_SIZE ; uint32_t n_serialized_state = 0 ; NRF_LOG_DEBUG ( \"app_bsec_state_load() ### START ###\" ); bsec_get_state ( 0 , a_buf , buf_size , work_buffer_state , n_work_buffer_size , & n_serialized_state ); NRF_LOG_HEXDUMP_DEBUG ( a_buf , n_serialized_state ); NRF_LOG_DEBUG ( \"app_bsec_state_load() ### END ### n_serialized_state : %d\" , n_serialized_state ); return n_serialized_state ; } uint32_t app_bsec_config_load ( uint8_t * a_buf , uint32_t buf_size ) { uint8_t work_buffer [ BSEC_MAX_PROPERTY_BLOB_SIZE ]; uint32_t n_work_buffer = BSEC_MAX_PROPERTY_BLOB_SIZE ; uint32_t n_serialized_settings = 0 ; NRF_LOG_DEBUG ( \"app_bsec_config_load() ### START ###\" ); bsec_get_configuration ( 0 , a_buf , buf_size , work_buffer , n_work_buffer , & n_serialized_settings ); NRF_LOG_HEXDUMP_DEBUG ( a_buf , n_serialized_settings ); NRF_LOG_DEBUG ( \"app_bsec_config_load() ### END ### n_serialized_settings : %d\" , n_serialized_settings ); return n_serialized_settings ; } app_ble.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #ifndef _APP_BLE_H #define _APP_BLE_H #include <stdint.h> #ifdef SOFTDEVICE_PRESENT void app_ble_stack_init ( void ); void app_ble_advertising_init ( void ); void app_ble_advertising_start ( void ); void app_ble_beacon_info_set ( uint16_t temperature , uint16_t hummidity , uint16_t pressure , uint32_t gas , uint16_t iaq ); extern uint32_t __app_ram_start__ ; #else #define app_ble_stack_init() #define app_ble_advertising_init() #define app_ble_advertising_start() #define app_ble_beacon_info_set(temperature, humidyty, pressure, gas, iaq) #endif #endif app_ble.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 #ifdef SOFTDEVICE_PRESENT #define NRF_LOG_MODULE_NAME APP_BLE #include \"app_error.h\" #include \"nrf_sdh.h\" #include \"nrf_sdh_ble.h\" #include \"ble_advdata.h\" #include \"nrf_error_sdm.h\" #include \"nrf_log.h\" #include \"app_ble.h\" #define APP_BLE_CONN_CFG_TAG 1 #define APP_COMPANY_IDENTIFIER 0x0059 #define NON_CONNECTABLE_ADV_INTERVAL MSEC_TO_UNITS(100, UNIT_0_625_MS) #define APP_BLE_ADVERTISING_STATUS_START 1 #define APP_BLE_ADVERTISING_STATUS_STOP 0 typedef struct { uint8_t sensor_id [ 4 ]; uint8_t device_id [ 2 ]; uint8_t temperature [ 2 ]; uint8_t humidity [ 2 ]; uint8_t pressure [ 2 ]; uint8_t gas [ 4 ]; uint8_t iaq [ 2 ]; } app_ble_bme680_advertising_data_t ; extern uint32_t __app_ram_start__ ; static ble_gap_adv_params_t app_ble_gap_adv_params ; static uint8_t app_ble_enc_advdata [ BLE_GAP_ADV_SET_DATA_SIZE_MAX ]; static uint8_t app_ble_adv_handle = BLE_GAP_ADV_SET_HANDLE_NOT_SET ; static uint16_t app_ble_conn_handle = BLE_CONN_HANDLE_INVALID ; static uint8_t app_ble_advertising_status = APP_BLE_ADVERTISING_STATUS_STOP ; static ble_gap_adv_data_t app_ble_gap_adv_data = { . adv_data = { . p_data = app_ble_enc_advdata , . len = BLE_GAP_ADV_SET_DATA_SIZE_MAX }, . scan_rsp_data = { . p_data = NULL , . len = 0 } }; app_ble_bme680_advertising_data_t app_ble_bme680_advertising_data = { . sensor_id = { 0xff , 0xff , 0xff , 0xff }, . device_id = { 0xff , 0xff }, }; NRF_LOG_MODULE_REGISTER (); void app_ble_stack_init ( void ) { NRF_LOG_DEBUG ( \"app_ble_stack_init() ### START ###\" ); APP_ERROR_CHECK ( nrf_sdh_enable_request ()); APP_ERROR_CHECK ( nrf_sdh_ble_default_cfg_set ( APP_BLE_CONN_CFG_TAG , & __app_ram_start__ )); APP_ERROR_CHECK ( nrf_sdh_ble_enable ( & __app_ram_start__ )); NRF_LOG_DEBUG ( \"app_ble_stack_init() ### END ###\" ); } void app_ble_advertising_init ( void ) { NRF_LOG_DEBUG ( \"app_ble_advertising_init() ### START ###\" ); ble_advdata_manuf_data_t manuf_specific_data ; ble_advdata_t advdata ; memset ( & advdata , 0x00 , sizeof ( ble_advdata_t )); memset ( & app_ble_gap_adv_params , 0x00 , sizeof ( ble_gap_adv_params_t )); manuf_specific_data . company_identifier = APP_COMPANY_IDENTIFIER ; manuf_specific_data . data . p_data = ( uint8_t * )( & app_ble_bme680_advertising_data ); manuf_specific_data . data . size = sizeof ( app_ble_bme680_advertising_data_t ); advdata . name_type = BLE_ADVDATA_NO_NAME ; advdata . flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE ; advdata . p_manuf_specific_data = & manuf_specific_data ; app_ble_gap_adv_params . properties . type = BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED ; app_ble_gap_adv_params . p_peer_addr = NULL ; app_ble_gap_adv_params . filter_policy = BLE_GAP_ADV_FP_ANY ; app_ble_gap_adv_params . interval = NON_CONNECTABLE_ADV_INTERVAL ; app_ble_gap_adv_params . duration = 0 ; APP_ERROR_CHECK ( ble_advdata_encode ( & advdata , app_ble_gap_adv_data . adv_data . p_data , & app_ble_gap_adv_data . adv_data . len )); NRF_LOG_DEBUG ( \"app_ble_advertising_init() ### END ###\" ); } void app_ble_advertising_update ( void ) { NRF_LOG_DEBUG ( \"app_ble_advertising_update() ### START ###\" ); APP_ERROR_CHECK ( sd_ble_gap_adv_stop ( app_ble_adv_handle )); APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & app_ble_adv_handle , & app_ble_gap_adv_data , & app_ble_gap_adv_params )); APP_ERROR_CHECK ( sd_ble_gap_adv_start ( app_ble_adv_handle , APP_BLE_CONN_CFG_TAG )); NRF_LOG_DEBUG ( \"app_ble_advertising_update() ### END ###\" ); } void app_ble_advertising_start ( void ) { NRF_LOG_DEBUG ( \"app_ble_advertising_start() ### START ###\" ); app_ble_advertising_init (); NRF_LOG_DEBUG ( \"app_ble_advertising_status = %d\" , app_ble_advertising_status ); if ( app_ble_advertising_status == APP_BLE_ADVERTISING_STATUS_START ) { app_ble_advertising_update (); } else { APP_ERROR_CHECK ( sd_ble_gap_adv_set_configure ( & app_ble_adv_handle , & app_ble_gap_adv_data , & app_ble_gap_adv_params )); APP_ERROR_CHECK ( sd_ble_gap_adv_start ( app_ble_adv_handle , APP_BLE_CONN_CFG_TAG )); app_ble_advertising_status = APP_BLE_ADVERTISING_STATUS_START ; } NRF_LOG_DEBUG ( \"app_ble_advertising_start() ### END ###\" ); } void app_ble_beacon_info_set ( uint16_t temperature , uint16_t humidity , uint16_t pressure , uint32_t gas , uint16_t iaq ) { NRF_LOG_DEBUG ( \"app_ble_beacon_info_set() ### START ###\" ); NRF_LOG_INFO ( \"temperature = %u\" , temperature ); NRF_LOG_HEXDUMP_INFO ( & temperature , sizeof ( uint16_t )); NRF_LOG_INFO ( \"humidity = %u\" , humidity ); NRF_LOG_HEXDUMP_INFO ( & humidity , sizeof ( uint16_t )); NRF_LOG_INFO ( \"pressure = %u\" , pressure ); NRF_LOG_HEXDUMP_INFO ( & pressure , sizeof ( uint16_t )); NRF_LOG_INFO ( \"gas = %u\" , gas ); NRF_LOG_HEXDUMP_INFO ( & gas , sizeof ( uint32_t )); NRF_LOG_INFO ( \"iaq = %u\" , iaq ); NRF_LOG_HEXDUMP_INFO ( & iaq , sizeof ( uint16_t )); memcpy ( app_ble_bme680_advertising_data . temperature , & temperature , sizeof ( uint16_t )); memcpy ( app_ble_bme680_advertising_data . humidity , & humidity , sizeof ( uint16_t )); memcpy ( app_ble_bme680_advertising_data . pressure , & pressure , sizeof ( uint16_t )); memcpy ( app_ble_bme680_advertising_data . gas , & gas , sizeof ( uint32_t )); memcpy ( app_ble_bme680_advertising_data . iaq , & iaq , sizeof ( uint16_t )); NRF_LOG_INFO ( \"app_ble_bme680_advertising_data hex dump\" ); NRF_LOG_HEXDUMP_INFO ( & app_ble_bme680_advertising_data , sizeof ( app_ble_bme680_advertising_data_t )); NRF_LOG_DEBUG ( \"app_ble_beacon_info_set() ### END ###\" ); } #endif Cortex_M_Startup.s 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 // ********************************************************************** // * SEGGER Microcontroller GmbH * // * The Embedded Experts * // ********************************************************************** // * * // * (c) 2014 - 2018 SEGGER Microcontroller GmbH * // * (c) 2001 - 2018 Rowley Associates Limited * // * * // * www.segger.com Support: support@segger.com * // * * // ********************************************************************** // * * // * All rights reserved. * // * * // * Redistribution and use in source and binary forms, with or * // * without modification, are permitted provided that the following * // * conditions are met: * // * * // * - Redistributions of source code must retain the above copyright * // * notice, this list of conditions and the following disclaimer. * // * * // * - Neither the name of SEGGER Microcontroller GmbH * // * nor the names of its contributors may be used to endorse or * // * promote products derived from this software without specific * // * prior written permission. * // * * // * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND * // * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, * // * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * // * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE * // * DISCLAIMED. * // * IN NO EVENT SHALL SEGGER Microcontroller GmbH BE LIABLE FOR * // * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * // * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT * // * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; * // * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * // * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT * // * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * // * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * // * DAMAGE. * // * * // ********************************************************************** . macro ISR_HANDLER name = . section . vectors , \"ax\" . word \\ name . section . init , \"ax\" . thumb_func . weak \\ name \\ name : 1 : b 1 b /* endless loop */ . endm . macro ISR_RESERVED . section . vectors , \"ax\" . word 0 . endm . syntax unified . global reset_handler . global Reset_Handler . equ Reset_Handler , reset_handler . section . vectors , \"ax\" . code 16 . balign 2 . global _vectors . macro DEFAULT_ISR_HANDLER name = . thumb_func . weak \\ name \\ name : 1 : b 1 b /* endless loop */ . endm _vectors : . word __stack_end__ . word reset_handler ISR_HANDLER NMI_Handler ISR_HANDLER HardFault_Handler ISR_HANDLER MemManage_Handler ISR_HANDLER BusFault_Handler ISR_HANDLER UsageFault_Handler ISR_RESERVED ISR_RESERVED ISR_RESERVED ISR_RESERVED ISR_HANDLER SVC_Handler ISR_HANDLER DebugMon_Handler ISR_RESERVED ISR_HANDLER PendSV_Handler ISR_HANDLER SysTick_Handler #ifdef __VECTORS #include __VECTORS #else ISR_HANDLER POWER_CLOCK_IRQHandler ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 ISR_HANDLER ExternalISR11 ISR_HANDLER ExternalISR12 ISR_HANDLER ExternalISR13 ISR_HANDLER ExternalISR14 ISR_HANDLER ExternalISR15 ISR_HANDLER ExternalISR16 ISR_HANDLER RTC1_IRQHandler ISR_HANDLER ExternalISR18 ISR_HANDLER ExternalISR19 ISR_HANDLER ExternalISR20 ISR_HANDLER ExternalISR21 ISR_HANDLER ExternalISR22 ISR_HANDLER ExternalISR23 ISR_HANDLER ExternalISR24 ISR_HANDLER ExternalISR25 ISR_HANDLER ExternalISR26 ISR_HANDLER ExternalISR27 ISR_HANDLER ExternalISR28 ISR_HANDLER ExternalISR29 ISR_HANDLER ExternalISR30 ISR_HANDLER ExternalISR31 #endif . section . vectors , \"ax\" _vectors_end : . section . init , \"ax\" . balign 2 . thumb_func reset_handler : #ifndef __NO_SYSTEM_INIT ldr r0 , = __stack_end__ mov sp , r0 bl SystemInit #endif #if !defined(__SOFTFP__) // Enable CP11 and CP10 with CPACR |= (0xf<<20) movw r0 , 0xED88 movt r0 , 0xE000 ldr r1 , [ r0 ] orrs r1 , r1 , # ( 0xf << 20 ) str r1 , [ r0 ] #endif b _start #ifndef __NO_SYSTEM_INIT . thumb_func . weak SystemInit SystemInit : bx lr #endif BME680/BSEC\u95a2\u9023\u306f\u2193 https://www.bosch-sensortec.com/bst/products/all_products/bsec","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/","text":"FaBo Analog Bricks \u30c7\u30b8\u30bf\u30eb\u30c7\u30fc\u30bf\u3084\u30a2\u30ca\u30ed\u30b0\u30c7\u30fc\u30bf\u306b\u3088\u308b\u30c7\u30fc\u30bf\u53d6\u5f97\u3084\u5236\u5fa1\u3092\u884c\u3046Brick\u3067\u3059\u3002 OUT/IN\u30b7\u30fc\u30eb\u30c9\u306eDigital\u30d4\u30f3(2\u301c13)\u3084Analog\u30d4\u30f3(A0\u301cA5)\u3068Brick\u3092\u30013\u30d4\u30f3\u7528\u30b1\u30fc\u30d6\u30eb\u3067\u63a5\u7d9a\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"FaBo Analog Bricks"},{"location":"7.FaBoBrick(ANA)/#fabo-analog-bricks","text":"\u30c7\u30b8\u30bf\u30eb\u30c7\u30fc\u30bf\u3084\u30a2\u30ca\u30ed\u30b0\u30c7\u30fc\u30bf\u306b\u3088\u308b\u30c7\u30fc\u30bf\u53d6\u5f97\u3084\u5236\u5fa1\u3092\u884c\u3046Brick\u3067\u3059\u3002 OUT/IN\u30b7\u30fc\u30eb\u30c9\u306eDigital\u30d4\u30f3(2\u301c13)\u3084Analog\u30d4\u30f3(A0\u301cA5)\u3068Brick\u3092\u30013\u30d4\u30f3\u7528\u30b1\u30fc\u30d6\u30eb\u3067\u63a5\u7d9a\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"FaBo Analog Bricks"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/","text":"#101 LED Brick Overview LED\u306eBrick\u3067\u3059\u3002\u767a\u5149\u8272\u306f5\u8272\uff08\u9752\u30fb\u7dd1\u30fb\u8d64\u30fb\u767d\u30fb\u9ec4\uff09\u3042\u308a\u307e\u3059\u3002L\u30c1\u30ab\u306e\u304a\u3068\u3082\u306b\u3082\u3069\u3046\u305e\u3002 Connecting \u63a5\u7d9a\u4f8b\uff1aJ-Linke Lite\u3092Shinobi_NRF\u3001USB\u96fb\u6e90\u3092ShinobiBatterry,Fabo1010\u3092Shinobi\u30a2\u30ca\u30ed\u30b0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 Schematic Fabo 101 LED\u306e\u56de\u8def\u56f3 Shinobi NRF\u306e\u56de\u8def\u56f3 Sample Code Arduino Motor Shield\u306eA0\u30b3\u30cd\u30af\u30bf\u306bLED Brick\u3092\u63a5\u7d9a\u3057\u3001\u4e00\u5b9a\u6642\u9593(1\u79d2=1000ms)\u3054\u3068\u306b\u70b9\u706f/\u6d88\u706f\uff08L\u30c1\u30ab\uff09\u3055\u305b\u3066\u3044\u307e\u3059\u3002 \uff11\uff0eKeil\u3092\u8d77\u52d5 \u4efb\u610f\u306e\u5834\u6240\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306bLED101\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 Project \u2192 New \u03bc \u30d7\u30ed\u30b8\u30a7\u30af\u30c8 \u2192 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3002 \uff12\uff0e\u30c7\u30d0\u30a4\u30b9\u306e\u9078\u629e \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u30de\u30a4\u30b3\u30f3\u3092\u9078\u629e\u3057\u307e\u3059\u3002Nordic Semiconductor\u3092\u9078\u629e\u3002 nRF52\u3000Series\u2192nRF528232_xxAA\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \uff13\uff0e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u9078\u629e MagageRunTimeEnviroment\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002 \u30de\u30a4\u30b3\u30f3\u8d77\u52d5\u306b\u5fc5\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u4f9d\u5b58\u6027\u3092\u89e3\u6d88\u3057\u307e\u3059\u3002 4\uff0e\u30d5\u30a9\u30eb\u30c0\u306e\u69cb\u6210 \u7ba1\u7406\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u540d\u524d\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 \u30d5\u30a9\u30eb\u30c0\u540d\u3092src\u306b\u5909\u66f4\u3057\u307e\u3059\u3002 config\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 5. custom_board.h \u306e\u4f5c\u6210 config\u30d5\u30a9\u30eb\u30c0\u306bcustom_board.h\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 config/custom_board.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // Shinobi Dev Board #ifndef CUSTOM_BOARD_H #define CUSTOM_BOARD_H #define LEDS_NUMBER 1 #define LED_1 18 #define LEDS_LIST { LED_1 } #define LEDS_ACTIVE_STATE 1 #define BSP_LED_0 LED_1 #define BUTTONS_NUMBER 1 #define BUTTON_0 16 #define BUTTONS_ACTIVE_STATE 0 #define BSP_BUTTON_0 BUTTON_0 #define BUTTONS_LIST { BUTTON_0 } #define BUTTON_PULL NRF_GPIO_PIN_PULLUP #define LEDS_INV_MASK 0 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 10 #define RTS_PIN_NUMBER 8 #define HWFC false #define SPIS_MISO_PIN 20 // SPI MISO signal. #define SPIS_CSN_PIN 21 // SPI CSN signal. #define SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SPIS_SCK_PIN 23 // SPI SCK signal. #define SPIM0_SCK_PIN 23u /**< SPI clock GPIO pin number. */ #define SPIM0_MOSI_PIN 20u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM0_MISO_PIN 22u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM0_SS_PIN 21u /**< SPI Slave Select GPIO pin number. */ #define SPIM1_SCK_PIN 29u /**< SPI clock GPIO pin number. */ #define SPIM1_MOSI_PIN 24u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM1_MISO_PIN 28u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM1_SS_PIN 25u /**< SPI Slave Select GPIO pin number. */ // serialization APPLICATION board // UART // this configuration works with the SPI wires setup #define SER_APP_RX_PIN 20 // UART RX pin number. #define SER_APP_TX_PIN 22 // UART TX pin number. #define SER_APP_CTS_PIN 23 // UART Clear To Send pin number. #define SER_APP_RTS_PIN 21 // UART Request To Send pin number. // serialization CONNECTIVITY board // UART #if 0 #define SER_CON_RX_PIN 22 // UART RX pin number. #define SER_CON_TX_PIN 20 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #else // this configuration works with the SPI wires setup #define SER_CON_RX_PIN 20 // UART RX pin number. #define SER_CON_TX_PIN 22 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #endif #define SER_CONN_ASSERT_LED_PIN LED_0 #define NRF_CLOCK_LFCLKSRC {.source = NRF_CLOCK_LF_SRC_XTAL, \\ .rc_ctiv = 0, \\ .rc_temp_ctiv = 0, \\ .xtal_accuracy = NRF_CLOCK_LF_XTAL_ACCURACY_20_PPM} #endif 6. sdk_condig.h\u306e\u53d6\u308a\u8fbc\u307f config\u30d5\u30a9\u30eb\u30c0\u306b\u3001[SDK Root]/examples/ble_peripheral/ble_app_template/pca10040/s132/config/sdk_config.h\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u306b\u30b3\u30d4\u30fc\u3057\u3001Keil\u4e0a\u306b\u53d6\u308a\u8fbc\u307f\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 SDK_confing.h\u3092\u9078\u629e\u3057\u4e0b\u306econfigration_Wizard\u30bf\u30d6\u3092\u30af\u30ea\u30c3\u30af\u3002 \u4ee5\u4e0b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002 \u203bSDK configuration header file \u306b\u3064\u3044\u3066 https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v12.0.0%2Fsdk_config.html 7\uff0e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a Option for Target\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001 C/C++\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002Include Paths\u306e\u53f3\u306e\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002 \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u9010\u6b21\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d1\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 \u9078\u629e\u3055\u308c\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30d5\u30a9\u30eb\u30c0 \u5fc5\u8981\u306aHeader File \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eRoot\u30d1\u30b9 \u81ea\u5206\u81ea\u8eab\u3078\u306e\u30d1\u30b9 nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/hal/ nrf_gpio.h nRF5_SDK_12.3.0_d7731ad/components/libraries/util/ nrf_assert.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/nrf_soc_nosd/ nrf_error.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/delay/ nrf_delay.h nRF5_SDK_12.3.0_d7731ad/components/boards/ boards.h boards.h\u306f\u3001Nordic\u88fd\u306e\u958b\u767a\u30dc\u30fc\u30c9\u4f7f\u7528\u306e\u969b\u306b\u53c2\u7167\u3055\u308c\u307e\u3059\u3002Shinobi\u306e\u4f7f\u7528\u6642\u306f\u3001\u3055\u3089\u306b\u3001custom_board.h\u3082\u53c2\u7167\u3055\u308c\u307e\u3059\u3002 8\uff0e\u30b3\u30f3\u30d1\u30a4\u30e9\u5236\u5fa1\u306e\u8a2d\u5b9a Option for Target\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001 Option for Target\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001C/C++\u3092\u30af\u30ea\u30c3\u30afPreprocessor Symbols\u306eDefine:\u306b nRF52 Shinobi\u306e\u5834\u5408 NRF52832 NRF52 BOARD_CUSTOM NRF52_PAN_12 NRF52_PAN_15 NRF52_PAN_20 NRF52_PAN_31 NRF52_PAN_36 NRF52_PAN_51 CONFIG_GPIO_AS_PINRESET NRF52_PAN_54 NRF52_PAN_55 NRF52_PAN_58 NRF52_PAN_64 BSP_DEFINES_ONLY SWI_DISABLE0 nRF52 DK\u30dc\u30fc\u30c9(BOARD_PCA10040)\u306e\u5834\u5408 NRF52832 NRF52 BOARD_PCA10040 NRF52_PAN_12 NRF52_PAN_15 NRF52_PAN_20 NRF52_PAN_31 NRF52_PAN_36 NRF52_PAN_51 CONFIG_GPIO_AS_PINRESET NRF52_PAN_54 NRF52_PAN_55 NRF52_PAN_58 NRF52_PAN_64 BSP_DEFINES_ONLY SWI_DISABLE0 \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 Langeage / Code Generation\u306e\u9805\u76ee ARM\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u30ec\u30d9\u30eb\u306e\u8a2d\u5b9a Optimize Level3(-O3)\u3092\u9078\u629e Misc\u3000Controls\uff1a\u3000--c99\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 9. \u30c7\u30d0\u30c3\u30ab\u306e\u8a2d\u5b9a \u6b21\u306bDebug\u30bf\u30b0\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002 \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u30e1\u30e2\u30ea\u3000\u30d7\u30ed\u30b0\u30e9\u30e0\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u304c0x0\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u7121\u7dda\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306a\u3069\u3067\u3001SoftDevice\u3092\u524d\u3082\u3063\u3066Download\u3057\u305f\u5834\u5408\u306f\u3001\u305d\u306e\u9818\u57df\u306e\u6b21\u306b\u30a2\u30c9\u30ec\u30b9\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\u4ed6\u306e\u9805\u3067\u8a18\u8ff0\uff09 \u4f7f\u7528\u3059\u308b\u30c7\u30d0\u30c3\u30ab\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002J-link\u306e\u5834\u5408\u306f\u3001J-LINK/J-TRACE Cortex\u3092\u9078\u629e\u3002 Setting\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002port:\u3092JTAG(4\uff5e5\u7dda\u5f0f)\u304b\u3089SW(2\u7dda\u5f0f)\u306b\u5909\u66f4\u3044\u305f\u3057\u307e\u3059\u3002 Flash Download\u30bf\u30d6\u3092\u30af\u30ea\u30c3\u30af\u3057\u3001\u66f8\u304d\u8fbc\u307f\u65b9\u6cd5\u3092\u8a2d\u5b9a\u3044\u305f\u3057\u307e\u3059\u3002 \u66f8\u304d\u8fbc\u307f\u5f8c\u3059\u3050\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u3001Reset and Run\u3092\u9078\u629e\u3057\u307e\u3059\u3002 OK\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u8a2d\u5b9a\u306f\u7d42\u4e86\u3067\u3059\u3002 10\uff0emain\u95a2\u6570\u8ffd\u52a0 Project\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u4e00\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bListings,Object,RTE\u30d5\u30a9\u30eb\u30c0\u304c\u81ea\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002 \u753b\u9762\u306e\u5de6\u30d5\u30a9\u30eb\u30c0SourceGroup 1\u3092\u5de6\u30af\u30ea\u30c3\u30af\u3057Add New Item to Group'SourceGroup 1'\u3092\u9078\u629e\u3057\u307e\u3059\u3002C File(.c)\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u4e00\u756a\u6700\u521d\u306b\u547c\u3070\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306a\u306e\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u306fmain.c\u3068\u540d\u524d\u3067\u4fdd\u5b58\u3057\u3066\u304f\u3060\u3055\u3044\u3002 main.c\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u958b\u304d\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u30a2\u30f3\u30c9\u30da\u30fc\u30b9\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002 11. 1\u79d2\u9593\u9694\u3067FaboBrick\u3092\u70b9\u6ec5\u3055\u305b\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <stdbool.h> #include <stdint.h> #include \"nrf_delay.h\" #include \"boards.h\" #define PIN_NUMBER 3 #define INTERVAL 1000 int main ( void ) { nrf_gpio_cfg_output ( PIN_NUMBER ); while ( true ) { nrf_gpio_pin_toggle ( PIN_NUMBER ); nrf_delay_ms ( INTERVAL ); } } 12.\u76f4\u63a5\u30ec\u30b8\u30b9\u30bf\u64cd\u4f5c\u306b\u3088\u308bLED\u70b9\u6ec5\u306e\u5834\u5408 Arduino PinA0\u306f\u3001NRF52\u306e\u30d4\u30f3\u756a\u53f7\u306fP0.03\u306b\u3068\u306a\u308a\u307e\u3059\u3002C\u8a00\u8a9e\u306a\u306e\u3067int\u306a\u3069\u306f\u3001\u30de\u30a4\u30b3\u30f3\u306b\u3088\u3063\u3066\u30d0\u30a4\u30c8\u6570\u304c\uff12\u30d0\u30a4\u30c8\u3067\u3042\u308b\u5834\u5408\u3068\uff14\u30d0\u30a4\u30c8\u3067\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u3001unsigned char(unsigned int)\u3067\u306f\u306a\u304fuint8_t\u306a\u3069\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u53ef\u8aad\u6027\u3084\u79fb\u690d\u6027\u306e\u89b3\u70b9\u304b\u3089\u671b\u307e\u3057\u3044\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \"nrf_delay.h\" #include \"nrf_gpio.h\" const uint8_t led_pin = 3 ; /*P0.03\u4f7f\u7528\u3000const\u3067\u4fee\u98fe\u3059\u308b\u5834\u5408\u306f\u5b9a\u6570\u306fROM\u306b\u683c\u7d0d\u3055\u308cRAM\u9818\u57df\u306e\u7bc0\u7d04\u306b\u306a\u308b*/ int main ( void ) { nrf_gpio_cfg_output ( led_pin ); /*\u30dd\u30fc\u30c8\u3092\u51fa\u529b\u306b\u8a2d\u5b9a*/ while ( true ) { uint32_t gpio_state = NRF_GPIO -> OUT ; /*\u30dd\u30fc\u30c8\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u3092\u53d6\u5f97*/ NRF_GPIO -> OUTSET = (( 1 << led_pin ) & ~ gpio_state ); NRF_GPIO -> OUTCLR = (( 1 << led_pin ) & gpio_state ); nrf_delay_ms ( 1000 ); /*\uff11\u79d2\u7121\u3057\u3082\u3057\u306a\u3044*/ } } 11.boards.h\u3092\u5229\u7528\u3057\u305fLED\u70b9\u6ec5\u306e\u5834\u5408 \u30ec\u30b8\u30b9\u30bf\u64cd\u4f5c\u306f\u958b\u767a\u52b9\u7387\u304c\u60aa\u3044\u306e\u3067\u3001SDK\u306b\u306f\u3042\u3089\u304b\u3058\u3081\u3001\u30dc\u30fc\u30c9\u306b\u3042\u308f\u305b\u305f\u30d4\u30f3\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30ebboards.h\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \"nrf_delay.h\" #include \"nrf_gpio.h\" #include \"boards.h\" #define PINNUMBER 3 int main ( void ) { LEDS_CONFIGURE ( 1 << PINNUMBER ); while ( true ) { LEDS_INVERT ( 1 << PINNUMBER ); nrf_delay_ms ( 1000 ); } } 13.\u5b9f\u884c Build\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\uff08\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fcF7\uff09 \u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u306a\u3051\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306fbuild\u30d5\u30a9\u30eb\u30c0\u306b * *.axf\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002 \u4e26\u3073\u306b\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u3082\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u53e4\u3044\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u524a\u9664\u3057\u307e\u3059\u3002 Flash\u2192Erase ROM\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u3001 * *.hex\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3001 Download\u30dc\u30bf\u30f3\uff08\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8F8\uff09\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u66f8\u304d\u8fbc\u307f\u3057\u307e\u3059\u3002 \u66f8\u304d\u8fbc\u307f\u304c\u6210\u529f\u3059\u308c\u3070LED\u304c\u70b9\u6ec5\u3057\u307e\u3059\u3002 Document NRF52 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 http://infocenter.nordicsemi.com/pdf/nRF52832_PS_v1.4.pdf \u69cb\u6210\u30d1\u30fc\u30c4Parts 5mm LED(\u5404\u8272)","title":"101 LED Brick"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#101-led-brick","text":"","title":"#101 LED Brick"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#overview","text":"LED\u306eBrick\u3067\u3059\u3002\u767a\u5149\u8272\u306f5\u8272\uff08\u9752\u30fb\u7dd1\u30fb\u8d64\u30fb\u767d\u30fb\u9ec4\uff09\u3042\u308a\u307e\u3059\u3002L\u30c1\u30ab\u306e\u304a\u3068\u3082\u306b\u3082\u3069\u3046\u305e\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#connecting","text":"\u63a5\u7d9a\u4f8b\uff1aJ-Linke Lite\u3092Shinobi_NRF\u3001USB\u96fb\u6e90\u3092ShinobiBatterry,Fabo1010\u3092Shinobi\u30a2\u30ca\u30ed\u30b0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#schematic","text":"Fabo 101 LED\u306e\u56de\u8def\u56f3 Shinobi NRF\u306e\u56de\u8def\u56f3","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#sample-code","text":"Arduino Motor Shield\u306eA0\u30b3\u30cd\u30af\u30bf\u306bLED Brick\u3092\u63a5\u7d9a\u3057\u3001\u4e00\u5b9a\u6642\u9593(1\u79d2=1000ms)\u3054\u3068\u306b\u70b9\u706f/\u6d88\u706f\uff08L\u30c1\u30ab\uff09\u3055\u305b\u3066\u3044\u307e\u3059\u3002","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#1keil","text":"\u4efb\u610f\u306e\u5834\u6240\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306bLED101\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 Project \u2192 New \u03bc \u30d7\u30ed\u30b8\u30a7\u30af\u30c8 \u2192 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3002","title":"\uff11\uff0eKeil\u3092\u8d77\u52d5"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#2","text":"\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u30de\u30a4\u30b3\u30f3\u3092\u9078\u629e\u3057\u307e\u3059\u3002Nordic Semiconductor\u3092\u9078\u629e\u3002 nRF52\u3000Series\u2192nRF528232_xxAA\u3092\u9078\u629e\u3057\u307e\u3059\u3002","title":"\uff12\uff0e\u30c7\u30d0\u30a4\u30b9\u306e\u9078\u629e"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#3","text":"MagageRunTimeEnviroment\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002 \u30de\u30a4\u30b3\u30f3\u8d77\u52d5\u306b\u5fc5\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u4f9d\u5b58\u6027\u3092\u89e3\u6d88\u3057\u307e\u3059\u3002","title":"\uff13\uff0e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u9078\u629e"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#4","text":"\u7ba1\u7406\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u540d\u524d\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 \u30d5\u30a9\u30eb\u30c0\u540d\u3092src\u306b\u5909\u66f4\u3057\u307e\u3059\u3002 config\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","title":"4\uff0e\u30d5\u30a9\u30eb\u30c0\u306e\u69cb\u6210"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#5-custom_boardh","text":"config\u30d5\u30a9\u30eb\u30c0\u306bcustom_board.h\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 config/custom_board.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // Shinobi Dev Board #ifndef CUSTOM_BOARD_H #define CUSTOM_BOARD_H #define LEDS_NUMBER 1 #define LED_1 18 #define LEDS_LIST { LED_1 } #define LEDS_ACTIVE_STATE 1 #define BSP_LED_0 LED_1 #define BUTTONS_NUMBER 1 #define BUTTON_0 16 #define BUTTONS_ACTIVE_STATE 0 #define BSP_BUTTON_0 BUTTON_0 #define BUTTONS_LIST { BUTTON_0 } #define BUTTON_PULL NRF_GPIO_PIN_PULLUP #define LEDS_INV_MASK 0 #define RX_PIN_NUMBER 9 #define TX_PIN_NUMBER 11 #define CTS_PIN_NUMBER 10 #define RTS_PIN_NUMBER 8 #define HWFC false #define SPIS_MISO_PIN 20 // SPI MISO signal. #define SPIS_CSN_PIN 21 // SPI CSN signal. #define SPIS_MOSI_PIN 22 // SPI MOSI signal. #define SPIS_SCK_PIN 23 // SPI SCK signal. #define SPIM0_SCK_PIN 23u /**< SPI clock GPIO pin number. */ #define SPIM0_MOSI_PIN 20u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM0_MISO_PIN 22u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM0_SS_PIN 21u /**< SPI Slave Select GPIO pin number. */ #define SPIM1_SCK_PIN 29u /**< SPI clock GPIO pin number. */ #define SPIM1_MOSI_PIN 24u /**< SPI Master Out Slave In GPIO pin number. */ #define SPIM1_MISO_PIN 28u /**< SPI Master In Slave Out GPIO pin number. */ #define SPIM1_SS_PIN 25u /**< SPI Slave Select GPIO pin number. */ // serialization APPLICATION board // UART // this configuration works with the SPI wires setup #define SER_APP_RX_PIN 20 // UART RX pin number. #define SER_APP_TX_PIN 22 // UART TX pin number. #define SER_APP_CTS_PIN 23 // UART Clear To Send pin number. #define SER_APP_RTS_PIN 21 // UART Request To Send pin number. // serialization CONNECTIVITY board // UART #if 0 #define SER_CON_RX_PIN 22 // UART RX pin number. #define SER_CON_TX_PIN 20 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #else // this configuration works with the SPI wires setup #define SER_CON_RX_PIN 20 // UART RX pin number. #define SER_CON_TX_PIN 22 // UART TX pin number. #define SER_CON_CTS_PIN 21 // UART Clear To Send pin number. Not used if HWFC is set to false. #define SER_CON_RTS_PIN 23 // UART Request To Send pin number. Not used if HWFC is set to false. #endif #define SER_CONN_ASSERT_LED_PIN LED_0 #define NRF_CLOCK_LFCLKSRC {.source = NRF_CLOCK_LF_SRC_XTAL, \\ .rc_ctiv = 0, \\ .rc_temp_ctiv = 0, \\ .xtal_accuracy = NRF_CLOCK_LF_XTAL_ACCURACY_20_PPM} #endif","title":"5. custom_board.h \u306e\u4f5c\u6210"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#6-sdk_condigh","text":"config\u30d5\u30a9\u30eb\u30c0\u306b\u3001[SDK Root]/examples/ble_peripheral/ble_app_template/pca10040/s132/config/sdk_config.h\u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u306b\u30b3\u30d4\u30fc\u3057\u3001Keil\u4e0a\u306b\u53d6\u308a\u8fbc\u307f\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 SDK_confing.h\u3092\u9078\u629e\u3057\u4e0b\u306econfigration_Wizard\u30bf\u30d6\u3092\u30af\u30ea\u30c3\u30af\u3002 \u4ee5\u4e0b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002 \u203bSDK configuration header file \u306b\u3064\u3044\u3066 https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v12.0.0%2Fsdk_config.html","title":"6. sdk_condig.h\u306e\u53d6\u308a\u8fbc\u307f"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#7","text":"Option for Target\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001 C/C++\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002Include Paths\u306e\u53f3\u306e\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002 \u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u9010\u6b21\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u30d1\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 \u9078\u629e\u3055\u308c\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30d5\u30a9\u30eb\u30c0 \u5fc5\u8981\u306aHeader File \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eRoot\u30d1\u30b9 \u81ea\u5206\u81ea\u8eab\u3078\u306e\u30d1\u30b9 nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/hal/ nrf_gpio.h nRF5_SDK_12.3.0_d7731ad/components/libraries/util/ nrf_assert.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/nrf_soc_nosd/ nrf_error.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/delay/ nrf_delay.h nRF5_SDK_12.3.0_d7731ad/components/boards/ boards.h boards.h\u306f\u3001Nordic\u88fd\u306e\u958b\u767a\u30dc\u30fc\u30c9\u4f7f\u7528\u306e\u969b\u306b\u53c2\u7167\u3055\u308c\u307e\u3059\u3002Shinobi\u306e\u4f7f\u7528\u6642\u306f\u3001\u3055\u3089\u306b\u3001custom_board.h\u3082\u53c2\u7167\u3055\u308c\u307e\u3059\u3002","title":"7\uff0e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#8","text":"Option for Target\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001 Option for Target\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001C/C++\u3092\u30af\u30ea\u30c3\u30afPreprocessor Symbols\u306eDefine:\u306b nRF52 Shinobi\u306e\u5834\u5408 NRF52832 NRF52 BOARD_CUSTOM NRF52_PAN_12 NRF52_PAN_15 NRF52_PAN_20 NRF52_PAN_31 NRF52_PAN_36 NRF52_PAN_51 CONFIG_GPIO_AS_PINRESET NRF52_PAN_54 NRF52_PAN_55 NRF52_PAN_58 NRF52_PAN_64 BSP_DEFINES_ONLY SWI_DISABLE0 nRF52 DK\u30dc\u30fc\u30c9(BOARD_PCA10040)\u306e\u5834\u5408 NRF52832 NRF52 BOARD_PCA10040 NRF52_PAN_12 NRF52_PAN_15 NRF52_PAN_20 NRF52_PAN_31 NRF52_PAN_36 NRF52_PAN_51 CONFIG_GPIO_AS_PINRESET NRF52_PAN_54 NRF52_PAN_55 NRF52_PAN_58 NRF52_PAN_64 BSP_DEFINES_ONLY SWI_DISABLE0 \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 Langeage / Code Generation\u306e\u9805\u76ee ARM\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u30ec\u30d9\u30eb\u306e\u8a2d\u5b9a Optimize Level3(-O3)\u3092\u9078\u629e Misc\u3000Controls\uff1a\u3000--c99\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002","title":"8\uff0e\u30b3\u30f3\u30d1\u30a4\u30e9\u5236\u5fa1\u306e\u8a2d\u5b9a"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#9","text":"\u6b21\u306bDebug\u30bf\u30b0\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002 \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30e9\u30c3\u30b7\u30e5\u30e1\u30e2\u30ea\u3000\u30d7\u30ed\u30b0\u30e9\u30e0\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u304c0x0\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u7121\u7dda\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306a\u3069\u3067\u3001SoftDevice\u3092\u524d\u3082\u3063\u3066Download\u3057\u305f\u5834\u5408\u306f\u3001\u305d\u306e\u9818\u57df\u306e\u6b21\u306b\u30a2\u30c9\u30ec\u30b9\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\u4ed6\u306e\u9805\u3067\u8a18\u8ff0\uff09 \u4f7f\u7528\u3059\u308b\u30c7\u30d0\u30c3\u30ab\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002J-link\u306e\u5834\u5408\u306f\u3001J-LINK/J-TRACE Cortex\u3092\u9078\u629e\u3002 Setting\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002port:\u3092JTAG(4\uff5e5\u7dda\u5f0f)\u304b\u3089SW(2\u7dda\u5f0f)\u306b\u5909\u66f4\u3044\u305f\u3057\u307e\u3059\u3002 Flash Download\u30bf\u30d6\u3092\u30af\u30ea\u30c3\u30af\u3057\u3001\u66f8\u304d\u8fbc\u307f\u65b9\u6cd5\u3092\u8a2d\u5b9a\u3044\u305f\u3057\u307e\u3059\u3002 \u66f8\u304d\u8fbc\u307f\u5f8c\u3059\u3050\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u3001Reset and Run\u3092\u9078\u629e\u3057\u307e\u3059\u3002 OK\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u8a2d\u5b9a\u306f\u7d42\u4e86\u3067\u3059\u3002","title":"9. \u30c7\u30d0\u30c3\u30ab\u306e\u8a2d\u5b9a"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#10main","text":"Project\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u4e00\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bListings,Object,RTE\u30d5\u30a9\u30eb\u30c0\u304c\u81ea\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002 \u753b\u9762\u306e\u5de6\u30d5\u30a9\u30eb\u30c0SourceGroup 1\u3092\u5de6\u30af\u30ea\u30c3\u30af\u3057Add New Item to Group'SourceGroup 1'\u3092\u9078\u629e\u3057\u307e\u3059\u3002C File(.c)\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u4e00\u756a\u6700\u521d\u306b\u547c\u3070\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306a\u306e\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u306fmain.c\u3068\u540d\u524d\u3067\u4fdd\u5b58\u3057\u3066\u304f\u3060\u3055\u3044\u3002 main.c\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u958b\u304d\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u30a2\u30f3\u30c9\u30da\u30fc\u30b9\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"10\uff0emain\u95a2\u6570\u8ffd\u52a0"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#11-1fabobrick","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <stdbool.h> #include <stdint.h> #include \"nrf_delay.h\" #include \"boards.h\" #define PIN_NUMBER 3 #define INTERVAL 1000 int main ( void ) { nrf_gpio_cfg_output ( PIN_NUMBER ); while ( true ) { nrf_gpio_pin_toggle ( PIN_NUMBER ); nrf_delay_ms ( INTERVAL ); } }","title":"11. 1\u79d2\u9593\u9694\u3067FaboBrick\u3092\u70b9\u6ec5\u3055\u305b\u308b\u3002"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#12led","text":"Arduino PinA0\u306f\u3001NRF52\u306e\u30d4\u30f3\u756a\u53f7\u306fP0.03\u306b\u3068\u306a\u308a\u307e\u3059\u3002C\u8a00\u8a9e\u306a\u306e\u3067int\u306a\u3069\u306f\u3001\u30de\u30a4\u30b3\u30f3\u306b\u3088\u3063\u3066\u30d0\u30a4\u30c8\u6570\u304c\uff12\u30d0\u30a4\u30c8\u3067\u3042\u308b\u5834\u5408\u3068\uff14\u30d0\u30a4\u30c8\u3067\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u3001unsigned char(unsigned int)\u3067\u306f\u306a\u304fuint8_t\u306a\u3069\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u53ef\u8aad\u6027\u3084\u79fb\u690d\u6027\u306e\u89b3\u70b9\u304b\u3089\u671b\u307e\u3057\u3044\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \"nrf_delay.h\" #include \"nrf_gpio.h\" const uint8_t led_pin = 3 ; /*P0.03\u4f7f\u7528\u3000const\u3067\u4fee\u98fe\u3059\u308b\u5834\u5408\u306f\u5b9a\u6570\u306fROM\u306b\u683c\u7d0d\u3055\u308cRAM\u9818\u57df\u306e\u7bc0\u7d04\u306b\u306a\u308b*/ int main ( void ) { nrf_gpio_cfg_output ( led_pin ); /*\u30dd\u30fc\u30c8\u3092\u51fa\u529b\u306b\u8a2d\u5b9a*/ while ( true ) { uint32_t gpio_state = NRF_GPIO -> OUT ; /*\u30dd\u30fc\u30c8\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u3092\u53d6\u5f97*/ NRF_GPIO -> OUTSET = (( 1 << led_pin ) & ~ gpio_state ); NRF_GPIO -> OUTCLR = (( 1 << led_pin ) & gpio_state ); nrf_delay_ms ( 1000 ); /*\uff11\u79d2\u7121\u3057\u3082\u3057\u306a\u3044*/ } }","title":"12.\u76f4\u63a5\u30ec\u30b8\u30b9\u30bf\u64cd\u4f5c\u306b\u3088\u308bLED\u70b9\u6ec5\u306e\u5834\u5408"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#11boardshled","text":"\u30ec\u30b8\u30b9\u30bf\u64cd\u4f5c\u306f\u958b\u767a\u52b9\u7387\u304c\u60aa\u3044\u306e\u3067\u3001SDK\u306b\u306f\u3042\u3089\u304b\u3058\u3081\u3001\u30dc\u30fc\u30c9\u306b\u3042\u308f\u305b\u305f\u30d4\u30f3\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30ebboards.h\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \"nrf_delay.h\" #include \"nrf_gpio.h\" #include \"boards.h\" #define PINNUMBER 3 int main ( void ) { LEDS_CONFIGURE ( 1 << PINNUMBER ); while ( true ) { LEDS_INVERT ( 1 << PINNUMBER ); nrf_delay_ms ( 1000 ); } }","title":"11.boards.h\u3092\u5229\u7528\u3057\u305fLED\u70b9\u6ec5\u306e\u5834\u5408"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#13","text":"Build\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\uff08\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fcF7\uff09 \u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u306a\u3051\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306fbuild\u30d5\u30a9\u30eb\u30c0\u306b * *.axf\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002 \u4e26\u3073\u306b\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u3082\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u53e4\u3044\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u524a\u9664\u3057\u307e\u3059\u3002 Flash\u2192Erase ROM\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u3001 * *.hex\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3001 Download\u30dc\u30bf\u30f3\uff08\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8F8\uff09\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u66f8\u304d\u8fbc\u307f\u3057\u307e\u3059\u3002 \u66f8\u304d\u8fbc\u307f\u304c\u6210\u529f\u3059\u308c\u3070LED\u304c\u70b9\u6ec5\u3057\u307e\u3059\u3002","title":"13.\u5b9f\u884c"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#document","text":"NRF52 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 http://infocenter.nordicsemi.com/pdf/nRF52832_PS_v1.4.pdf","title":"Document"},{"location":"7.FaBoBrick(ANA)/101_brick_analog_led/#parts","text":"5mm LED(\u5404\u8272)","title":"\u69cb\u6210\u30d1\u30fc\u30c4Parts"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/","text":"#102 Buzzer Brick Overview \u5727\u96fb\u30d6\u30b6\u30fc\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 Connecting Schematic Sample Code PWM\u306b\u3088\u308b\u51fa\u529b Buzzer Brick\u3092\u63a5\u7d9a\u3057\u3001\u30d3\u30fc\u30d7\u97f3\u3092\u9cf4\u3089\u3057\u3066\u3044\u307e\u3059\u3002 \u97f3\u306e\u6ce2\u5f62\u306f\u77e9\u5f62\u6ce2\u3067PWM\u51fa\u529b\u3057\u307e\u3059\u3002 \u51fa\u529b\u3059\u308bPWM\u306e\u8a2d\u5b9a \u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u6bd4\u306f0.5\u306b\u8a2d\u5b9a \u30d9\u30fc\u30b9\u30af\u30ed\u30c3\u30af\u306f\uff11MHz\u3067\u51fa\u529b \u8a2d\u5b9a\u306f\u69cb\u9020\u4f53\u3067\u305d\u308c\u305e\u308c\u8a2d\u5b9a\u3057\u3066\u304a\u308a\u3001\u5404\u30e1\u30f3\u30d0\u3067\u8a2d\u5b9a\u3002 \u4e3b\u306a\u69cb\u9020\u4f53 nrf_drv_pwm_t PWM \u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30c7\u30fc\u30bf\u69cb\u9020\u4f53 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_Type * p_registers PWM\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3057\u793a\u3059 uint8_t drv_inst_idx \u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 enum nrf_pwm_mode_t PWM\u30e2\u30fc\u30c9 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_MODE_UP \u30a2\u30c3\u30d7\u30ab\u30a6\u30f3\u30bf\uff08\u30a8\u30c3\u30b8\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u30b5\u30a4\u30af\u30eb\uff09 NRF_PWM_MODE_UP_AND_DOWN \u30a2\u30c3\u30d7\u3001\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30bf\u3000\uff08\u30bb\u30f3\u30bf\u30fc\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u30b5\u30a4\u30af\u30eb\uff09 enum nrf_pwm_dec_load_t PWM\u30c7\u30b3\u30fc\u30c0\u30fc\u30ed\u30fc\u30c9\u30e2\u30fc\u30c9 \u30b7\u30fc\u30b1\u30f3\u30b9\u30c7\u30fc\u30bf\u306eRAM\u304b\u3089\u8aad\u307f\u51fa\u3055\u308c\u3001\u30b3\u30f3\u30da\u30a2\u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u65b9\u6cd5\u3002 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_LOAD_COMMON \u3059\u3079\u3066\u306ePWM\u30c1\u30e3\u30f3\u30cd\u30eb\uff080\u301c3\uff09\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09 NRF_PWM_LOAD_GROUPED \u30c1\u30e3\u30f3\u30cd\u30eb0\u30681\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3002\u30c1\u30e3\u30f3\u30cd\u30eb2\u30683\u306e2\u756a\u76ee\u306e\u30ef\u30fc\u30c9\u3002 NRF_PWM_LOAD_INDIVIDUAL \u30c1\u30e3\u30f3\u30cd\u30eb0\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3001\u30c1\u30e3\u30f3\u30cd\u30eb1\u3067\u306f2\u756a\u76ee\u3001\u30c1\u30e3\u30cd\u30eb2\u306e3\u756a\u76ee\u3001\u30c1\u30e3\u30f3\u30cd\u30eb3\u306e4\u756a\u76ee NRF_PWM_LOAD_WAVE_FORM \u30c1\u30e3\u30f3\u30cd\u30eb0\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3001\u30c1\u30e3\u30f3\u30cd\u30eb1\u3067\u306f2\u756a\u76ee\u30014\u756a\u76ee\u306f\u3001\u30d1\u30eb\u30b9\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30ab\u30a6\u30f3\u30bf\u306e\u6700\u4e0a\u4f4d\u306e\u5024 enum nrf_pwm_clk_t \u30d9\u30fc\u30b9\u30af\u30ed\u30c3\u30af\u5468\u6ce2\u6570\u3002 \u5909\u6570\u540d NRF_PWM_CLK_16MHz NRF_PWM_CLK_8MHz NRF_PWM_CLK_4MHz NRF_PWM_CLK_2MHz NRF_PWM_CLK_1MHz NRF_PWM_CLK_500kHz NRF_PWM_CLK_250kHz NRF_PWM_CLK_125kHz enum nrf_pwm_dec_step_t PWM\u30c7\u30b3\u30fc\u30c0\u30fc\u30cd\u30af\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u30e2\u30fc\u30c9 \u30a2\u30af\u30c6\u30a3\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u306e\u6b21\u306e\u5024\u304c\u3044\u3064\u30ed\u30fc\u30c9\u3055\u308c\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_STEP_AUTO Automatically after the current value is played and repeated the requested number of times.\u81ea\u52d5\u7684\u306b\u3001\u73fe\u5728\u306e\u5024\u304c\u30d7\u30ec\u30a4\u3055\u308c\u305f\u5f8c\u3001\u8981\u6c42\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059 NRF_PWM_STEP_TRIGGERED When the NRF_PWM_TASK_NEXTSTEP task is triggered. NRF_PWM_TASK_NEXTSTEP\u30bf\u30b9\u30af\u304c\u30c8\u30ea\u30ac\u30fc\u3057\u305f\u3068\u304d \u4e3b\u306a\u95a2\u6570 ret_code_t nrf_drv_pwm_init ret_code_t nrf_drv_pwm_init (nrf_drv_pwm_t const *const p_instance, nrf_drv_pwm_config_t const * p_config, nrf_drv_pwm_handler_t handler ) PWM\u30c9\u30e9\u30a4\u30d0\u3092\u521d\u671f\u5316\u3059\u308b\u95a2\u6570 \u5909\u6570\u540d \u6982\u8981 p_instance \u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 p_config \u521d\u671f\u8a2d\u5b9a\u69cb\u9020\u4f53\u3092\u6307\u3057\u793a\u3059\u3002\u3082\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u306a\u3089NULL\u3092\u3044\u308c\u307e\u3059\u3002 handler \u30e6\u30fc\u30b6\u30fc\u306b\u3088\u3063\u3066\u4f9b\u7d66\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3002\u3082\u3057\u4f7f\u308f\u306a\u3044\u306a\u3089\u3001\u4ee3\u308f\u308a\u306bNULL\u3092\u5165\u308c\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u901a\u77e5\u306f\u3055\u308c\u305a\u3001PWM\u5272\u308a\u8fbc\u307f\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002 \u8fd4\u308a\u5024 \u5909\u6570\u540d \u6982\u8981 NRF_SUCCESS \u6210\u529f\u3057\u305f\u5834\u5408\u3002 NRF_ERROR_INVALID_STATE \u3059\u3067\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3002 nrf_drv_pwm_uninit void nrf_drv_pwm_uninit ( nrf_drv_pwm_t const *const p_instance ) PWM\u30c9\u30e9\u30a4\u30d0\u3092\u521d\u671f\u5316\u3057\u306a\u3044\u95a2\u6570 \u30d7\u30ec\u30a4\u4e2d\u306e\u5834\u5408\u306f\u3001\u3059\u3050\u306b\u505c\u6b62\u3057\u307e\u3059\u3002 nrf_drv_pwm_simple_playback void nrf_drv_pwm_simple_playback (nrf_drv_pwm_t const *const p_instance, nrf_pwm_sequence_t const * p_sequence,uint16_tplayback_count,uint32_t flags ) \uff11\u56de\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u518d\u751f\u3092\u884c\u3046\u95a2\u6570 \u203b\u6307\u5b9a\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30c7\u30e5\u30fc\u30c6\u30a3\u30b5\u30a4\u30af\u30eb\u5024\u3092\u542b\u3080\u914d\u5217\u306fRAM\u306b\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u30b9\u30bf\u30c3\u30af\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u5909\u6570\u540d \u6982\u8981 p_instance PWM\u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6307\u3057\u793a\u3059 p_sequence \u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u6307\u3057\u793a\u3059 playback_count \u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u3059\u308b\u56de\u6570(\uff10\u3067\u3042\u3063\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002). flags Additional options. Pass any combination of playback flags, or 0 for default settings.\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u306e\u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u30d5\u30e9\u30c3\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u6e21\u3059\u304b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\u306f\uff10\u3068\u306a\u308a\u307e\u3059\u3002 \u97f3\u306e\u5468\u6ce2\u6570 \u97f3\u306e\u5468\u6ce2\u6570\u306f\u3001\u30e9\u306e\uff14\uff14\uff10\u3092\u30d9\u30fc\u30b9\u306b\uff12\uff3e\uff08\uff11/12\uff09\u306e\u516c\u5dee\u6570\u5217\u3067\u3042\u308a\u5468\u6ce2\u6570Hz\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002 \u5909\u6570\u540d \u6982\u8981 \u30c9 261.6255653 \u30c9\uff03 277.182631 \u30ec 293.6647679 \u30ec\uff03 311.1269837 \u30df 329.6275569 \u30d5\u30a1 369.9944227 \u30d5\u30a1\uff03 391.995436 \u30bd 415.3046976 \u30e9 440 \u30e9\uff03 466.1637615 \u30b7 493.8833013 \u30c9 523.2511306 \u6ce2\u9577length\u306f\u3001\uff08\uff11\uff10\uff10\uff10\uff0f\u5468\u6ce2\u6570\uff09\uff0a\uff11\uff10\uff10\uff10\u306b\u306a\u308a\u307e\u3059\u3002 \u7e70\u308a\u8fd4\u3057\u306f\uff11\uff10\uff10\u56de\u3067\u3059\u3002 Inclue File \u30d5\u30a9\u30eb\u30c0 \u5fc5\u8981\u306aHeader File \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eRoot\u30d1\u30b9 \u81ea\u5206\u81ea\u8eab\u3078\u306e\u30d1\u30b9 nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/hal/ nrf_gpio.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/nrf_soc_nosd/ nrf_error.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/pwm/ nrf_drv_pwm.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/delay/ nrf_delay.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/clock/ nrf_drv_clock.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/common/ nrf_drv_common.h nRF5_SDK_12.3.0_d7731ad/components/libraries/bsp/ bsp.h nRF5_SDK_12.3.0_d7731ad/components/libraries/util/ nrf_assert.h nRF5_SDK_12.3.0_d7731ad/components/libraries/timer/ app_timer.h nRF5_SDK_12.3.0_d7731ad/components/boards/ boards.h \u30d3\u30fc\u30d7\u97f3\u3067\u30c9\u30ec\u30df\u3092\u6f14\u594f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #include <stdio.h> #include <string.h> #include \"nrf_drv_pwm.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"boards.h\" #include \"bsp.h\" #include \"app_timer.h\" #include \"nrf_drv_clock.h\" #include \"nrf_delay.h\" #define Fabo_Shinobi_AnalogPin 3 static nrf_drv_pwm_t m_pwm0 = NRF_DRV_PWM_INSTANCE ( 0 ); static void sound ( int freq ) { uint32_t err_code ; nrf_drv_pwm_config_t config0 = { . output_pins = { Fabo_Shinobi_AnalogPin | NRF_DRV_PWM_PIN_INVERTED , }, . irq_priority = APP_IRQ_PRIORITY_LOWEST , . base_clock = NRF_PWM_CLK_1MHz , . count_mode = NRF_PWM_MODE_UP , . top_value = freq , . load_mode = NRF_PWM_LOAD_COMMON , . step_mode = NRF_PWM_STEP_AUTO }; err_code = nrf_drv_pwm_init ( & m_pwm0 , & config0 , NULL ); APP_ERROR_CHECK ( err_code ); // This array cannot be allocated on stack (hence \"static\") and it must // be in RAM. static nrf_pwm_values_common_t seq0_values [ 2 ]; nrf_pwm_sequence_t const seq0 = { . values . p_common = seq0_values , . length = NRF_PWM_VALUES_LENGTH ( seq0_values ), . repeats = 100 , . end_delay = 0 }; seq0_values [ 0 ] = freq / 2 ; nrf_drv_pwm_simple_playback ( & m_pwm0 , & seq0 , 1 , NRF_DRV_PWM_FLAG_LOOP ); } int main ( void ) { while ( 1 ){ sound ( 3822 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 3405 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 3033 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2863 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2551 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2272 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2024 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 1911 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); nrf_delay_ms ( 1000 ); } } \u53c2\u7167\u3000API nrf_drv_pwm_config_t Struct Reference https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v11.0.0%2Fstructnrf__drv__pwm__config__t.html Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > Data Structures > Data Structures PWM HAL Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > API Reference > Peripheral drivers > PWM HAL and driver PWM Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > Hardware Drivers \u69cb\u6210Parts \u5727\u96fb\u30d6\u30b6\u30fc GitHub","title":"102 Buzzer Brick"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#102-buzzer-brick","text":"","title":"#102 Buzzer Brick"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#overview","text":"\u5727\u96fb\u30d6\u30b6\u30fc\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#sample-code","text":"","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#pwm","text":"Buzzer Brick\u3092\u63a5\u7d9a\u3057\u3001\u30d3\u30fc\u30d7\u97f3\u3092\u9cf4\u3089\u3057\u3066\u3044\u307e\u3059\u3002 \u97f3\u306e\u6ce2\u5f62\u306f\u77e9\u5f62\u6ce2\u3067PWM\u51fa\u529b\u3057\u307e\u3059\u3002","title":"PWM\u306b\u3088\u308b\u51fa\u529b"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#pwm_1","text":"\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u6bd4\u306f0.5\u306b\u8a2d\u5b9a \u30d9\u30fc\u30b9\u30af\u30ed\u30c3\u30af\u306f\uff11MHz\u3067\u51fa\u529b \u8a2d\u5b9a\u306f\u69cb\u9020\u4f53\u3067\u305d\u308c\u305e\u308c\u8a2d\u5b9a\u3057\u3066\u304a\u308a\u3001\u5404\u30e1\u30f3\u30d0\u3067\u8a2d\u5b9a\u3002","title":"\u51fa\u529b\u3059\u308bPWM\u306e\u8a2d\u5b9a"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#_1","text":"","title":"\u4e3b\u306a\u69cb\u9020\u4f53"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#nrf_drv_pwm_t","text":"PWM \u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30c7\u30fc\u30bf\u69cb\u9020\u4f53 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_Type * p_registers PWM\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3057\u793a\u3059 uint8_t drv_inst_idx \u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9","title":"nrf_drv_pwm_t"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#enum-nrf_pwm_mode_t","text":"PWM\u30e2\u30fc\u30c9 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_MODE_UP \u30a2\u30c3\u30d7\u30ab\u30a6\u30f3\u30bf\uff08\u30a8\u30c3\u30b8\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u30b5\u30a4\u30af\u30eb\uff09 NRF_PWM_MODE_UP_AND_DOWN \u30a2\u30c3\u30d7\u3001\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30bf\u3000\uff08\u30bb\u30f3\u30bf\u30fc\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u30b5\u30a4\u30af\u30eb\uff09","title":"enum nrf_pwm_mode_t"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#enum-nrf_pwm_dec_load_t","text":"PWM\u30c7\u30b3\u30fc\u30c0\u30fc\u30ed\u30fc\u30c9\u30e2\u30fc\u30c9 \u30b7\u30fc\u30b1\u30f3\u30b9\u30c7\u30fc\u30bf\u306eRAM\u304b\u3089\u8aad\u307f\u51fa\u3055\u308c\u3001\u30b3\u30f3\u30da\u30a2\u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u65b9\u6cd5\u3002 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_LOAD_COMMON \u3059\u3079\u3066\u306ePWM\u30c1\u30e3\u30f3\u30cd\u30eb\uff080\u301c3\uff09\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09 NRF_PWM_LOAD_GROUPED \u30c1\u30e3\u30f3\u30cd\u30eb0\u30681\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3002\u30c1\u30e3\u30f3\u30cd\u30eb2\u30683\u306e2\u756a\u76ee\u306e\u30ef\u30fc\u30c9\u3002 NRF_PWM_LOAD_INDIVIDUAL \u30c1\u30e3\u30f3\u30cd\u30eb0\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3001\u30c1\u30e3\u30f3\u30cd\u30eb1\u3067\u306f2\u756a\u76ee\u3001\u30c1\u30e3\u30cd\u30eb2\u306e3\u756a\u76ee\u3001\u30c1\u30e3\u30f3\u30cd\u30eb3\u306e4\u756a\u76ee NRF_PWM_LOAD_WAVE_FORM \u30c1\u30e3\u30f3\u30cd\u30eb0\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3001\u30c1\u30e3\u30f3\u30cd\u30eb1\u3067\u306f2\u756a\u76ee\u30014\u756a\u76ee\u306f\u3001\u30d1\u30eb\u30b9\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30ab\u30a6\u30f3\u30bf\u306e\u6700\u4e0a\u4f4d\u306e\u5024","title":"enum nrf_pwm_dec_load_t"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#enum-nrf_pwm_clk_t","text":"\u30d9\u30fc\u30b9\u30af\u30ed\u30c3\u30af\u5468\u6ce2\u6570\u3002 \u5909\u6570\u540d NRF_PWM_CLK_16MHz NRF_PWM_CLK_8MHz NRF_PWM_CLK_4MHz NRF_PWM_CLK_2MHz NRF_PWM_CLK_1MHz NRF_PWM_CLK_500kHz NRF_PWM_CLK_250kHz NRF_PWM_CLK_125kHz","title":"enum nrf_pwm_clk_t"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#enum-nrf_pwm_dec_step_t","text":"PWM\u30c7\u30b3\u30fc\u30c0\u30fc\u30cd\u30af\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u30e2\u30fc\u30c9 \u30a2\u30af\u30c6\u30a3\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u306e\u6b21\u306e\u5024\u304c\u3044\u3064\u30ed\u30fc\u30c9\u3055\u308c\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_STEP_AUTO Automatically after the current value is played and repeated the requested number of times.\u81ea\u52d5\u7684\u306b\u3001\u73fe\u5728\u306e\u5024\u304c\u30d7\u30ec\u30a4\u3055\u308c\u305f\u5f8c\u3001\u8981\u6c42\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059 NRF_PWM_STEP_TRIGGERED When the NRF_PWM_TASK_NEXTSTEP task is triggered. NRF_PWM_TASK_NEXTSTEP\u30bf\u30b9\u30af\u304c\u30c8\u30ea\u30ac\u30fc\u3057\u305f\u3068\u304d","title":"enum nrf_pwm_dec_step_t"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#_2","text":"","title":"\u4e3b\u306a\u95a2\u6570"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#ret_code_t-nrf_drv_pwm_init","text":"ret_code_t nrf_drv_pwm_init (nrf_drv_pwm_t const *const p_instance, nrf_drv_pwm_config_t const * p_config, nrf_drv_pwm_handler_t handler ) PWM\u30c9\u30e9\u30a4\u30d0\u3092\u521d\u671f\u5316\u3059\u308b\u95a2\u6570 \u5909\u6570\u540d \u6982\u8981 p_instance \u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 p_config \u521d\u671f\u8a2d\u5b9a\u69cb\u9020\u4f53\u3092\u6307\u3057\u793a\u3059\u3002\u3082\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u306a\u3089NULL\u3092\u3044\u308c\u307e\u3059\u3002 handler \u30e6\u30fc\u30b6\u30fc\u306b\u3088\u3063\u3066\u4f9b\u7d66\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3002\u3082\u3057\u4f7f\u308f\u306a\u3044\u306a\u3089\u3001\u4ee3\u308f\u308a\u306bNULL\u3092\u5165\u308c\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u901a\u77e5\u306f\u3055\u308c\u305a\u3001PWM\u5272\u308a\u8fbc\u307f\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002 \u8fd4\u308a\u5024 \u5909\u6570\u540d \u6982\u8981 NRF_SUCCESS \u6210\u529f\u3057\u305f\u5834\u5408\u3002 NRF_ERROR_INVALID_STATE \u3059\u3067\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3002","title":"ret_code_t nrf_drv_pwm_init"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#nrf_drv_pwm_uninit","text":"void nrf_drv_pwm_uninit ( nrf_drv_pwm_t const *const p_instance ) PWM\u30c9\u30e9\u30a4\u30d0\u3092\u521d\u671f\u5316\u3057\u306a\u3044\u95a2\u6570 \u30d7\u30ec\u30a4\u4e2d\u306e\u5834\u5408\u306f\u3001\u3059\u3050\u306b\u505c\u6b62\u3057\u307e\u3059\u3002","title":"nrf_drv_pwm_uninit"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#nrf_drv_pwm_simple_playback","text":"void nrf_drv_pwm_simple_playback (nrf_drv_pwm_t const *const p_instance, nrf_pwm_sequence_t const * p_sequence,uint16_tplayback_count,uint32_t flags ) \uff11\u56de\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u518d\u751f\u3092\u884c\u3046\u95a2\u6570 \u203b\u6307\u5b9a\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30c7\u30e5\u30fc\u30c6\u30a3\u30b5\u30a4\u30af\u30eb\u5024\u3092\u542b\u3080\u914d\u5217\u306fRAM\u306b\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u30b9\u30bf\u30c3\u30af\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u5909\u6570\u540d \u6982\u8981 p_instance PWM\u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6307\u3057\u793a\u3059 p_sequence \u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u6307\u3057\u793a\u3059 playback_count \u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u3059\u308b\u56de\u6570(\uff10\u3067\u3042\u3063\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002). flags Additional options. Pass any combination of playback flags, or 0 for default settings.\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u306e\u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u30d5\u30e9\u30c3\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u6e21\u3059\u304b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\u306f\uff10\u3068\u306a\u308a\u307e\u3059\u3002","title":"nrf_drv_pwm_simple_playback"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#_3","text":"\u97f3\u306e\u5468\u6ce2\u6570\u306f\u3001\u30e9\u306e\uff14\uff14\uff10\u3092\u30d9\u30fc\u30b9\u306b\uff12\uff3e\uff08\uff11/12\uff09\u306e\u516c\u5dee\u6570\u5217\u3067\u3042\u308a\u5468\u6ce2\u6570Hz\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002 \u5909\u6570\u540d \u6982\u8981 \u30c9 261.6255653 \u30c9\uff03 277.182631 \u30ec 293.6647679 \u30ec\uff03 311.1269837 \u30df 329.6275569 \u30d5\u30a1 369.9944227 \u30d5\u30a1\uff03 391.995436 \u30bd 415.3046976 \u30e9 440 \u30e9\uff03 466.1637615 \u30b7 493.8833013 \u30c9 523.2511306 \u6ce2\u9577length\u306f\u3001\uff08\uff11\uff10\uff10\uff10\uff0f\u5468\u6ce2\u6570\uff09\uff0a\uff11\uff10\uff10\uff10\u306b\u306a\u308a\u307e\u3059\u3002 \u7e70\u308a\u8fd4\u3057\u306f\uff11\uff10\uff10\u56de\u3067\u3059\u3002","title":"\u97f3\u306e\u5468\u6ce2\u6570"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#inclue-file","text":"\u30d5\u30a9\u30eb\u30c0 \u5fc5\u8981\u306aHeader File \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eRoot\u30d1\u30b9 \u81ea\u5206\u81ea\u8eab\u3078\u306e\u30d1\u30b9 nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/hal/ nrf_gpio.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/nrf_soc_nosd/ nrf_error.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/pwm/ nrf_drv_pwm.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/delay/ nrf_delay.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/clock/ nrf_drv_clock.h nRF5_SDK_12.3.0_d7731ad/components/drivers_nrf/common/ nrf_drv_common.h nRF5_SDK_12.3.0_d7731ad/components/libraries/bsp/ bsp.h nRF5_SDK_12.3.0_d7731ad/components/libraries/util/ nrf_assert.h nRF5_SDK_12.3.0_d7731ad/components/libraries/timer/ app_timer.h nRF5_SDK_12.3.0_d7731ad/components/boards/ boards.h","title":"Inclue File"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #include <stdio.h> #include <string.h> #include \"nrf_drv_pwm.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"boards.h\" #include \"bsp.h\" #include \"app_timer.h\" #include \"nrf_drv_clock.h\" #include \"nrf_delay.h\" #define Fabo_Shinobi_AnalogPin 3 static nrf_drv_pwm_t m_pwm0 = NRF_DRV_PWM_INSTANCE ( 0 ); static void sound ( int freq ) { uint32_t err_code ; nrf_drv_pwm_config_t config0 = { . output_pins = { Fabo_Shinobi_AnalogPin | NRF_DRV_PWM_PIN_INVERTED , }, . irq_priority = APP_IRQ_PRIORITY_LOWEST , . base_clock = NRF_PWM_CLK_1MHz , . count_mode = NRF_PWM_MODE_UP , . top_value = freq , . load_mode = NRF_PWM_LOAD_COMMON , . step_mode = NRF_PWM_STEP_AUTO }; err_code = nrf_drv_pwm_init ( & m_pwm0 , & config0 , NULL ); APP_ERROR_CHECK ( err_code ); // This array cannot be allocated on stack (hence \"static\") and it must // be in RAM. static nrf_pwm_values_common_t seq0_values [ 2 ]; nrf_pwm_sequence_t const seq0 = { . values . p_common = seq0_values , . length = NRF_PWM_VALUES_LENGTH ( seq0_values ), . repeats = 100 , . end_delay = 0 }; seq0_values [ 0 ] = freq / 2 ; nrf_drv_pwm_simple_playback ( & m_pwm0 , & seq0 , 1 , NRF_DRV_PWM_FLAG_LOOP ); } int main ( void ) { while ( 1 ){ sound ( 3822 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 3405 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 3033 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2863 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2551 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2272 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2024 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 1911 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); nrf_delay_ms ( 1000 ); } }","title":"\u30d3\u30fc\u30d7\u97f3\u3067\u30c9\u30ec\u30df\u3092\u6f14\u594f\u3002"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#api","text":"nrf_drv_pwm_config_t Struct Reference https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v11.0.0%2Fstructnrf__drv__pwm__config__t.html Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > Data Structures > Data Structures PWM HAL Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > API Reference > Peripheral drivers > PWM HAL and driver PWM Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > Hardware Drivers","title":"\u53c2\u7167\u3000API"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#parts","text":"\u5727\u96fb\u30d6\u30b6\u30fc","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/102_brick_analog_buzzer/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/103_brick_analog_button/","text":"#103 Button Brick Overview \u30dc\u30bf\u30f3\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002I/O\u30d4\u30f3\u3088\u308a\u30dc\u30bf\u30f3\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting Schematic Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO_103_BUTTON\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"PUSH BUTTON : %d \\r\\n \" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } } \u69cb\u6210Parts 12mm\u89d2\u30bf\u30af\u30c8\u30b9\u30a4\u30c3\u30c1 GitHub","title":"103 Button Brick"},{"location":"7.FaBoBrick(ANA)/103_brick_analog_button/#103-button-brick","text":"","title":"#103 Button Brick"},{"location":"7.FaBoBrick(ANA)/103_brick_analog_button/#overview","text":"\u30dc\u30bf\u30f3\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002I/O\u30d4\u30f3\u3088\u308a\u30dc\u30bf\u30f3\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/103_brick_analog_button/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/103_brick_analog_button/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/103_brick_analog_button/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO_103_BUTTON\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"PUSH BUTTON : %d \\r\\n \" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/103_brick_analog_button/#parts","text":"12mm\u89d2\u30bf\u30af\u30c8\u30b9\u30a4\u30c3\u30c1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/103_brick_analog_button/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/","text":"#104 Angle Brick Overview \u30dc\u30ea\u30e5\u30fc\u30e0\u62b5\u6297\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u304b\u3089\u30a2\u30ca\u30ed\u30b0\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 LED Brick\u306e\u660e\u308b\u3055\u3092\u8abf\u7bc0\u3059\u308b\u969b\u306a\u3069\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 Connecting Schematic Code explanation nRF52832\u306f\u3001ADC\u304c\u4f7f\u3048\u308b\u30d4\u30f3\u306f\u6c7a\u307e\u3063\u3066\u304a\u308a\u3001P0.03\u306f\u3001AIN1\u3068\u306a\u308a\u307e\u3059\u3002 \u30a2\u30ca\u30ed\u30b0\u5024\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u30bd\u30d5\u30c8(Teraterm\u306a\u3069)\u304b\u3089\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 \u30c9\u30e9\u30a4\u30d0\u306fPPI\uff08Programmable peripheral interconnect\uff09\u30c9\u30e9\u30a4\u30d0\u3092\u4f7f\u3044\u307e\u3059\u3002A/D\u5909\u63db\u3059\u308b\u306e \u306bARM\u30b3\u30a2\u3092\u8d77\u52d5\u3059\u308b\u306e\u306f\u6d88\u8cbb\u96fb\u529b\u306e\u7121\u99c4\u3067\u3042\u308a\u3001PPI\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066\u3001PPI\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u6307\u5b9a \u3001\u30b3\u30a2\u3092\u8d77\u52d5\u3057\u306a\u3044\u3067\u3001\u30a4\u30d9\u30f3\u30c8\u30e1\u30e2\u30ea\u3068\u30bf\u30b9\u30af\u3067\u8a08\u6e2c\u30c7\u30fc\u30bf\u3092PPI\u306e\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002 Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FABO ANGLE\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { NRF_LOG_INFO ( \"%d \\r\\n \" , p_event -> data . done . p_buffer [ i ]); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi Sample Angle Brick 104 \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts \u30dc\u30ea\u30e5\u30fc\u30e0\u62b5\u6297\u5668A 10k GitHub","title":"104 Angle Brick"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/#104-angle-brick","text":"","title":"#104 Angle Brick"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/#overview","text":"\u30dc\u30ea\u30e5\u30fc\u30e0\u62b5\u6297\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u304b\u3089\u30a2\u30ca\u30ed\u30b0\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 LED Brick\u306e\u660e\u308b\u3055\u3092\u8abf\u7bc0\u3059\u308b\u969b\u306a\u3069\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/#code-explanation","text":"nRF52832\u306f\u3001ADC\u304c\u4f7f\u3048\u308b\u30d4\u30f3\u306f\u6c7a\u307e\u3063\u3066\u304a\u308a\u3001P0.03\u306f\u3001AIN1\u3068\u306a\u308a\u307e\u3059\u3002 \u30a2\u30ca\u30ed\u30b0\u5024\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u30bd\u30d5\u30c8(Teraterm\u306a\u3069)\u304b\u3089\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 \u30c9\u30e9\u30a4\u30d0\u306fPPI\uff08Programmable peripheral interconnect\uff09\u30c9\u30e9\u30a4\u30d0\u3092\u4f7f\u3044\u307e\u3059\u3002A/D\u5909\u63db\u3059\u308b\u306e \u306bARM\u30b3\u30a2\u3092\u8d77\u52d5\u3059\u308b\u306e\u306f\u6d88\u8cbb\u96fb\u529b\u306e\u7121\u99c4\u3067\u3042\u308a\u3001PPI\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066\u3001PPI\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u6307\u5b9a \u3001\u30b3\u30a2\u3092\u8d77\u52d5\u3057\u306a\u3044\u3067\u3001\u30a4\u30d9\u30f3\u30c8\u30e1\u30e2\u30ea\u3068\u30bf\u30b9\u30af\u3067\u8a08\u6e2c\u30c7\u30fc\u30bf\u3092PPI\u306e\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002","title":"Code explanation"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FABO ANGLE\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { NRF_LOG_INFO ( \"%d \\r\\n \" , p_event -> data . done . p_buffer [ i ]); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi Sample Angle Brick 104 \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/#parts","text":"\u30dc\u30ea\u30e5\u30fc\u30e0\u62b5\u6297\u5668A 10k","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/104_brick_analog_angle/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/","text":"#105 Vibrator Brick Overview \u632f\u52d5\u30e2\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u304b\u3089\u632f\u52d5\u30e2\u30fc\u30bf\u30fc\u306eON/OFF\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting Parts Specification Document LA3R5-480AH1 Schematic Sample Code \u30bf\u30a4\u30de\u30fc\u3067\u30d0\u30a4\u30d6\u30ec\u30fc\u30bf\u30fc\u30920.5\u79d2\u3054\u3068\u306b\u4f5c\u52d5\u3001\u505c\u6b62\u3055\u305b\u307e\u3059\u3002 \u52d5\u4f5c\u306b\u306f\u3001\uff15V\u306e\u96fb\u6e90\u304c\u5fc5\u8981\u3068\u306a\u308a\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\u4ee3\u7528\u3068\u3057\u3066LED Brick\u3067\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"nrf_drv_timer.h\" #include \"bsp.h\" #include \"app_error.h\" const nrf_drv_timer_t TIMER_LED = NRF_DRV_TIMER_INSTANCE ( 0 ); #define PIN_NUMBER 3 void timer_led_event_handler ( nrf_timer_event_t event_type , void * p_context ) { switch ( event_type ) { case NRF_TIMER_EVENT_COMPARE0 : nrf_gpio_pin_toggle ( PIN_NUMBER ); break ; default : break ; } } int main ( void ) { uint32_t time_ms = 500 ; uint32_t time_ticks ; uint32_t err_code = NRF_SUCCESS ; LEDS_CONFIGURE ( 1 << PIN_NUMBER ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; err_code = nrf_drv_timer_init ( & TIMER_LED , & timer_cfg , timer_led_event_handler ); APP_ERROR_CHECK ( err_code ); time_ticks = nrf_drv_timer_ms_to_ticks ( & TIMER_LED , time_ms ); nrf_drv_timer_extended_compare ( & TIMER_LED , NRF_TIMER_CC_CHANNEL0 , time_ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , true ); nrf_drv_timer_enable ( & TIMER_LED ); while ( 1 ) { __WFI (); } } \u69cb\u6210Parts \u632f\u52d5\u30e2\u30fc\u30bf\u30fc LA3R5-480AH1 GitHub","title":"105 Vibrator Brick"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/#105-vibrator-brick","text":"","title":"#105 Vibrator Brick"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/#overview","text":"\u632f\u52d5\u30e2\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u304b\u3089\u632f\u52d5\u30e2\u30fc\u30bf\u30fc\u306eON/OFF\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/#parts-specification","text":"Document LA3R5-480AH1","title":"Parts Specification"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/#sample-code","text":"\u30bf\u30a4\u30de\u30fc\u3067\u30d0\u30a4\u30d6\u30ec\u30fc\u30bf\u30fc\u30920.5\u79d2\u3054\u3068\u306b\u4f5c\u52d5\u3001\u505c\u6b62\u3055\u305b\u307e\u3059\u3002 \u52d5\u4f5c\u306b\u306f\u3001\uff15V\u306e\u96fb\u6e90\u304c\u5fc5\u8981\u3068\u306a\u308a\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\u4ee3\u7528\u3068\u3057\u3066LED Brick\u3067\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"nrf_drv_timer.h\" #include \"bsp.h\" #include \"app_error.h\" const nrf_drv_timer_t TIMER_LED = NRF_DRV_TIMER_INSTANCE ( 0 ); #define PIN_NUMBER 3 void timer_led_event_handler ( nrf_timer_event_t event_type , void * p_context ) { switch ( event_type ) { case NRF_TIMER_EVENT_COMPARE0 : nrf_gpio_pin_toggle ( PIN_NUMBER ); break ; default : break ; } } int main ( void ) { uint32_t time_ms = 500 ; uint32_t time_ticks ; uint32_t err_code = NRF_SUCCESS ; LEDS_CONFIGURE ( 1 << PIN_NUMBER ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; err_code = nrf_drv_timer_init ( & TIMER_LED , & timer_cfg , timer_led_event_handler ); APP_ERROR_CHECK ( err_code ); time_ticks = nrf_drv_timer_ms_to_ticks ( & TIMER_LED , time_ms ); nrf_drv_timer_extended_compare ( & TIMER_LED , NRF_TIMER_CC_CHANNEL0 , time_ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , true ); nrf_drv_timer_enable ( & TIMER_LED ); while ( 1 ) { __WFI (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/#parts","text":"\u632f\u52d5\u30e2\u30fc\u30bf\u30fc LA3R5-480AH1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/105_brick_analog_vibrator/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/","text":"#106 Touch Brick Overview \u611f\u5727\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u305f\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fcBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u3001\u611f\u5727\u90e8\u5206\u306b\u52a0\u3048\u3089\u308c\u305f\u529b\u306e\u5927\u304d\u3055\u306e\u5909\u5316\u3092\u30a2\u30ca\u30ed\u30b0\u5024\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting Datasheet Document Datasheet Schematic Sample Code A1\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fTouch Brick\u306e\u611f\u5727\u306b\u3088\u3063\u3066\u3001A0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fLED Brick\u3092\u70b9\u706f/\u6d88\u706f\u3055\u305b\u3066\u3044\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FaBo_106_TOUCH\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { NRF_LOG_INFO ( \"%d \\r\\n \" , p_event -> data . done . p_buffer [ i ]); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { ret_code_t err_code ; err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi TOUCH Brick 106 Sample. \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts \u611f\u5727\u30bb\u30f3\u30b5\u30fc GitHub","title":"106 Touch Brick"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/#106-touch-brick","text":"","title":"#106 Touch Brick"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/#overview","text":"\u611f\u5727\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u305f\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fcBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u3001\u611f\u5727\u90e8\u5206\u306b\u52a0\u3048\u3089\u308c\u305f\u529b\u306e\u5927\u304d\u3055\u306e\u5909\u5316\u3092\u30a2\u30ca\u30ed\u30b0\u5024\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/#datasheet","text":"Document Datasheet","title":"Datasheet"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/#sample-code","text":"A1\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fTouch Brick\u306e\u611f\u5727\u306b\u3088\u3063\u3066\u3001A0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fLED Brick\u3092\u70b9\u706f/\u6d88\u706f\u3055\u305b\u3066\u3044\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FaBo_106_TOUCH\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { NRF_LOG_INFO ( \"%d \\r\\n \" , p_event -> data . done . p_buffer [ i ]); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { ret_code_t err_code ; err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi TOUCH Brick 106 Sample. \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/#parts","text":"\u611f\u5727\u30bb\u30f3\u30b5\u30fc","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/106_brick_analog_touch/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/","text":"#107 LimitSwitch Brick Overview \u30ea\u30df\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u30b9\u30a4\u30c3\u30c1\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6a5f\u68b0\u306e\u81ea\u52d5\u505c\u6b62\u3084\u4f4d\u7f6e\u691c\u51fa\u306e\u969b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 Connecting Arduino Support Schematic Sample Code A1\u30b3\u30cd\u30af\u30bf\u306bLimitSwitch Brick\u3092\u63a5\u7d9a\u3057\u3001A0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fLED Brick\u306e\u70b9\u706f/\u6d88\u706f\u3092\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO_107_LIMITSWITCH\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); gpio_init (); while ( true ) { uint32_t LimitSwitch = 0 ; static uint32_t push_time = 0 ; LimitSwitch = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( LimitSwitch == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"PUSH LIMITSWITCH : %d \\r\\n \" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } } \u69cb\u6210Parts \u30ea\u30df\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1 GitHub","title":"107 LimitSwitch Brick"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#107-limitswitch-brick","text":"","title":"#107 LimitSwitch Brick"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#overview","text":"\u30ea\u30df\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u30b9\u30a4\u30c3\u30c1\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6a5f\u68b0\u306e\u81ea\u52d5\u505c\u6b62\u3084\u4f4d\u7f6e\u691c\u51fa\u306e\u969b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#arduino","text":"","title":"Arduino"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#support","text":"","title":"Support"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#sample-code","text":"A1\u30b3\u30cd\u30af\u30bf\u306bLimitSwitch Brick\u3092\u63a5\u7d9a\u3057\u3001A0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fLED Brick\u306e\u70b9\u706f/\u6d88\u706f\u3092\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO_107_LIMITSWITCH\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); gpio_init (); while ( true ) { uint32_t LimitSwitch = 0 ; static uint32_t push_time = 0 ; LimitSwitch = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( LimitSwitch == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"PUSH LIMITSWITCH : %d \\r\\n \" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#parts","text":"\u30ea\u30df\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/107_brick_analog_limitswitch/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/","text":"#108 Temperature Brick Overview \u6e29\u5ea6\u3092\u8a08\u6e2c\u3059\u308bBrick\u3067\u3059\u3002 \u30a2\u30ca\u30ed\u30b0\u5024(ADC 12bit\u306e\u5834\u5408\u30000\u301c4096)\u3092\u53d6\u5f97\u3067\u304d\u3001\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u221230\u5ea6\u304b\u3089100\u5ea6\u307e\u3067\u306e\u6e29\u5ea6\u3092\u8a08\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting LM61CIZ Datasheet Document LM61CIZ Datasheet Schematic Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /* ADC1 init function */ static void MX_ADC1_Init ( void ) { ADC_ChannelConfTypeDef sConfig ; /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */ hadc1 . Instance = ADC1 ; hadc1 . Init . ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2 ; hadc1 . Init . Resolution = ADC_RESOLUTION_12B ; hadc1 . Init . ScanConvMode = DISABLE ; hadc1 . Init . ContinuousConvMode = DISABLE ; hadc1 . Init . DiscontinuousConvMode = DISABLE ; hadc1 . Init . ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE ; hadc1 . Init . DataAlign = ADC_DATAALIGN_RIGHT ; hadc1 . Init . NbrOfConversion = 1 ; hadc1 . Init . DMAContinuousRequests = DISABLE ; hadc1 . Init . EOCSelection = ADC_EOC_SINGLE_CONV ; if ( HAL_ADC_Init ( & hadc1 ) != HAL_OK ) { Error_Handler (); } /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */ sConfig . Channel = ADC_CHANNEL_0 ; sConfig . Rank = 1 ; sConfig . SamplingTime = ADC_SAMPLETIME_3CYCLES ; if ( HAL_ADC_ConfigChannel ( & hadc1 , & sConfig ) != HAL_OK ) { Error_Handler (); } } main.c\u306e\u30b3\u30fc\u30c9\uff08\u629c\u7c8b\uff09 1 2 3 4 5 6 /* Includes ------------------------------------------------------------------*/ #include \"stm32f4xx_hal.h\" /* USER CODE BEGIN Includes */ #include <stdio.h> #include <string.h> main.c\u95a2\u6570\u306e\u30b3\u30fc\u30c9\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8ffd\u52a0\u3057\u307e\u3059\u300212bit\u3067\u3042\u308b\u304b\u30890~4096\u30003.3V\u306e\u6642\u305d\u306e\u6642\u306e\u96fb\u5727\u306e\u5024\u306f4095\u306b\u306a\u308a\u307e\u3059\u30020.6V\u306e\u6642\u306f0\u2103,1.6V\u3067100\u2103\u3068\u306a\u308a\u3001\uff11\u2103\u4e0a\u304c\u308b\u3054\u3068\u306b0.01V\u4e0a\u6607\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FABO Temprature 106\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double temp = ((( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ) - 600.0 ) / 10.0 ; NRF_LOG_INFO ( \" Celsius=\" NRF_LOG_FLOAT_MARKER \" \\r\\n \" , NRF_LOG_FLOAT ( temp )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi Temprature Brick 108 \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts IC\u6e29\u5ea6\u30bb\u30f3\u30b5 LM61CIZ GitHub","title":"108 Temperature Brick"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/#108-temperature-brick","text":"","title":"#108 Temperature Brick"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/#overview","text":"\u6e29\u5ea6\u3092\u8a08\u6e2c\u3059\u308bBrick\u3067\u3059\u3002 \u30a2\u30ca\u30ed\u30b0\u5024(ADC 12bit\u306e\u5834\u5408\u30000\u301c4096)\u3092\u53d6\u5f97\u3067\u304d\u3001\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u221230\u5ea6\u304b\u3089100\u5ea6\u307e\u3067\u306e\u6e29\u5ea6\u3092\u8a08\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/#lm61ciz-datasheet","text":"Document LM61CIZ Datasheet","title":"LM61CIZ Datasheet"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /* ADC1 init function */ static void MX_ADC1_Init ( void ) { ADC_ChannelConfTypeDef sConfig ; /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */ hadc1 . Instance = ADC1 ; hadc1 . Init . ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2 ; hadc1 . Init . Resolution = ADC_RESOLUTION_12B ; hadc1 . Init . ScanConvMode = DISABLE ; hadc1 . Init . ContinuousConvMode = DISABLE ; hadc1 . Init . DiscontinuousConvMode = DISABLE ; hadc1 . Init . ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE ; hadc1 . Init . DataAlign = ADC_DATAALIGN_RIGHT ; hadc1 . Init . NbrOfConversion = 1 ; hadc1 . Init . DMAContinuousRequests = DISABLE ; hadc1 . Init . EOCSelection = ADC_EOC_SINGLE_CONV ; if ( HAL_ADC_Init ( & hadc1 ) != HAL_OK ) { Error_Handler (); } /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */ sConfig . Channel = ADC_CHANNEL_0 ; sConfig . Rank = 1 ; sConfig . SamplingTime = ADC_SAMPLETIME_3CYCLES ; if ( HAL_ADC_ConfigChannel ( & hadc1 , & sConfig ) != HAL_OK ) { Error_Handler (); } } main.c\u306e\u30b3\u30fc\u30c9\uff08\u629c\u7c8b\uff09 1 2 3 4 5 6 /* Includes ------------------------------------------------------------------*/ #include \"stm32f4xx_hal.h\" /* USER CODE BEGIN Includes */ #include <stdio.h> #include <string.h> main.c\u95a2\u6570\u306e\u30b3\u30fc\u30c9\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8ffd\u52a0\u3057\u307e\u3059\u300212bit\u3067\u3042\u308b\u304b\u30890~4096\u30003.3V\u306e\u6642\u305d\u306e\u6642\u306e\u96fb\u5727\u306e\u5024\u306f4095\u306b\u306a\u308a\u307e\u3059\u30020.6V\u306e\u6642\u306f0\u2103,1.6V\u3067100\u2103\u3068\u306a\u308a\u3001\uff11\u2103\u4e0a\u304c\u308b\u3054\u3068\u306b0.01V\u4e0a\u6607\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FABO Temprature 106\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double temp = ((( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ) - 600.0 ) / 10.0 ; NRF_LOG_INFO ( \" Celsius=\" NRF_LOG_FLOAT_MARKER \" \\r\\n \" , NRF_LOG_FLOAT ( temp )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi Temprature Brick 108 \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/#parts","text":"IC\u6e29\u5ea6\u30bb\u30f3\u30b5 LM61CIZ","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/108_brick_analog_temperature/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/109_brick_analog_ambientlinght/","text":"#109 AmbientLinght Brick Overview Connecting Schematic Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FABO Ambient_Light 109\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; void map ( const int * source , int * result , size_t n , int ( * func )( int )); static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void map ( const int * source , int * result , size_t n , int ( * func )( int )) { unsigned int i ; for ( i = 0 ; i < n ; i ++ ) { result [ i ] = func ( source [ i ]); } } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double voltage = ( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ; NRF_LOG_INFO ( \"Voltage=\" NRF_LOG_FLOAT_MARKER \"mV \\r\\n \" , NRF_LOG_FLOAT ( voltage )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi Distance 116 Brick \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"109 AmbientLinght Brick"},{"location":"7.FaBoBrick(ANA)/109_brick_analog_ambientlinght/#109-ambientlinght-brick","text":"","title":"#109 AmbientLinght Brick"},{"location":"7.FaBoBrick(ANA)/109_brick_analog_ambientlinght/#overview","text":"","title":"Overview"},{"location":"7.FaBoBrick(ANA)/109_brick_analog_ambientlinght/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/109_brick_analog_ambientlinght/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/109_brick_analog_ambientlinght/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FABO Ambient_Light 109\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; void map ( const int * source , int * result , size_t n , int ( * func )( int )); static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void map ( const int * source , int * result , size_t n , int ( * func )( int )) { unsigned int i ; for ( i = 0 ; i < n ; i ++ ) { result [ i ] = func ( source [ i ]); } } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double voltage = ( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ; NRF_LOG_INFO ( \"Voltage=\" NRF_LOG_FLOAT_MARKER \"mV \\r\\n \" , NRF_LOG_FLOAT ( voltage )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi Distance 116 Brick \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/110_brick_analog_tilt/","text":"#110 Tilt Brick Overview \u50be\u659c\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u50be\u659c\u30bb\u30f3\u30b5\u30fc\u306e\u72b6\u614b\u3092\u30c7\u30b8\u30bf\u30eb\u5024(0\u301c1)\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u9ed2\u3044\u90e8\u5206\u306e\u4e2d\u306b\u7389\u304c\u5165\u3063\u3066\u3044\u3066\u50be\u304f\u3068\u30c7\u30b8\u30bf\u30eb\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 LED Brick\u3092\u70b9\u706f/\u6d88\u706f\u3055\u305b\u308b\u969b\u306a\u3069\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 Connecting Schematic Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 110 TILT\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( BSP_LED_0 ); nrf_gpio_pin_clear ( BSP_LED_0 ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); gpio_init (); while ( true ) { uint32_t TILT_PIN = 0 ; TILT_PIN = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( TILT_PIN == 1 ) { nrf_gpio_pin_set ( BSP_LED_0 ); NRF_LOG_INFO ( \"Detect Slope. \\r\\n \" ); NRF_LOG_FLUSH (); } else { nrf_gpio_pin_clear ( BSP_LED_0 ); } } } \u69cb\u6210Parts \u50be\u659c(\u632f\u52d5)\u30b9\u30a4\u30c3\u30c1 GitHub","title":"110 Tilt Brick"},{"location":"7.FaBoBrick(ANA)/110_brick_analog_tilt/#110-tilt-brick","text":"","title":"#110 Tilt Brick"},{"location":"7.FaBoBrick(ANA)/110_brick_analog_tilt/#overview","text":"\u50be\u659c\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u50be\u659c\u30bb\u30f3\u30b5\u30fc\u306e\u72b6\u614b\u3092\u30c7\u30b8\u30bf\u30eb\u5024(0\u301c1)\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u9ed2\u3044\u90e8\u5206\u306e\u4e2d\u306b\u7389\u304c\u5165\u3063\u3066\u3044\u3066\u50be\u304f\u3068\u30c7\u30b8\u30bf\u30eb\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 LED Brick\u3092\u70b9\u706f/\u6d88\u706f\u3055\u305b\u308b\u969b\u306a\u3069\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/110_brick_analog_tilt/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/110_brick_analog_tilt/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/110_brick_analog_tilt/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 110 TILT\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( BSP_LED_0 ); nrf_gpio_pin_clear ( BSP_LED_0 ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); gpio_init (); while ( true ) { uint32_t TILT_PIN = 0 ; TILT_PIN = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( TILT_PIN == 1 ) { nrf_gpio_pin_set ( BSP_LED_0 ); NRF_LOG_INFO ( \"Detect Slope. \\r\\n \" ); NRF_LOG_FLUSH (); } else { nrf_gpio_pin_clear ( BSP_LED_0 ); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/110_brick_analog_tilt/#parts","text":"\u50be\u659c(\u632f\u52d5)\u30b9\u30a4\u30c3\u30c1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/110_brick_analog_tilt/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/112_brick_analog_ir_led/","text":"#121 IR_LED Brick Overview Connecting Schematic Sample Shinobi_NRF\u306e\u30dc\u30bf\u30f3\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u3001\u8d64\u5916\u7ddaLED\u304c\u767a\u5149\u3055\u308c\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 121 IR_LED\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 16 #define FaBo_Shinobi_BUTTONPIN 3 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLUP , NRF_GPIO_PIN_SENSE_LOW ); nrf_gpio_cfg_output ( FaBo_Shinobi_BUTTONPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_BUTTONPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"FaBo_Shinobi_IR_LED SAMPLE. \\r\\n \" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_clear ( FaBo_Shinobi_BUTTONPIN ); } else { nrf_gpio_pin_set ( FaBo_Shinobi_BUTTONPIN ); NRF_LOG_INFO ( \"Button pressed Emission.: %d \\r\\n \" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } } } \u69cb\u6210Parts","title":"121 IR_LED Brick"},{"location":"7.FaBoBrick(ANA)/112_brick_analog_ir_led/#121-ir_led-brick","text":"","title":"#121 IR_LED Brick"},{"location":"7.FaBoBrick(ANA)/112_brick_analog_ir_led/#overview","text":"","title":"Overview"},{"location":"7.FaBoBrick(ANA)/112_brick_analog_ir_led/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/112_brick_analog_ir_led/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/112_brick_analog_ir_led/#sample","text":"Shinobi_NRF\u306e\u30dc\u30bf\u30f3\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u3001\u8d64\u5916\u7ddaLED\u304c\u767a\u5149\u3055\u308c\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 121 IR_LED\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 16 #define FaBo_Shinobi_BUTTONPIN 3 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLUP , NRF_GPIO_PIN_SENSE_LOW ); nrf_gpio_cfg_output ( FaBo_Shinobi_BUTTONPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_BUTTONPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"FaBo_Shinobi_IR_LED SAMPLE. \\r\\n \" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_clear ( FaBo_Shinobi_BUTTONPIN ); } else { nrf_gpio_pin_set ( FaBo_Shinobi_BUTTONPIN ); NRF_LOG_INFO ( \"Button pressed Emission.: %d \\r\\n \" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } } }","title":"Sample"},{"location":"7.FaBoBrick(ANA)/112_brick_analog_ir_led/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/113_brick_analog_IR_receiver/","text":"#113 IR_RECEVER Brick Overview Connecting Schematic Sample \u8d64\u5916\u7dda\u3092\u53d7\u5149\u3059\u308b\u3053\u3068\u3067\u3001Shinobi_NRF\u306eLED\u304c\u767a\u5149\u3057\u307e\u3059\u3002 112 IR_LED\u3092\u4f7f\u7528\u3057\u30012\u53f0\u306eShinobi_NRF\u3067\u7c21\u5358\u306b\u52d5\u4f5c\u78ba\u8a8d\u304c\u3067\u304d\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 113 IR_RECEIVER Brick\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"FaBo_Shinobi_IR_RECEVIER SAMPLE. \\r\\n \" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"IR_Received!: %d \\r\\n \" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } } \u52d5\u4f5c\u78ba\u8a8d Fabo IR_LED\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"113 IR_RECEVER Brick"},{"location":"7.FaBoBrick(ANA)/113_brick_analog_IR_receiver/#113-ir_recever-brick","text":"","title":"#113 IR_RECEVER Brick"},{"location":"7.FaBoBrick(ANA)/113_brick_analog_IR_receiver/#overview","text":"","title":"Overview"},{"location":"7.FaBoBrick(ANA)/113_brick_analog_IR_receiver/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/113_brick_analog_IR_receiver/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/113_brick_analog_IR_receiver/#sample","text":"\u8d64\u5916\u7dda\u3092\u53d7\u5149\u3059\u308b\u3053\u3068\u3067\u3001Shinobi_NRF\u306eLED\u304c\u767a\u5149\u3057\u307e\u3059\u3002 112 IR_LED\u3092\u4f7f\u7528\u3057\u30012\u53f0\u306eShinobi_NRF\u3067\u7c21\u5358\u306b\u52d5\u4f5c\u78ba\u8a8d\u304c\u3067\u304d\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 113 IR_RECEIVER Brick\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"FaBo_Shinobi_IR_RECEVIER SAMPLE. \\r\\n \" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"IR_Received!: %d \\r\\n \" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } }","title":"Sample"},{"location":"7.FaBoBrick(ANA)/113_brick_analog_IR_receiver/#_1","text":"Fabo IR_LED\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"\u52d5\u4f5c\u78ba\u8a8d"},{"location":"7.FaBoBrick(ANA)/116_brick_analog_distance/","text":"#116 Distance Brick Overview \u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u306e\u6b63\u9762\u306b\u3064\u3044\u3066\u3044\u308b\u30ec\u30f3\u30ba\u304b\u3089\u7269\u4f53\u307e\u3067\u306e\u8ddd\u96e2\u3092\u30a2\u30ca\u30ed\u30b0\u5024(0\u301c1023)\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6e2c\u5b9a\u53ef\u80fd\u306a\u8ddd\u96e2\u306f10\u301c80cm\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 Connecting GP2Y0A21YK Datasheet Document GP2Y0A21YK Datasheet Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FABO Distance 116\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; void map ( const int * source , int * result , size_t n , int ( * func )( int )); static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void map ( const int * source , int * result , size_t n , int ( * func )( int )) { unsigned int i ; for ( i = 0 ; i < n ; i ++ ) { result [ i ] = func ( source [ i ]); } } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double voltage = ( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ; double distance = 80 - (( 70.0 / 2700.0 ) * voltage ); NRF_LOG_INFO ( \"DISTANCE=\" NRF_LOG_FLOAT_MARKER \"cm \\r\\n \" , NRF_LOG_FLOAT ( distance )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi Distance 116 Brick \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } TeraTerm\u3092\u8d77\u52d5\u3057\u78ba\u8a8d\u3057\u307e\u3059\u3002\u30ea\u30bb\u30c3\u30c8\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u8d77\u52d5\u3057\u307e\u3059\u3002 \u69cb\u6210Parts \u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb GP2Y0A21YK GitHub","title":"116 Distance Brick"},{"location":"7.FaBoBrick(ANA)/116_brick_analog_distance/#116-distance-brick","text":"","title":"#116 Distance Brick"},{"location":"7.FaBoBrick(ANA)/116_brick_analog_distance/#overview","text":"\u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u306e\u6b63\u9762\u306b\u3064\u3044\u3066\u3044\u308b\u30ec\u30f3\u30ba\u304b\u3089\u7269\u4f53\u307e\u3067\u306e\u8ddd\u96e2\u3092\u30a2\u30ca\u30ed\u30b0\u5024(0\u301c1023)\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6e2c\u5b9a\u53ef\u80fd\u306a\u8ddd\u96e2\u306f10\u301c80cm\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/116_brick_analog_distance/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/116_brick_analog_distance/#gp2y0a21yk-datasheet","text":"Document GP2Y0A21YK Datasheet","title":"GP2Y0A21YK Datasheet"},{"location":"7.FaBoBrick(ANA)/116_brick_analog_distance/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FABO Distance 116\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; void map ( const int * source , int * result , size_t n , int ( * func )( int )); static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void map ( const int * source , int * result , size_t n , int ( * func )( int )) { unsigned int i ; for ( i = 0 ; i < n ; i ++ ) { result [ i ] = func ( source [ i ]); } } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d \\r\\n \" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double voltage = ( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ; double distance = 80 - (( 70.0 / 2700.0 ) * voltage ); NRF_LOG_INFO ( \"DISTANCE=\" NRF_LOG_FLOAT_MARKER \"cm \\r\\n \" , NRF_LOG_FLOAT ( distance )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi Distance 116 Brick \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } TeraTerm\u3092\u8d77\u52d5\u3057\u78ba\u8a8d\u3057\u307e\u3059\u3002\u30ea\u30bb\u30c3\u30c8\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u8d77\u52d5\u3057\u307e\u3059\u3002","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/116_brick_analog_distance/#parts","text":"\u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb GP2Y0A21YK","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/116_brick_analog_distance/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/117_brick_analog_slideswitch/","text":"#117 Switch Brick Overview \u30b9\u30e9\u30a4\u30c9\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u30b9\u30e9\u30a4\u30c9\u30b9\u30a4\u30c3\u30c1\u306eON/OFF\u3092\u30c7\u30b8\u30bf\u30eb\u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 Connecting Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 117 Switch Brick\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"FaBo_Shinobi_Swich 117 SAMPLE. \\r\\n \" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"OFF \\r\\n \" ); NRF_LOG_FLUSH (); } else { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"ON \\r\\n \" ); NRF_LOG_FLUSH (); } } } \u69cb\u6210Parts \u30b9\u30e9\u30a4\u30c9\u30b9\u30a4\u30c3\u30c1 GitHub","title":"117 Switch Brick"},{"location":"7.FaBoBrick(ANA)/117_brick_analog_slideswitch/#117-switch-brick","text":"","title":"#117 Switch Brick"},{"location":"7.FaBoBrick(ANA)/117_brick_analog_slideswitch/#overview","text":"\u30b9\u30e9\u30a4\u30c9\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u30b9\u30e9\u30a4\u30c9\u30b9\u30a4\u30c3\u30c1\u306eON/OFF\u3092\u30c7\u30b8\u30bf\u30eb\u5024\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/117_brick_analog_slideswitch/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/117_brick_analog_slideswitch/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 117 Switch Brick\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"FaBo_Shinobi_Swich 117 SAMPLE. \\r\\n \" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"OFF \\r\\n \" ); NRF_LOG_FLUSH (); } else { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"ON \\r\\n \" ); NRF_LOG_FLUSH (); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/117_brick_analog_slideswitch/#parts","text":"\u30b9\u30e9\u30a4\u30c9\u30b9\u30a4\u30c3\u30c1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/117_brick_analog_slideswitch/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/118_brick_analog_hall /","text":"#118 Hall Brick Overview Connecting Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 118 HALL Brick\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"FaBo_Shinobi_HALL SAMPLE. \\r\\n \" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } else { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"Magnetic detection! \\r\\n \" ); NRF_LOG_FLUSH (); } } } \u69cb\u6210Parts GitHub","title":"118 Hall Brick"},{"location":"7.FaBoBrick(ANA)/118_brick_analog_hall /#118-hall-brick","text":"","title":"#118 Hall Brick"},{"location":"7.FaBoBrick(ANA)/118_brick_analog_hall /#overview","text":"","title":"Overview"},{"location":"7.FaBoBrick(ANA)/118_brick_analog_hall /#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/118_brick_analog_hall /#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO 118 HALL Brick\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"FaBo_Shinobi_HALL SAMPLE. \\r\\n \" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } else { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"Magnetic detection! \\r\\n \" ); NRF_LOG_FLUSH (); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/118_brick_analog_hall /#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/118_brick_analog_hall /#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/119_brick_analog_relector/","text":"#119 Reflector Brick Overview Connecting Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FaBo Reflector 119\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 1 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); double voltage = (( p_event -> data . done . p_buffer [ 0 ] / 1024.0 ) * 3300.0 ); NRF_LOG_INFO ( \"Voltage:\" NRF_LOG_FLOAT_MARKER \"mV \\r\\n \" , NRF_LOG_FLOAT ( voltage )); } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi reflector Brick 119 \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts GitHub","title":"119 Reflector Brick"},{"location":"7.FaBoBrick(ANA)/119_brick_analog_relector/#119-reflector-brick","text":"","title":"#119 Reflector Brick"},{"location":"7.FaBoBrick(ANA)/119_brick_analog_relector/#overview","text":"","title":"Overview"},{"location":"7.FaBoBrick(ANA)/119_brick_analog_relector/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/119_brick_analog_relector/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME \"FaBo Reflector 119\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define SAMPLES_IN_BUFFER 1 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); double voltage = (( p_event -> data . done . p_buffer [ 0 ] / 1024.0 ) * 3300.0 ); NRF_LOG_INFO ( \"Voltage:\" NRF_LOG_FLOAT_MARKER \"mV \\r\\n \" , NRF_LOG_FLOAT ( voltage )); } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_power_init ( NULL ); APP_ERROR_CHECK ( err_code ); ret_code_t ret_code = nrf_pwr_mgmt_init ( 0 ); APP_ERROR_CHECK ( ret_code ); NRF_LOG_INFO ( \"Fabo Shinobi reflector Brick 119 \\r\\n \" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/119_brick_analog_relector/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/119_brick_analog_relector/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/120_brick_analog_button/","text":"#120 Button Brick Overview \u30dc\u30bf\u30f3\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002I/O\u30d4\u30f3\u3088\u308a\u30dc\u30bf\u30f3\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u203b\u30dc\u30bf\u30f3\u30ab\u30d0\u30fc\u90e8\u5206\u306e\u8272\u306f\u30e9\u30f3\u30c0\u30e0\u3067\u9001\u4ed8\u3059\u308b\u305f\u3081\u8272\u306e\u3054\u6307\u5b9a\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3042\u3089\u304b\u3058\u3081\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002 Connecting Schematic Sample Code \u30a6\u30a9\u30c3\u30c1\u30bf\u30a4\u30de\u30fc\u306e\u30b5\u30f3\u30d7\u30eb\u3002 LED\u304c\u70b9\u706f\u5f8c\uff12\u79d2\u7d4c\u904e\u524d\u306b\u62bc\u3055\u306a\u3044\u3068\u30ea\u30bb\u30c3\u30c8\u304c\u304b\u304b\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"app_timer.h\" #include \"app_error.h\" #include \"nrf_drv_wdt.h\" #include \"nrf_drv_clock.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO ANGLE\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define APP_TIMER_PRESCALER 0 #define APP_TIMER_OP_QUEUE_SIZE 2 #define FEED_BUTTON_ID 0 nrf_drv_wdt_channel_id m_channel_id ; void wdt_event_handler ( void ) { bsp_board_leds_off (); //NOTE: The max amount of time we can spend in WDT interrupt is two cycles of 32768[Hz] clock - after that, reset occurs } void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { bsp_board_leds_off (); while ( 1 ); } /** * @brief BSP events callback. */ void bsp_event_callback ( bsp_event_t event ) { switch ( event ) { case BSP_EVENT_KEY_0 : nrf_drv_wdt_channel_feed ( m_channel_id ); NRF_LOG_INFO ( \"Button PUSH! \\r\\n \" ); break ; default : //Do nothing. break ; } } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"Fabo Shinobi Sample BUTTON 120 \\r\\n \" ); //BSP configuration for button support: button pushing will feed the dog. err_code = nrf_drv_clock_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_clock_lfclk_request ( NULL ); APP_TIMER_INIT ( APP_TIMER_PRESCALER , APP_TIMER_OP_QUEUE_SIZE , false ); err_code = bsp_init ( BSP_INIT_BUTTONS , APP_TIMER_TICKS ( 100 , APP_TIMER_PRESCALER ), bsp_event_callback ); APP_ERROR_CHECK ( err_code ); //Configure all LEDs on board. bsp_board_leds_init (); //Configure WDT. nrf_drv_wdt_config_t config = NRF_DRV_WDT_DEAFULT_CONFIG ; err_code = nrf_drv_wdt_init ( & config , wdt_event_handler ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_wdt_channel_alloc ( & m_channel_id ); APP_ERROR_CHECK ( err_code ); nrf_drv_wdt_enable (); //Indicate program start on LEDs. for ( uint32_t i = 0 ; i < LEDS_NUMBER ; i ++ ) { nrf_delay_ms ( 200 ); bsp_board_led_on ( i ); } err_code = bsp_buttons_enable (); APP_ERROR_CHECK ( err_code ); while ( 1 ) { __SEV (); __WFE (); __WFE (); NRF_LOG_FLUSH (); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 #include \"boards.h\" #include \"app_uart.h\" #include \"bsp.h\" #include \"app_timer.h\" #include \"nrf_drv_clock.h\" //UART\u306e\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9 #define UART_TX_BUF_SIZE 256 #define UART_RX_BUF_SIZE 1 #define APP_TIMER_PRESCALER 0 #define APP_TIMER_OP_QUEUE_SIZE 2 #define PinNumberA0 3 const uint8_t led_pin = PinNumberA0 ; //LED\u3092\u70b9\u706f static void TurnON ( void ) { printf ( \"TurnON \\r\\n \" ); NRF_GPIO -> OUTCLR = ( 1 << led_pin ) & (( 1 << led_pin ) & led_pin ); NRF_GPIO -> OUTSET = ( 1 << led_pin ) & (( 1 << led_pin ) & ~ led_pin ); } //LED\u3092\u6d88\u706f static void TurnOFF ( void ) { printf ( \"TurnOFF \\r\\n \" ); NRF_GPIO -> OUTSET = ( 1 << led_pin ) & (( 1 << led_pin ) & led_pin ); NRF_GPIO -> OUTCLR = ( 1 << led_pin ) & (( 1 << led_pin ) & ~ led_pin ); } //\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u5834\u5408\u306e\u30cf\u30f3\u30c9\u30e9\u30fc static void bsp_evt_handler ( bsp_event_t evt ) { void ( * const SwichState [])( void ) = { TurnON , TurnOFF }; uint8_t const SwichState_index_max = ( sizeof ( SwichState ) / sizeof ( SwichState [ 0 ])) - 1 ; static uint8_t SwichState_index = 0 ; static uint32_t count = 0 ; printf ( \" \\n\\r counter=%d \\n\\r \" , count ); count ++ ; switch ( evt ) { case BSP_EVENT_KEY_0 : if ( SwichState_index > 0 ) { -- SwichState_index ; printf ( \"KeyEvent=BSP_EVENT_KEY_0 \\n\\r \" ); LEDS_ON ( LEDS_MASK ); } else { printf ( \"KeyEvent=BSP_EVENT_KEY_0 \\n\\r \" ); SwichState_index = SwichState_index_max ; } break ; case BSP_EVENT_KEY_1 : if ( SwichState_index < SwichState_index_max ) { ++ SwichState_index ; printf ( \"KeyEvent=BSP_EVENT_KEY_1 \\n\\r \" ); } else { printf ( \"KeyEvent=BSP_EVENT_KEY_1 \\n\\r \" ); SwichState_index = 0 ; } break ; case BSP_EVENT_KEY_2 : printf ( \"KeyEvent=BSP_EVENT_KEY_2 \\n\\r \" ); break ; case BSP_EVENT_KEY_3 : printf ( \"KeyEvent=BSP_EVENT_KEY_3 \\n\\r \" ); break ; default : return ; } SwichState [ SwichState_index ](); } static void init_bsp () { uint32_t err_code ; err_code = nrf_drv_clock_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_clock_lfclk_request ( NULL ); APP_TIMER_INIT ( APP_TIMER_PRESCALER , APP_TIMER_OP_QUEUE_SIZE , false ); err_code = bsp_init ( BSP_INIT_BUTTONS , APP_TIMER_TICKS ( 100 , APP_TIMER_PRESCALER ), bsp_evt_handler ); APP_ERROR_CHECK ( err_code ); err_code = bsp_buttons_enable (); APP_ERROR_CHECK ( err_code ); } static void uart_event_handler ( app_uart_evt_t * p_event ) { // This function is required by APP_UART_FIFO_INIT, but we don't need to // handle any events here. } static void init_uart ( void ) { uint32_t err_code ; //\u30dc\u30fc\u30ec\u30fc\u30c8\u306f38400bps\u3000\u30d5\u30ed\u30fc\u5236\u5fa1\u306a\u3057\u3002 app_uart_comm_params_t const comm_params = { . rx_pin_no = RX_PIN_NUMBER , . tx_pin_no = TX_PIN_NUMBER , . rts_pin_no = RTS_PIN_NUMBER , . cts_pin_no = CTS_PIN_NUMBER , . flow_control = APP_UART_FLOW_CONTROL_DISABLED , . use_parity = false , . baud_rate = UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_event_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { LEDS_CONFIGURE ( 1 << PinNumberA0 ); init_bsp (); init_uart (); printf ( \" \\r\\n Fabo#120Button Example.\" ); for (;;) { //\u30a4\u30d9\u30f3\u30c8\u3092\u5f85\u6a5f\u3059\u308b __WFE (); //\u30ec\u30b8\u30b9\u30bf\u306e\u30af\u30ea\u30a2 __SEV (); __WFE (); } } \u30ea\u30bb\u30c3\u30c8\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u30bd\u30d5\u30c8\u3067\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u69cb\u6210Parts 12mm\u89d2\u30bf\u30af\u30c8\u30b9\u30a4\u30c3\u30c1 GitHub https://github.com/FaBoPlatform/FaBo/tree/master/103_button","title":"120 Button Brick"},{"location":"7.FaBoBrick(ANA)/120_brick_analog_button/#120-button-brick","text":"","title":"#120 Button Brick"},{"location":"7.FaBoBrick(ANA)/120_brick_analog_button/#overview","text":"\u30dc\u30bf\u30f3\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002I/O\u30d4\u30f3\u3088\u308a\u30dc\u30bf\u30f3\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u203b\u30dc\u30bf\u30f3\u30ab\u30d0\u30fc\u90e8\u5206\u306e\u8272\u306f\u30e9\u30f3\u30c0\u30e0\u3067\u9001\u4ed8\u3059\u308b\u305f\u3081\u8272\u306e\u3054\u6307\u5b9a\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3042\u3089\u304b\u3058\u3081\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/120_brick_analog_button/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/120_brick_analog_button/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/120_brick_analog_button/#sample-code","text":"\u30a6\u30a9\u30c3\u30c1\u30bf\u30a4\u30de\u30fc\u306e\u30b5\u30f3\u30d7\u30eb\u3002 LED\u304c\u70b9\u706f\u5f8c\uff12\u79d2\u7d4c\u904e\u524d\u306b\u62bc\u3055\u306a\u3044\u3068\u30ea\u30bb\u30c3\u30c8\u304c\u304b\u304b\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"app_timer.h\" #include \"app_error.h\" #include \"nrf_drv_wdt.h\" #include \"nrf_drv_clock.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME \"FABO ANGLE\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define APP_TIMER_PRESCALER 0 #define APP_TIMER_OP_QUEUE_SIZE 2 #define FEED_BUTTON_ID 0 nrf_drv_wdt_channel_id m_channel_id ; void wdt_event_handler ( void ) { bsp_board_leds_off (); //NOTE: The max amount of time we can spend in WDT interrupt is two cycles of 32768[Hz] clock - after that, reset occurs } void app_error_fault_handler ( uint32_t id , uint32_t pc , uint32_t info ) { bsp_board_leds_off (); while ( 1 ); } /** * @brief BSP events callback. */ void bsp_event_callback ( bsp_event_t event ) { switch ( event ) { case BSP_EVENT_KEY_0 : nrf_drv_wdt_channel_feed ( m_channel_id ); NRF_LOG_INFO ( \"Button PUSH! \\r\\n \" ); break ; default : //Do nothing. break ; } } int main ( void ) { uint32_t err_code = NRF_LOG_INIT ( NULL ); APP_ERROR_CHECK ( err_code ); NRF_LOG_INFO ( \"Fabo Shinobi Sample BUTTON 120 \\r\\n \" ); //BSP configuration for button support: button pushing will feed the dog. err_code = nrf_drv_clock_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_clock_lfclk_request ( NULL ); APP_TIMER_INIT ( APP_TIMER_PRESCALER , APP_TIMER_OP_QUEUE_SIZE , false ); err_code = bsp_init ( BSP_INIT_BUTTONS , APP_TIMER_TICKS ( 100 , APP_TIMER_PRESCALER ), bsp_event_callback ); APP_ERROR_CHECK ( err_code ); //Configure all LEDs on board. bsp_board_leds_init (); //Configure WDT. nrf_drv_wdt_config_t config = NRF_DRV_WDT_DEAFULT_CONFIG ; err_code = nrf_drv_wdt_init ( & config , wdt_event_handler ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_wdt_channel_alloc ( & m_channel_id ); APP_ERROR_CHECK ( err_code ); nrf_drv_wdt_enable (); //Indicate program start on LEDs. for ( uint32_t i = 0 ; i < LEDS_NUMBER ; i ++ ) { nrf_delay_ms ( 200 ); bsp_board_led_on ( i ); } err_code = bsp_buttons_enable (); APP_ERROR_CHECK ( err_code ); while ( 1 ) { __SEV (); __WFE (); __WFE (); NRF_LOG_FLUSH (); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 #include \"boards.h\" #include \"app_uart.h\" #include \"bsp.h\" #include \"app_timer.h\" #include \"nrf_drv_clock.h\" //UART\u306e\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9 #define UART_TX_BUF_SIZE 256 #define UART_RX_BUF_SIZE 1 #define APP_TIMER_PRESCALER 0 #define APP_TIMER_OP_QUEUE_SIZE 2 #define PinNumberA0 3 const uint8_t led_pin = PinNumberA0 ; //LED\u3092\u70b9\u706f static void TurnON ( void ) { printf ( \"TurnON \\r\\n \" ); NRF_GPIO -> OUTCLR = ( 1 << led_pin ) & (( 1 << led_pin ) & led_pin ); NRF_GPIO -> OUTSET = ( 1 << led_pin ) & (( 1 << led_pin ) & ~ led_pin ); } //LED\u3092\u6d88\u706f static void TurnOFF ( void ) { printf ( \"TurnOFF \\r\\n \" ); NRF_GPIO -> OUTSET = ( 1 << led_pin ) & (( 1 << led_pin ) & led_pin ); NRF_GPIO -> OUTCLR = ( 1 << led_pin ) & (( 1 << led_pin ) & ~ led_pin ); } //\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u5834\u5408\u306e\u30cf\u30f3\u30c9\u30e9\u30fc static void bsp_evt_handler ( bsp_event_t evt ) { void ( * const SwichState [])( void ) = { TurnON , TurnOFF }; uint8_t const SwichState_index_max = ( sizeof ( SwichState ) / sizeof ( SwichState [ 0 ])) - 1 ; static uint8_t SwichState_index = 0 ; static uint32_t count = 0 ; printf ( \" \\n\\r counter=%d \\n\\r \" , count ); count ++ ; switch ( evt ) { case BSP_EVENT_KEY_0 : if ( SwichState_index > 0 ) { -- SwichState_index ; printf ( \"KeyEvent=BSP_EVENT_KEY_0 \\n\\r \" ); LEDS_ON ( LEDS_MASK ); } else { printf ( \"KeyEvent=BSP_EVENT_KEY_0 \\n\\r \" ); SwichState_index = SwichState_index_max ; } break ; case BSP_EVENT_KEY_1 : if ( SwichState_index < SwichState_index_max ) { ++ SwichState_index ; printf ( \"KeyEvent=BSP_EVENT_KEY_1 \\n\\r \" ); } else { printf ( \"KeyEvent=BSP_EVENT_KEY_1 \\n\\r \" ); SwichState_index = 0 ; } break ; case BSP_EVENT_KEY_2 : printf ( \"KeyEvent=BSP_EVENT_KEY_2 \\n\\r \" ); break ; case BSP_EVENT_KEY_3 : printf ( \"KeyEvent=BSP_EVENT_KEY_3 \\n\\r \" ); break ; default : return ; } SwichState [ SwichState_index ](); } static void init_bsp () { uint32_t err_code ; err_code = nrf_drv_clock_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_clock_lfclk_request ( NULL ); APP_TIMER_INIT ( APP_TIMER_PRESCALER , APP_TIMER_OP_QUEUE_SIZE , false ); err_code = bsp_init ( BSP_INIT_BUTTONS , APP_TIMER_TICKS ( 100 , APP_TIMER_PRESCALER ), bsp_evt_handler ); APP_ERROR_CHECK ( err_code ); err_code = bsp_buttons_enable (); APP_ERROR_CHECK ( err_code ); } static void uart_event_handler ( app_uart_evt_t * p_event ) { // This function is required by APP_UART_FIFO_INIT, but we don't need to // handle any events here. } static void init_uart ( void ) { uint32_t err_code ; //\u30dc\u30fc\u30ec\u30fc\u30c8\u306f38400bps\u3000\u30d5\u30ed\u30fc\u5236\u5fa1\u306a\u3057\u3002 app_uart_comm_params_t const comm_params = { . rx_pin_no = RX_PIN_NUMBER , . tx_pin_no = TX_PIN_NUMBER , . rts_pin_no = RTS_PIN_NUMBER , . cts_pin_no = CTS_PIN_NUMBER , . flow_control = APP_UART_FLOW_CONTROL_DISABLED , . use_parity = false , . baud_rate = UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_event_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { LEDS_CONFIGURE ( 1 << PinNumberA0 ); init_bsp (); init_uart (); printf ( \" \\r\\n Fabo#120Button Example.\" ); for (;;) { //\u30a4\u30d9\u30f3\u30c8\u3092\u5f85\u6a5f\u3059\u308b __WFE (); //\u30ec\u30b8\u30b9\u30bf\u306e\u30af\u30ea\u30a2 __SEV (); __WFE (); } } \u30ea\u30bb\u30c3\u30c8\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u30bd\u30d5\u30c8\u3067\u78ba\u8a8d\u3057\u307e\u3059\u3002","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/120_brick_analog_button/#parts","text":"12mm\u89d2\u30bf\u30af\u30c8\u30b9\u30a4\u30c3\u30c1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/120_brick_analog_button/#github","text":"https://github.com/FaBoPlatform/FaBo/tree/master/103_button","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/","text":"#101 LED Brick Overview LED\u306eBrick\u3067\u3059\u3002\u767a\u5149\u8272\u306f5\u8272\uff08\u9752\u30fb\u7dd1\u30fb\u8d64\u30fb\u767d\u30fb\u9ec4\uff09\u3042\u308a\u307e\u3059\u3002L\u30c1\u30ab\u306e\u304a\u3068\u3082\u306b\u3082\u3069\u3046\u305e\u3002 Connecting \u63a5\u7d9a\u4f8b\uff1aJ-Linke Lite\u3092Shinobi_NRF\u3001USB\u96fb\u6e90\u3092ShinobiBatterry,Fabo1010\u3092Shinobi\u30a2\u30ca\u30ed\u30b0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 Schematic Fabo 101 LED\u306e\u56de\u8def\u56f3 Shinobi NRF\u306e\u56de\u8def\u56f3 Sample Code Arduino Motor Shield\u306eA0\u30b3\u30cd\u30af\u30bf\u306bLED Brick\u3092\u63a5\u7d9a\u3057\u3001\u4e00\u5b9a\u6642\u9593(1\u79d2=1000ms)\u3054\u3068\u306b\u70b9\u706f/\u6d88\u706f\uff08L\u30c1\u30ab\uff09\u3055\u305b\u3066\u3044\u307e\u3059\u3002 \uff11\uff0eSES\u3092\u8d77\u52d5 2. \u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092Include\u3059\u308b SDK\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u53c2\u7167\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306f\u5b58\u5728\u3059\u308b\u3002 \u30d5\u30a1\u30a4\u30eb\u540d \u53c2\u7167\u5148\u30d1\u30b9 Board Definition/board.c nRF5_SDK_14.2.0_17b948a/components/boards/boards.c Device/ses_nRF_Startup.s nRF5_SDK_14.2.0_17b948a/components/toolchain/ses/ses_nRF_Startup.s Device/ses_nrf52_Vectors.s nRF5_SDK_14.2.0_17b948a/components/toolchain/ses/ses_nrf52_Vectors.s Device/system_nrf52.s nRF5_SDK_14.2.0_17b948a/components/toolchain/system_nrf52.c nRF_Libraries/app_error_weak.c nRF5_SDK_14.2.0_17b948a/components/libraries/util/app_error_weak.c nRF_Libraries/app_error.c nRF5_SDK_14.2.0_17b948a/components/libraries/util/app_error.c nRF_Libraries/app_util_platform.c nRF5_SDK_14.2.0_17b948a/components/libraries/util/app_util_platform.c nRF_Libraries/nrf_assert.c nRF5_SDK_14.2.0_17b948a/components/libraries/util/nrf_assert.c nRF_Libraries/nrf_strerror.c nRF5_SDK_14.2.0_17b948a/components/libraries/strerror/nrf_strerror.c Segger Startup Files/thumb_crt0.s /Applications/SEGGER Embedded Studio for ARM 4.10/source/thumb_crt0.s 3 sdk_config.h \u3092\u7528\u610f nRF5_SDK_14.2.0_17b948a/examples/peripheral/blinky/pca10040/s132/ses \u3042\u305f\u308a\u304b\u3089\u3001sdk_config.h\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u308b\u3002 main.c\u306e\u4f5c\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"nrf_delay.h\" #include \"nrf_gpio.h\" const uint8_t led_pin = 3 ; /*P0.03\u4f7f\u7528\u3000const\u3067\u4fee\u98fe\u3059\u308b\u5834\u5408\u306f\u5b9a\u6570\u306fROM\u306b\u683c\u7d0d\u3055\u308cRAM\u9818\u57df\u306e\u7bc0\u7d04\u306b\u306a\u308b*/ int main ( void ) { nrf_gpio_cfg_output ( led_pin ); /*\u30dd\u30fc\u30c8\u3092\u51fa\u529b\u306b\u8a2d\u5b9a*/ while ( true ) { uint32_t gpio_state = NRF_GPIO -> OUT ; /*\u30dd\u30fc\u30c8\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u3092\u53d6\u5f97*/ NRF_GPIO -> OUTSET = (( 1 << led_pin ) & ~ gpio_state ); NRF_GPIO -> OUTCLR = (( 1 << led_pin ) & gpio_state ); nrf_delay_ms ( 1000 ); /*\uff11\u79d2\u7121\u3057\u3082\u3057\u306a\u3044*/ } } Document NRF52 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 http://infocenter.nordicsemi.com/pdf/nRF52832_PS_v1.4.pdf \u69cb\u6210\u30d1\u30fc\u30c4Parts 5mm LED(\u5404\u8272)","title":"101 LED Brick"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#101-led-brick","text":"","title":"#101 LED Brick"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#overview","text":"LED\u306eBrick\u3067\u3059\u3002\u767a\u5149\u8272\u306f5\u8272\uff08\u9752\u30fb\u7dd1\u30fb\u8d64\u30fb\u767d\u30fb\u9ec4\uff09\u3042\u308a\u307e\u3059\u3002L\u30c1\u30ab\u306e\u304a\u3068\u3082\u306b\u3082\u3069\u3046\u305e\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#connecting","text":"\u63a5\u7d9a\u4f8b\uff1aJ-Linke Lite\u3092Shinobi_NRF\u3001USB\u96fb\u6e90\u3092ShinobiBatterry,Fabo1010\u3092Shinobi\u30a2\u30ca\u30ed\u30b0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#schematic","text":"Fabo 101 LED\u306e\u56de\u8def\u56f3 Shinobi NRF\u306e\u56de\u8def\u56f3","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#sample-code","text":"Arduino Motor Shield\u306eA0\u30b3\u30cd\u30af\u30bf\u306bLED Brick\u3092\u63a5\u7d9a\u3057\u3001\u4e00\u5b9a\u6642\u9593(1\u79d2=1000ms)\u3054\u3068\u306b\u70b9\u706f/\u6d88\u706f\uff08L\u30c1\u30ab\uff09\u3055\u305b\u3066\u3044\u307e\u3059\u3002","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#1ses","text":"","title":"\uff11\uff0eSES\u3092\u8d77\u52d5"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#2-include","text":"SDK\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u53c2\u7167\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306f\u5b58\u5728\u3059\u308b\u3002 \u30d5\u30a1\u30a4\u30eb\u540d \u53c2\u7167\u5148\u30d1\u30b9 Board Definition/board.c nRF5_SDK_14.2.0_17b948a/components/boards/boards.c Device/ses_nRF_Startup.s nRF5_SDK_14.2.0_17b948a/components/toolchain/ses/ses_nRF_Startup.s Device/ses_nrf52_Vectors.s nRF5_SDK_14.2.0_17b948a/components/toolchain/ses/ses_nrf52_Vectors.s Device/system_nrf52.s nRF5_SDK_14.2.0_17b948a/components/toolchain/system_nrf52.c nRF_Libraries/app_error_weak.c nRF5_SDK_14.2.0_17b948a/components/libraries/util/app_error_weak.c nRF_Libraries/app_error.c nRF5_SDK_14.2.0_17b948a/components/libraries/util/app_error.c nRF_Libraries/app_util_platform.c nRF5_SDK_14.2.0_17b948a/components/libraries/util/app_util_platform.c nRF_Libraries/nrf_assert.c nRF5_SDK_14.2.0_17b948a/components/libraries/util/nrf_assert.c nRF_Libraries/nrf_strerror.c nRF5_SDK_14.2.0_17b948a/components/libraries/strerror/nrf_strerror.c Segger Startup Files/thumb_crt0.s /Applications/SEGGER Embedded Studio for ARM 4.10/source/thumb_crt0.s","title":"2. \u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092Include\u3059\u308b"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#3-sdk_configh","text":"nRF5_SDK_14.2.0_17b948a/examples/peripheral/blinky/pca10040/s132/ses \u3042\u305f\u308a\u304b\u3089\u3001sdk_config.h\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304f\u308b\u3002","title":"3 sdk_config.h \u3092\u7528\u610f"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#mainc","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"nrf_delay.h\" #include \"nrf_gpio.h\" const uint8_t led_pin = 3 ; /*P0.03\u4f7f\u7528\u3000const\u3067\u4fee\u98fe\u3059\u308b\u5834\u5408\u306f\u5b9a\u6570\u306fROM\u306b\u683c\u7d0d\u3055\u308cRAM\u9818\u57df\u306e\u7bc0\u7d04\u306b\u306a\u308b*/ int main ( void ) { nrf_gpio_cfg_output ( led_pin ); /*\u30dd\u30fc\u30c8\u3092\u51fa\u529b\u306b\u8a2d\u5b9a*/ while ( true ) { uint32_t gpio_state = NRF_GPIO -> OUT ; /*\u30dd\u30fc\u30c8\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u3092\u53d6\u5f97*/ NRF_GPIO -> OUTSET = (( 1 << led_pin ) & ~ gpio_state ); NRF_GPIO -> OUTCLR = (( 1 << led_pin ) & gpio_state ); nrf_delay_ms ( 1000 ); /*\uff11\u79d2\u7121\u3057\u3082\u3057\u306a\u3044*/ } }","title":"main.c\u306e\u4f5c\u6210"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#document","text":"NRF52 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 http://infocenter.nordicsemi.com/pdf/nRF52832_PS_v1.4.pdf","title":"Document"},{"location":"7.FaBoBrick(ANA)/ses/101_brick_analog_led/#parts","text":"5mm LED(\u5404\u8272)","title":"\u69cb\u6210\u30d1\u30fc\u30c4Parts"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/","text":"#102 Buzzer Brick Overview \u5727\u96fb\u30d6\u30b6\u30fc\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 Connecting Schematic Sample Code PWM\u306b\u3088\u308b\u51fa\u529b Buzzer brick\u3092\u63a5\u7d9a\u3057\u3001\u30d3\u30fc\u30d7\u97f3\u3092\u9cf4\u3089\u3057\u3066\u3044\u307e\u3059\u3002 \u97f3\u306e\u6ce2\u5f62\u306f\u77e9\u5f62\u6ce2\u3067PWM\u51fa\u529b\u3057\u307e\u3059\u3002 \u51fa\u529b\u3059\u308bPWM\u306e\u8a2d\u5b9a \u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u6bd4\u306f0.5\u306b\u8a2d\u5b9a \u30d9\u30fc\u30b9\u30af\u30ed\u30c3\u30af\u306f\uff11MHz\u3067\u51fa\u529b \u8a2d\u5b9a\u306f\u69cb\u9020\u4f53\u3067\u305d\u308c\u305e\u308c\u8a2d\u5b9a\u3057\u3066\u304a\u308a\u3001\u5404\u30e1\u30f3\u30d0\u3067\u8a2d\u5b9a\u3002 \u4e3b\u306a\u69cb\u9020\u4f53 nrf_drv_pwm_t PWM \u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30c7\u30fc\u30bf\u69cb\u9020\u4f53 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_Type * p_registers PWM\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3057\u793a\u3059 uint8_t drv_inst_idx \u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 enum nrf_pwm_mode_t PWM\u30e2\u30fc\u30c9 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_MODE_UP \u30a2\u30c3\u30d7\u30ab\u30a6\u30f3\u30bf\uff08\u30a8\u30c3\u30b8\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u30b5\u30a4\u30af\u30eb\uff09 NRF_PWM_MODE_UP_AND_DOWN \u30a2\u30c3\u30d7\u3001\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30bf\u3000\uff08\u30bb\u30f3\u30bf\u30fc\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u30b5\u30a4\u30af\u30eb\uff09 enum nrf_pwm_dec_load_t PWM\u30c7\u30b3\u30fc\u30c0\u30fc\u30ed\u30fc\u30c9\u30e2\u30fc\u30c9 \u30b7\u30fc\u30b1\u30f3\u30b9\u30c7\u30fc\u30bf\u306eRAM\u304b\u3089\u8aad\u307f\u51fa\u3055\u308c\u3001\u30b3\u30f3\u30da\u30a2\u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u65b9\u6cd5\u3002 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_LOAD_COMMON \u3059\u3079\u3066\u306ePWM\u30c1\u30e3\u30f3\u30cd\u30eb\uff080\u301c3\uff09\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09 NRF_PWM_LOAD_GROUPED \u30c1\u30e3\u30f3\u30cd\u30eb0\u30681\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3002\u30c1\u30e3\u30f3\u30cd\u30eb2\u30683\u306e2\u756a\u76ee\u306e\u30ef\u30fc\u30c9\u3002 NRF_PWM_LOAD_INDIVIDUAL \u30c1\u30e3\u30f3\u30cd\u30eb0\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3001\u30c1\u30e3\u30f3\u30cd\u30eb1\u3067\u306f2\u756a\u76ee\u3001\u30c1\u30e3\u30cd\u30eb2\u306e3\u756a\u76ee\u3001\u30c1\u30e3\u30f3\u30cd\u30eb3\u306e4\u756a\u76ee NRF_PWM_LOAD_WAVE_FORM \u30c1\u30e3\u30f3\u30cd\u30eb0\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3001\u30c1\u30e3\u30f3\u30cd\u30eb1\u3067\u306f2\u756a\u76ee\u30014\u756a\u76ee\u306f\u3001\u30d1\u30eb\u30b9\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30ab\u30a6\u30f3\u30bf\u306e\u6700\u4e0a\u4f4d\u306e\u5024 enum nrf_pwm_clk_t \u30d9\u30fc\u30b9\u30af\u30ed\u30c3\u30af\u5468\u6ce2\u6570\u3002 \u5909\u6570\u540d NRF_PWM_CLK_16MHz NRF_PWM_CLK_8MHz NRF_PWM_CLK_4MHz NRF_PWM_CLK_2MHz NRF_PWM_CLK_1MHz NRF_PWM_CLK_500kHz NRF_PWM_CLK_250kHz NRF_PWM_CLK_125kHz enum nrf_pwm_dec_step_t PWM\u30c7\u30b3\u30fc\u30c0\u30fc\u30cd\u30af\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u30e2\u30fc\u30c9 \u30a2\u30af\u30c6\u30a3\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u306e\u6b21\u306e\u5024\u304c\u3044\u3064\u30ed\u30fc\u30c9\u3055\u308c\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_STEP_AUTO Automatically after the current value is played and repeated the requested number of times.\u81ea\u52d5\u7684\u306b\u3001\u73fe\u5728\u306e\u5024\u304c\u30d7\u30ec\u30a4\u3055\u308c\u305f\u5f8c\u3001\u8981\u6c42\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059 NRF_PWM_STEP_TRIGGERED When the NRF_PWM_TASK_NEXTSTEP task is triggered. NRF_PWM_TASK_NEXTSTEP\u30bf\u30b9\u30af\u304c\u30c8\u30ea\u30ac\u30fc\u3057\u305f\u3068\u304d \u4e3b\u306a\u95a2\u6570 ret_code_t nrf_drv_pwm_init ret_code_t nrf_drv_pwm_init (nrf_drv_pwm_t const *const p_instance, nrf_drv_pwm_config_t const * p_config, nrf_drv_pwm_handler_t handler ) PWM\u30c9\u30e9\u30a4\u30d0\u3092\u521d\u671f\u5316\u3059\u308b\u95a2\u6570 \u5909\u6570\u540d \u6982\u8981 p_instance \u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 p_config \u521d\u671f\u8a2d\u5b9a\u69cb\u9020\u4f53\u3092\u6307\u3057\u793a\u3059\u3002\u3082\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u306a\u3089NULL\u3092\u3044\u308c\u307e\u3059\u3002 handler \u30e6\u30fc\u30b6\u30fc\u306b\u3088\u3063\u3066\u4f9b\u7d66\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3002\u3082\u3057\u4f7f\u308f\u306a\u3044\u306a\u3089\u3001\u4ee3\u308f\u308a\u306bNULL\u3092\u5165\u308c\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u901a\u77e5\u306f\u3055\u308c\u305a\u3001PWM\u5272\u308a\u8fbc\u307f\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002 \u8fd4\u308a\u5024 \u5909\u6570\u540d \u6982\u8981 NRF_SUCCESS \u6210\u529f\u3057\u305f\u5834\u5408\u3002 NRF_ERROR_INVALID_STATE \u3059\u3067\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3002 nrf_drv_pwm_uninit void nrf_drv_pwm_uninit ( nrf_drv_pwm_t const *const p_instance ) PWM\u30c9\u30e9\u30a4\u30d0\u3092\u521d\u671f\u5316\u3057\u306a\u3044\u95a2\u6570 \u30d7\u30ec\u30a4\u4e2d\u306e\u5834\u5408\u306f\u3001\u3059\u3050\u306b\u505c\u6b62\u3057\u307e\u3059\u3002 nrf_drv_pwm_simple_playback void nrf_drv_pwm_simple_playback (nrf_drv_pwm_t const *const p_instance, nrf_pwm_sequence_t const * p_sequence,uint16_tplayback_count,uint32_t flags ) \uff11\u56de\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u518d\u751f\u3092\u884c\u3046\u95a2\u6570 \u203b\u6307\u5b9a\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30c7\u30e5\u30fc\u30c6\u30a3\u30b5\u30a4\u30af\u30eb\u5024\u3092\u542b\u3080\u914d\u5217\u306fRAM\u306b\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u30b9\u30bf\u30c3\u30af\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u5909\u6570\u540d \u6982\u8981 p_instance PWM\u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6307\u3057\u793a\u3059 p_sequence \u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u6307\u3057\u793a\u3059 playback_count \u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u3059\u308b\u56de\u6570(\uff10\u3067\u3042\u3063\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002). flags Additional options. Pass any combination of playback flags, or 0 for default settings.\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u306e\u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u30d5\u30e9\u30c3\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u6e21\u3059\u304b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\u306f\uff10\u3068\u306a\u308a\u307e\u3059\u3002 \u97f3\u306e\u5468\u6ce2\u6570 \u97f3\u306e\u5468\u6ce2\u6570\u306f\u3001\u30e9\u306e\uff14\uff14\uff10\u3092\u30d9\u30fc\u30b9\u306b\uff12\uff3e\uff08\uff11/12\uff09\u306e\u516c\u5dee\u6570\u5217\u3067\u3042\u308a\u5468\u6ce2\u6570Hz\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002 \u5909\u6570\u540d \u6982\u8981 \u30c9 261.6255653 \u30c9\uff03 277.182631 \u30ec 293.6647679 \u30ec\uff03 311.1269837 \u30df 329.6275569 \u30d5\u30a1 369.9944227 \u30d5\u30a1\uff03 391.995436 \u30bd 415.3046976 \u30e9 440 \u30e9\uff03 466.1637615 \u30b7 493.8833013 \u30c9 523.2511306 \u6ce2\u9577length\u306f\u3001\uff08\uff11\uff10\uff10\uff10\uff0f\u5468\u6ce2\u6570\uff09\uff0a\uff11\uff10\uff10\uff10\u306b\u306a\u308a\u307e\u3059\u3002 \u7e70\u308a\u8fd4\u3057\u306f\uff11\uff10\uff10\u56de\u3067\u3059\u3002 User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/timer ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT PWM0_ENABLED PWM_ENABLED BOARD_CUSTOM NRF52832_XXAA SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util nrfx_pwm.c ../nRF5_SDK/modules/nrfx/drivers/src \u30d3\u30fc\u30d7\u97f3\u3067\u30c9\u30ec\u30df\u3092\u6f14\u594f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #include <stdio.h> #include <string.h> #include \"nrf_drv_pwm.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"boards.h\" #include \"bsp.h\" #include \"app_timer.h\" #include \"nrf_drv_clock.h\" #include \"nrf_delay.h\" #define Fabo_Shinobi_AnalogPin 3 static nrf_drv_pwm_t m_pwm0 = NRF_DRV_PWM_INSTANCE ( 0 ); static void sound ( int freq ) { uint32_t err_code ; nrf_drv_pwm_config_t config0 = { . output_pins = { Fabo_Shinobi_AnalogPin | NRF_DRV_PWM_PIN_INVERTED , }, . irq_priority = APP_IRQ_PRIORITY_LOWEST , . base_clock = NRF_PWM_CLK_1MHz , . count_mode = NRF_PWM_MODE_UP , . top_value = freq , . load_mode = NRF_PWM_LOAD_COMMON , . step_mode = NRF_PWM_STEP_AUTO }; err_code = nrf_drv_pwm_init ( & m_pwm0 , & config0 , NULL ); APP_ERROR_CHECK ( err_code ); // This array cannot be allocated on stack (hence \"static\") and it must // be in RAM. static nrf_pwm_values_common_t seq0_values [ 2 ]; nrf_pwm_sequence_t const seq0 = { . values . p_common = seq0_values , . length = NRF_PWM_VALUES_LENGTH ( seq0_values ), . repeats = 100 , . end_delay = 0 }; seq0_values [ 0 ] = freq / 2 ; nrf_drv_pwm_simple_playback ( & m_pwm0 , & seq0 , 1 , NRF_DRV_PWM_FLAG_LOOP ); } int main ( void ) { while ( 1 ){ sound ( 3822 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 3405 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 3033 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2863 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2551 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2272 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2024 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 1911 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); nrf_delay_ms ( 1000 ); } } \u53c2\u7167\u3000API nrf_drv_pwm_config_t Struct Reference https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v11.0.0%2Fstructnrf__drv__pwm__config__t.html Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > Data Structures > Data Structures PWM HAL Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > API Reference > Peripheral drivers > PWM HAL and driver PWM Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > Hardware Drivers \u69cb\u6210Parts \u5727\u96fb\u30d6\u30b6\u30fc GitHub","title":"102 Buzzer Brick"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#102-buzzer-brick","text":"","title":"#102 Buzzer Brick"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#overview","text":"\u5727\u96fb\u30d6\u30b6\u30fc\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#sample-code","text":"","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#pwm","text":"Buzzer brick\u3092\u63a5\u7d9a\u3057\u3001\u30d3\u30fc\u30d7\u97f3\u3092\u9cf4\u3089\u3057\u3066\u3044\u307e\u3059\u3002 \u97f3\u306e\u6ce2\u5f62\u306f\u77e9\u5f62\u6ce2\u3067PWM\u51fa\u529b\u3057\u307e\u3059\u3002","title":"PWM\u306b\u3088\u308b\u51fa\u529b"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#pwm_1","text":"\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u6bd4\u306f0.5\u306b\u8a2d\u5b9a \u30d9\u30fc\u30b9\u30af\u30ed\u30c3\u30af\u306f\uff11MHz\u3067\u51fa\u529b \u8a2d\u5b9a\u306f\u69cb\u9020\u4f53\u3067\u305d\u308c\u305e\u308c\u8a2d\u5b9a\u3057\u3066\u304a\u308a\u3001\u5404\u30e1\u30f3\u30d0\u3067\u8a2d\u5b9a\u3002","title":"\u51fa\u529b\u3059\u308bPWM\u306e\u8a2d\u5b9a"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#_1","text":"","title":"\u4e3b\u306a\u69cb\u9020\u4f53"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#nrf_drv_pwm_t","text":"PWM \u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30c7\u30fc\u30bf\u69cb\u9020\u4f53 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_Type * p_registers PWM\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30ec\u30b8\u30b9\u30bf\u306e\u6307\u3057\u793a\u3059 uint8_t drv_inst_idx \u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9","title":"nrf_drv_pwm_t"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#enum-nrf_pwm_mode_t","text":"PWM\u30e2\u30fc\u30c9 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_MODE_UP \u30a2\u30c3\u30d7\u30ab\u30a6\u30f3\u30bf\uff08\u30a8\u30c3\u30b8\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u30b5\u30a4\u30af\u30eb\uff09 NRF_PWM_MODE_UP_AND_DOWN \u30a2\u30c3\u30d7\u3001\u30c0\u30a6\u30f3\u30ab\u30a6\u30f3\u30bf\u3000\uff08\u30bb\u30f3\u30bf\u30fc\u30c7\u30e5\u30fc\u30c6\u30a3\u30fc\u30b5\u30a4\u30af\u30eb\uff09","title":"enum nrf_pwm_mode_t"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#enum-nrf_pwm_dec_load_t","text":"PWM\u30c7\u30b3\u30fc\u30c0\u30fc\u30ed\u30fc\u30c9\u30e2\u30fc\u30c9 \u30b7\u30fc\u30b1\u30f3\u30b9\u30c7\u30fc\u30bf\u306eRAM\u304b\u3089\u8aad\u307f\u51fa\u3055\u308c\u3001\u30b3\u30f3\u30da\u30a2\u30ec\u30b8\u30b9\u30bf\u306b\u683c\u7d0d\u65b9\u6cd5\u3002 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_LOAD_COMMON \u3059\u3079\u3066\u306ePWM\u30c1\u30e3\u30f3\u30cd\u30eb\uff080\u301c3\uff09\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09 NRF_PWM_LOAD_GROUPED \u30c1\u30e3\u30f3\u30cd\u30eb0\u30681\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3002\u30c1\u30e3\u30f3\u30cd\u30eb2\u30683\u306e2\u756a\u76ee\u306e\u30ef\u30fc\u30c9\u3002 NRF_PWM_LOAD_INDIVIDUAL \u30c1\u30e3\u30f3\u30cd\u30eb0\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3001\u30c1\u30e3\u30f3\u30cd\u30eb1\u3067\u306f2\u756a\u76ee\u3001\u30c1\u30e3\u30cd\u30eb2\u306e3\u756a\u76ee\u3001\u30c1\u30e3\u30f3\u30cd\u30eb3\u306e4\u756a\u76ee NRF_PWM_LOAD_WAVE_FORM \u30c1\u30e3\u30f3\u30cd\u30eb0\u3067\u4f7f\u7528\u3055\u308c\u308b\u4e00\u756a\u6700\u521d\u306e\u30cf\u30fc\u30d5\u30ef\u30fc\u30c9\uff0816\u30d3\u30c3\u30c8\uff09\u3001\u30c1\u30e3\u30f3\u30cd\u30eb1\u3067\u306f2\u756a\u76ee\u30014\u756a\u76ee\u306f\u3001\u30d1\u30eb\u30b9\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30ab\u30a6\u30f3\u30bf\u306e\u6700\u4e0a\u4f4d\u306e\u5024","title":"enum nrf_pwm_dec_load_t"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#enum-nrf_pwm_clk_t","text":"\u30d9\u30fc\u30b9\u30af\u30ed\u30c3\u30af\u5468\u6ce2\u6570\u3002 \u5909\u6570\u540d NRF_PWM_CLK_16MHz NRF_PWM_CLK_8MHz NRF_PWM_CLK_4MHz NRF_PWM_CLK_2MHz NRF_PWM_CLK_1MHz NRF_PWM_CLK_500kHz NRF_PWM_CLK_250kHz NRF_PWM_CLK_125kHz","title":"enum nrf_pwm_clk_t"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#enum-nrf_pwm_dec_step_t","text":"PWM\u30c7\u30b3\u30fc\u30c0\u30fc\u30cd\u30af\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u30e2\u30fc\u30c9 \u30a2\u30af\u30c6\u30a3\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u306e\u6b21\u306e\u5024\u304c\u3044\u3064\u30ed\u30fc\u30c9\u3055\u308c\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059 \u5909\u6570\u540d \u6982\u8981 NRF_PWM_STEP_AUTO Automatically after the current value is played and repeated the requested number of times.\u81ea\u52d5\u7684\u306b\u3001\u73fe\u5728\u306e\u5024\u304c\u30d7\u30ec\u30a4\u3055\u308c\u305f\u5f8c\u3001\u8981\u6c42\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059 NRF_PWM_STEP_TRIGGERED When the NRF_PWM_TASK_NEXTSTEP task is triggered. NRF_PWM_TASK_NEXTSTEP\u30bf\u30b9\u30af\u304c\u30c8\u30ea\u30ac\u30fc\u3057\u305f\u3068\u304d","title":"enum nrf_pwm_dec_step_t"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#_2","text":"","title":"\u4e3b\u306a\u95a2\u6570"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#ret_code_t-nrf_drv_pwm_init","text":"ret_code_t nrf_drv_pwm_init (nrf_drv_pwm_t const *const p_instance, nrf_drv_pwm_config_t const * p_config, nrf_drv_pwm_handler_t handler ) PWM\u30c9\u30e9\u30a4\u30d0\u3092\u521d\u671f\u5316\u3059\u308b\u95a2\u6570 \u5909\u6570\u540d \u6982\u8981 p_instance \u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 p_config \u521d\u671f\u8a2d\u5b9a\u69cb\u9020\u4f53\u3092\u6307\u3057\u793a\u3059\u3002\u3082\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u306a\u3089NULL\u3092\u3044\u308c\u307e\u3059\u3002 handler \u30e6\u30fc\u30b6\u30fc\u306b\u3088\u3063\u3066\u4f9b\u7d66\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3002\u3082\u3057\u4f7f\u308f\u306a\u3044\u306a\u3089\u3001\u4ee3\u308f\u308a\u306bNULL\u3092\u5165\u308c\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u901a\u77e5\u306f\u3055\u308c\u305a\u3001PWM\u5272\u308a\u8fbc\u307f\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002 \u8fd4\u308a\u5024 \u5909\u6570\u540d \u6982\u8981 NRF_SUCCESS \u6210\u529f\u3057\u305f\u5834\u5408\u3002 NRF_ERROR_INVALID_STATE \u3059\u3067\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3002","title":"ret_code_t nrf_drv_pwm_init"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#nrf_drv_pwm_uninit","text":"void nrf_drv_pwm_uninit ( nrf_drv_pwm_t const *const p_instance ) PWM\u30c9\u30e9\u30a4\u30d0\u3092\u521d\u671f\u5316\u3057\u306a\u3044\u95a2\u6570 \u30d7\u30ec\u30a4\u4e2d\u306e\u5834\u5408\u306f\u3001\u3059\u3050\u306b\u505c\u6b62\u3057\u307e\u3059\u3002","title":"nrf_drv_pwm_uninit"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#nrf_drv_pwm_simple_playback","text":"void nrf_drv_pwm_simple_playback (nrf_drv_pwm_t const *const p_instance, nrf_pwm_sequence_t const * p_sequence,uint16_tplayback_count,uint32_t flags ) \uff11\u56de\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u518d\u751f\u3092\u884c\u3046\u95a2\u6570 \u203b\u6307\u5b9a\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30c7\u30e5\u30fc\u30c6\u30a3\u30b5\u30a4\u30af\u30eb\u5024\u3092\u542b\u3080\u914d\u5217\u306fRAM\u306b\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u30b9\u30bf\u30c3\u30af\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u5909\u6570\u540d \u6982\u8981 p_instance PWM\u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6307\u3057\u793a\u3059 p_sequence \u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u6307\u3057\u793a\u3059 playback_count \u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u3059\u308b\u56de\u6570(\uff10\u3067\u3042\u3063\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002). flags Additional options. Pass any combination of playback flags, or 0 for default settings.\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u306e\u30d7\u30ec\u30a4\u30d0\u30c3\u30af\u30d5\u30e9\u30c3\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b\u6e21\u3059\u304b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\u306f\uff10\u3068\u306a\u308a\u307e\u3059\u3002","title":"nrf_drv_pwm_simple_playback"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#_3","text":"\u97f3\u306e\u5468\u6ce2\u6570\u306f\u3001\u30e9\u306e\uff14\uff14\uff10\u3092\u30d9\u30fc\u30b9\u306b\uff12\uff3e\uff08\uff11/12\uff09\u306e\u516c\u5dee\u6570\u5217\u3067\u3042\u308a\u5468\u6ce2\u6570Hz\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002 \u5909\u6570\u540d \u6982\u8981 \u30c9 261.6255653 \u30c9\uff03 277.182631 \u30ec 293.6647679 \u30ec\uff03 311.1269837 \u30df 329.6275569 \u30d5\u30a1 369.9944227 \u30d5\u30a1\uff03 391.995436 \u30bd 415.3046976 \u30e9 440 \u30e9\uff03 466.1637615 \u30b7 493.8833013 \u30c9 523.2511306 \u6ce2\u9577length\u306f\u3001\uff08\uff11\uff10\uff10\uff10\uff0f\u5468\u6ce2\u6570\uff09\uff0a\uff11\uff10\uff10\uff10\u306b\u306a\u308a\u307e\u3059\u3002 \u7e70\u308a\u8fd4\u3057\u306f\uff11\uff10\uff10\u56de\u3067\u3059\u3002","title":"\u97f3\u306e\u5468\u6ce2\u6570"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/timer ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT PWM0_ENABLED PWM_ENABLED BOARD_CUSTOM NRF52832_XXAA","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util nrfx_pwm.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 #include <stdio.h> #include <string.h> #include \"nrf_drv_pwm.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"boards.h\" #include \"bsp.h\" #include \"app_timer.h\" #include \"nrf_drv_clock.h\" #include \"nrf_delay.h\" #define Fabo_Shinobi_AnalogPin 3 static nrf_drv_pwm_t m_pwm0 = NRF_DRV_PWM_INSTANCE ( 0 ); static void sound ( int freq ) { uint32_t err_code ; nrf_drv_pwm_config_t config0 = { . output_pins = { Fabo_Shinobi_AnalogPin | NRF_DRV_PWM_PIN_INVERTED , }, . irq_priority = APP_IRQ_PRIORITY_LOWEST , . base_clock = NRF_PWM_CLK_1MHz , . count_mode = NRF_PWM_MODE_UP , . top_value = freq , . load_mode = NRF_PWM_LOAD_COMMON , . step_mode = NRF_PWM_STEP_AUTO }; err_code = nrf_drv_pwm_init ( & m_pwm0 , & config0 , NULL ); APP_ERROR_CHECK ( err_code ); // This array cannot be allocated on stack (hence \"static\") and it must // be in RAM. static nrf_pwm_values_common_t seq0_values [ 2 ]; nrf_pwm_sequence_t const seq0 = { . values . p_common = seq0_values , . length = NRF_PWM_VALUES_LENGTH ( seq0_values ), . repeats = 100 , . end_delay = 0 }; seq0_values [ 0 ] = freq / 2 ; nrf_drv_pwm_simple_playback ( & m_pwm0 , & seq0 , 1 , NRF_DRV_PWM_FLAG_LOOP ); } int main ( void ) { while ( 1 ){ sound ( 3822 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 3405 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 3033 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2863 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2551 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2272 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 2024 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); sound ( 1911 ); nrf_delay_ms ( 200 ); nrf_drv_pwm_uninit ( & m_pwm0 ); nrf_delay_ms ( 1000 ); } }","title":"\u30d3\u30fc\u30d7\u97f3\u3067\u30c9\u30ec\u30df\u3092\u6f14\u594f\u3002"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#api","text":"nrf_drv_pwm_config_t Struct Reference https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v11.0.0%2Fstructnrf__drv__pwm__config__t.html Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > Data Structures > Data Structures PWM HAL Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > API Reference > Peripheral drivers > PWM HAL and driver PWM Software Development Kit > nRF5 SDK > nRF5 SDK v12.3.0 > Hardware Drivers","title":"\u53c2\u7167\u3000API"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#parts","text":"\u5727\u96fb\u30d6\u30b6\u30fc","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/102_brick_analog_buzzer/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/","text":"#103 Button Brick Overview \u30dc\u30bf\u30f3\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002I/O\u30d4\u30f3\u3088\u308a\u30dc\u30bf\u30f3\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT BOARD_CUSTOM NRF52832_XXAA SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler //ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define NRF_LOG_MODULE_NAME FABO_103_BUTTON #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"PUSH BUTTON push_time:%d\" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } } \u69cb\u6210Parts 12mm\u89d2\u30bf\u30af\u30c8\u30b9\u30a4\u30c3\u30c1 GitHub","title":"103 Button Brick"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#103-button-brick","text":"","title":"#103 Button Brick"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#overview","text":"\u30dc\u30bf\u30f3\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002I/O\u30d4\u30f3\u3088\u308a\u30dc\u30bf\u30f3\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT BOARD_CUSTOM NRF52832_XXAA","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler //ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define NRF_LOG_MODULE_NAME FABO_103_BUTTON #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"PUSH BUTTON push_time:%d\" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#parts","text":"12mm\u89d2\u30bf\u30af\u30c8\u30b9\u30a4\u30c3\u30c1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/103_brick_analog_button/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/","text":"#104 Angle Brick Overview \u30dc\u30ea\u30e5\u30fc\u30e0\u62b5\u6297\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u304b\u3089\u30a2\u30ca\u30ed\u30b0\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 LED Brick\u306e\u660e\u308b\u3055\u3092\u8abf\u7bc0\u3059\u308b\u969b\u306a\u3069\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 Connecting Schematic Code explanation nRF52832\u306f\u3001ADC\u304c\u4f7f\u3048\u308b\u30d4\u30f3\u306f\u6c7a\u307e\u3063\u3066\u304a\u308a\u3001P0.03\u306f\u3001AIN1\u3068\u306a\u308a\u307e\u3059\u3002 \u30a2\u30ca\u30ed\u30b0\u5024\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u30bd\u30d5\u30c8(Teraterm\u306a\u3069)\u304b\u3089\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 \u30c9\u30e9\u30a4\u30d0\u306fPPI\uff08Programmable peripheral interconnect\uff09\u30c9\u30e9\u30a4\u30d0\u3092\u4f7f\u3044\u307e\u3059\u3002A/D\u5909\u63db\u3059\u308b\u306e \u306bARM\u30b3\u30a2\u3092\u8d77\u52d5\u3059\u308b\u306e\u306f\u6d88\u8cbb\u96fb\u529b\u306e\u7121\u99c4\u3067\u3042\u308a\u3001PPI\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066\u3001PPI\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u6307\u5b9a \u3001\u30b3\u30a2\u3092\u8d77\u52d5\u3057\u306a\u3044\u3067\u3001\u30a4\u30d9\u30f3\u30c8\u30e1\u30e2\u30ea\u3068\u30bf\u30b9\u30af\u3067\u8a08\u6e2c\u30c7\u30fc\u30bf\u3092PPI\u306e\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002 User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT SAADC_ENABLED PPI_ENABLED POWER_ENABLED TIMER0_ENABLED TIMER_ENABLED NRFX_SAADC_ENABLED NRFX_PPI_ENABLED NRFX_POWER_ENABLED NRFX_TIMER0_ENABLED NRFX_TIMER_ENABLED BOARD_CUSTOM NRF52832_XXAB DEBUG SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler //ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler //ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define NRF_LOG_MODULE_NAME FABO_104_ANGLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; void * __stop_pwr_mgmt_data ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { NRF_LOG_INFO ( \"%d\" , p_event -> data . done . p_buffer [ i ]); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"Fabo Shinobi Sample Angle Brick 104\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts \u30dc\u30ea\u30e5\u30fc\u30e0\u62b5\u6297\u5668A 10k GitHub","title":"104 Angle Brick"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#104-angle-brick","text":"","title":"#104 Angle Brick"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#overview","text":"\u30dc\u30ea\u30e5\u30fc\u30e0\u62b5\u6297\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u304b\u3089\u30a2\u30ca\u30ed\u30b0\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 LED Brick\u306e\u660e\u308b\u3055\u3092\u8abf\u7bc0\u3059\u308b\u969b\u306a\u3069\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#code-explanation","text":"nRF52832\u306f\u3001ADC\u304c\u4f7f\u3048\u308b\u30d4\u30f3\u306f\u6c7a\u307e\u3063\u3066\u304a\u308a\u3001P0.03\u306f\u3001AIN1\u3068\u306a\u308a\u307e\u3059\u3002 \u30a2\u30ca\u30ed\u30b0\u5024\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u30bd\u30d5\u30c8(Teraterm\u306a\u3069)\u304b\u3089\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 \u30c9\u30e9\u30a4\u30d0\u306fPPI\uff08Programmable peripheral interconnect\uff09\u30c9\u30e9\u30a4\u30d0\u3092\u4f7f\u3044\u307e\u3059\u3002A/D\u5909\u63db\u3059\u308b\u306e \u306bARM\u30b3\u30a2\u3092\u8d77\u52d5\u3059\u308b\u306e\u306f\u6d88\u8cbb\u96fb\u529b\u306e\u7121\u99c4\u3067\u3042\u308a\u3001PPI\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066\u3001PPI\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u6307\u5b9a \u3001\u30b3\u30a2\u3092\u8d77\u52d5\u3057\u306a\u3044\u3067\u3001\u30a4\u30d9\u30f3\u30c8\u30e1\u30e2\u30ea\u3068\u30bf\u30b9\u30af\u3067\u8a08\u6e2c\u30c7\u30fc\u30bf\u3092PPI\u306e\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002","title":"Code explanation"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT SAADC_ENABLED PPI_ENABLED POWER_ENABLED TIMER0_ENABLED TIMER_ENABLED NRFX_SAADC_ENABLED NRFX_PPI_ENABLED NRFX_POWER_ENABLED NRFX_TIMER0_ENABLED NRFX_TIMER_ENABLED BOARD_CUSTOM NRF52832_XXAB DEBUG","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler //ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler //ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define NRF_LOG_MODULE_NAME FABO_104_ANGLE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; void * __stop_pwr_mgmt_data ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { NRF_LOG_INFO ( \"%d\" , p_event -> data . done . p_buffer [ i ]); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"Fabo Shinobi Sample Angle Brick 104\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#parts","text":"\u30dc\u30ea\u30e5\u30fc\u30e0\u62b5\u6297\u5668A 10k","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/104_brick_analog_angle/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/","text":"#105 Vibrator Brick Overview \u632f\u52d5\u30e2\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u304b\u3089\u632f\u52d5\u30e2\u30fc\u30bf\u30fc\u306eON/OFF\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting Parts Specification Document LA3R5-480AH1 Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/button ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/modules/nrfx/mdk ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/libraries/util . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_TIMER0_ENABLED NRFX_TIMER_ENABLED TIMER0_ENABLED TIMER_ENABLED NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler //ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER TIMER0_IRQHandler //ExternalISR8 ISR_HANDLER ExternalISR9 Sample Code \u30bf\u30a4\u30de\u30fc\u3067\u30d0\u30a4\u30d6\u30ec\u30fc\u30bf\u30fc\u30920.5\u79d2\u3054\u3068\u306b\u4f5c\u52d5\u3001\u505c\u6b62\u3055\u305b\u307e\u3059\u3002 \u52d5\u4f5c\u306b\u306f\u3001\uff15V\u306e\u96fb\u6e90\u304c\u5fc5\u8981\u3068\u306a\u308a\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\u4ee3\u7528\u3068\u3057\u3066LED Brick\u3067\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"nrf_drv_timer.h\" #include \"bsp.h\" #include \"app_error.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define NRF_LOG_MODULE_NAME FABO_105_VIBRATOR #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #define PIN_NUMBER 3 const nrf_drv_timer_t TIMER_LED = NRF_DRV_TIMER_INSTANCE ( 0 ); nrf_log_module_const_data_t * __start_log_const_data ; void * __stop_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_dynamic_data ; void timer_led_event_handler ( nrf_timer_event_t event_type , void * p_context ) { static uint32_t counter = 0 ; NRF_LOG_INFO ( \"timer_led_event_handler() counter = %d, event_type = %d\" , counter , event_type ); switch ( event_type ) { case NRF_TIMER_EVENT_COMPARE0 : nrf_gpio_pin_toggle ( PIN_NUMBER ); break ; default : break ; } counter ++ ; } int main ( void ) { uint32_t time_ms = 500 ; uint32_t time_ticks ; uint32_t err_code = NRF_SUCCESS ; APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); int clock = 16000000 / 2 ; LEDS_CONFIGURE ( 1 << PIN_NUMBER ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; APP_ERROR_CHECK ( nrf_drv_timer_init ( & TIMER_LED , & timer_cfg , timer_led_event_handler )); time_ticks = nrf_drv_timer_ms_to_ticks ( & TIMER_LED , time_ms ); nrf_drv_timer_extended_compare ( & TIMER_LED , NRF_TIMER_CC_CHANNEL0 , time_ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , true ); nrf_drv_timer_enable ( & TIMER_LED ); while ( 1 ) { __WFI (); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts \u632f\u52d5\u30e2\u30fc\u30bf\u30fc LA3R5-480AH1 GitHub","title":"105 Vibrator Brick"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#105-vibrator-brick","text":"","title":"#105 Vibrator Brick"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#overview","text":"\u632f\u52d5\u30e2\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u304b\u3089\u632f\u52d5\u30e2\u30fc\u30bf\u30fc\u306eON/OFF\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#parts-specification","text":"Document LA3R5-480AH1","title":"Parts Specification"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/button ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/modules/nrfx/mdk ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/libraries/util .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_TIMER0_ENABLED NRFX_TIMER_ENABLED TIMER0_ENABLED TIMER_ENABLED NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler //ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER TIMER0_IRQHandler //ExternalISR8 ISR_HANDLER ExternalISR9","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#sample-code","text":"\u30bf\u30a4\u30de\u30fc\u3067\u30d0\u30a4\u30d6\u30ec\u30fc\u30bf\u30fc\u30920.5\u79d2\u3054\u3068\u306b\u4f5c\u52d5\u3001\u505c\u6b62\u3055\u305b\u307e\u3059\u3002 \u52d5\u4f5c\u306b\u306f\u3001\uff15V\u306e\u96fb\u6e90\u304c\u5fc5\u8981\u3068\u306a\u308a\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\u4ee3\u7528\u3068\u3057\u3066LED Brick\u3067\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"nrf_drv_timer.h\" #include \"bsp.h\" #include \"app_error.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define NRF_LOG_MODULE_NAME FABO_105_VIBRATOR #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #define PIN_NUMBER 3 const nrf_drv_timer_t TIMER_LED = NRF_DRV_TIMER_INSTANCE ( 0 ); nrf_log_module_const_data_t * __start_log_const_data ; void * __stop_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_dynamic_data ; void timer_led_event_handler ( nrf_timer_event_t event_type , void * p_context ) { static uint32_t counter = 0 ; NRF_LOG_INFO ( \"timer_led_event_handler() counter = %d, event_type = %d\" , counter , event_type ); switch ( event_type ) { case NRF_TIMER_EVENT_COMPARE0 : nrf_gpio_pin_toggle ( PIN_NUMBER ); break ; default : break ; } counter ++ ; } int main ( void ) { uint32_t time_ms = 500 ; uint32_t time_ticks ; uint32_t err_code = NRF_SUCCESS ; APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); int clock = 16000000 / 2 ; LEDS_CONFIGURE ( 1 << PIN_NUMBER ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; APP_ERROR_CHECK ( nrf_drv_timer_init ( & TIMER_LED , & timer_cfg , timer_led_event_handler )); time_ticks = nrf_drv_timer_ms_to_ticks ( & TIMER_LED , time_ms ); nrf_drv_timer_extended_compare ( & TIMER_LED , NRF_TIMER_CC_CHANNEL0 , time_ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , true ); nrf_drv_timer_enable ( & TIMER_LED ); while ( 1 ) { __WFI (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#parts","text":"\u632f\u52d5\u30e2\u30fc\u30bf\u30fc LA3R5-480AH1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/105_brick_analog_vibrator/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/","text":"#106 Touch Brick Overview \u611f\u5727\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u305f\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fcBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u3001\u611f\u5727\u90e8\u5206\u306b\u52a0\u3048\u3089\u308c\u305f\u529b\u306e\u5927\u304d\u3055\u306e\u5909\u5316\u3092\u30a2\u30ca\u30ed\u30b0\u5024\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting Datasheet Document Datasheet Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path /nRF5_SDK/modules/nrfx/drivers/src/prs /nRF5_SDK/modules/nrfx/drivers/src /nRF5_SDK/components/libraries/mutex /nRF5_SDK/components/libraries/atomic /nRF5_SDK/components/libraries/ringbuf /nRF5_SDK/external/fprintf /nRF5_SDK/components/libraries/balloc /nRF5_SDK/components/libraries/memobj /nRF5_SDK/components/libraries/log/src /nRF5_SDK/components/libraries/strerror /nRF5_SDK/components/libraries/experimental_section_vars /nRF5_SDK/modules/nrfx/hal /nRF5_SDK/components/drivers_nrf/nrf_soc_nosd /nRF5_SDK/integration/nrfx /nRF5_SDK/modules/nrfx /nRF5_SDK/modules/nrfx/drivers/include /nRF5_SDK/components/toolchain/cmsis/include /nRF5_SDK/modules/nrfx/mdk /nRF5_SDK/integration/nrfx/legacy /nRF5_SDK/components/boards /nRF5_SDK/components/libraries/util /nRF5_SDK/components/libraries/delay /nRF5_SDK/components/libraries/pwr_mgmt /nRF5_SDK/components/libraries/log . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_SAADC_ENABLED NRFX_PPI_ENABLED NRFX_POWER_ENABLED NRFX_TIMER_ENABLED NRFX_TIMER0_ENABLED SAADC_ENABLED PPI_ENABLED POWER_ENABLED TIMER_ENABLED TIMER0_ENABLED NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u30cf\u30ba\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler // ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler //ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code A1\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fTouch Brick\u306e\u611f\u5727\u306b\u3088\u3063\u3066\u3001A0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fLED Brick\u3092\u70b9\u706f/\u6d88\u706f\u3055\u305b\u3066\u3044\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME FABO_106_TOUCH #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; void * __stop_pwr_mgmt_data ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { NRF_LOG_INFO ( \"p_event->data.done.p_buffer[%d]:%d\" , i , p_event -> data . done . p_buffer [ i ]); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"Fabo Shinobi TOUCH Brick 106 Sample.\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts \u611f\u5727\u30bb\u30f3\u30b5\u30fc GitHub","title":"106 Touch Brick"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#106-touch-brick","text":"","title":"#106 Touch Brick"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#overview","text":"\u611f\u5727\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u305f\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fcBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u3001\u611f\u5727\u90e8\u5206\u306b\u52a0\u3048\u3089\u308c\u305f\u529b\u306e\u5927\u304d\u3055\u306e\u5909\u5316\u3092\u30a2\u30ca\u30ed\u30b0\u5024\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#datasheet","text":"Document Datasheet","title":"Datasheet"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path /nRF5_SDK/modules/nrfx/drivers/src/prs /nRF5_SDK/modules/nrfx/drivers/src /nRF5_SDK/components/libraries/mutex /nRF5_SDK/components/libraries/atomic /nRF5_SDK/components/libraries/ringbuf /nRF5_SDK/external/fprintf /nRF5_SDK/components/libraries/balloc /nRF5_SDK/components/libraries/memobj /nRF5_SDK/components/libraries/log/src /nRF5_SDK/components/libraries/strerror /nRF5_SDK/components/libraries/experimental_section_vars /nRF5_SDK/modules/nrfx/hal /nRF5_SDK/components/drivers_nrf/nrf_soc_nosd /nRF5_SDK/integration/nrfx /nRF5_SDK/modules/nrfx /nRF5_SDK/modules/nrfx/drivers/include /nRF5_SDK/components/toolchain/cmsis/include /nRF5_SDK/modules/nrfx/mdk /nRF5_SDK/integration/nrfx/legacy /nRF5_SDK/components/boards /nRF5_SDK/components/libraries/util /nRF5_SDK/components/libraries/delay /nRF5_SDK/components/libraries/pwr_mgmt /nRF5_SDK/components/libraries/log .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_SAADC_ENABLED NRFX_PPI_ENABLED NRFX_POWER_ENABLED NRFX_TIMER_ENABLED NRFX_TIMER0_ENABLED SAADC_ENABLED PPI_ENABLED POWER_ENABLED TIMER_ENABLED TIMER0_ENABLED NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_error.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u30cf\u30ba\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler // ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler //ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#sample-code","text":"A1\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fTouch Brick\u306e\u611f\u5727\u306b\u3088\u3063\u3066\u3001A0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fLED Brick\u3092\u70b9\u706f/\u6d88\u706f\u3055\u305b\u3066\u3044\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME FABO_106_TOUCH #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; void * __stop_pwr_mgmt_data ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { NRF_LOG_INFO ( \"p_event->data.done.p_buffer[%d]:%d\" , i , p_event -> data . done . p_buffer [ i ]); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"Fabo Shinobi TOUCH Brick 106 Sample.\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#parts","text":"\u611f\u5727\u30bb\u30f3\u30b5\u30fc","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/106_brick_analog_touch/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/","text":"#107 LimitSwitch Brick Overview \u30ea\u30df\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u30b9\u30a4\u30c3\u30c1\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6a5f\u68b0\u306e\u81ea\u52d5\u505c\u6b62\u3084\u4f4d\u7f6e\u691c\u51fa\u306e\u969b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 Connecting Arduino Support Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler //ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code A1\u30b3\u30cd\u30af\u30bf\u306bLimitSwitch Brick\u3092\u63a5\u7d9a\u3057\u3001A0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fLED Brick\u306e\u70b9\u706f/\u6d88\u706f\u3092\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME FABO_107_LIMITSWITCH #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); gpio_init (); while ( true ) { uint32_t LimitSwitch = 0 ; static uint32_t push_time = 0 ; LimitSwitch = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( LimitSwitch == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"PUSH LIMITSWITCH push_time:%d\" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } } \u69cb\u6210Parts \u30ea\u30df\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1 GitHub","title":"107 LimitSwitch Brick"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#107-limitswitch-brick","text":"","title":"#107 LimitSwitch Brick"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#overview","text":"\u30ea\u30df\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u3063\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u30b9\u30a4\u30c3\u30c1\u306eON/OFF\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6a5f\u68b0\u306e\u81ea\u52d5\u505c\u6b62\u3084\u4f4d\u7f6e\u691c\u51fa\u306e\u969b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#arduino","text":"","title":"Arduino"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#support","text":"","title":"Support"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler //ExternalISR2 ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#sample-code","text":"A1\u30b3\u30cd\u30af\u30bf\u306bLimitSwitch Brick\u3092\u63a5\u7d9a\u3057\u3001A0\u30b3\u30cd\u30af\u30bf\u306b\u63a5\u7d9a\u3057\u305fLED Brick\u306e\u70b9\u706f/\u6d88\u706f\u3092\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME FABO_107_LIMITSWITCH #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); gpio_init (); while ( true ) { uint32_t LimitSwitch = 0 ; static uint32_t push_time = 0 ; LimitSwitch = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( LimitSwitch == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"PUSH LIMITSWITCH push_time:%d\" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#parts","text":"\u30ea\u30df\u30c3\u30c8\u30b9\u30a4\u30c3\u30c1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/107_brick_analog_limitswitch/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/","text":"#108 Temperature Brick Overview \u6e29\u5ea6\u3092\u8a08\u6e2c\u3059\u308bBrick\u3067\u3059\u3002 \u30a2\u30ca\u30ed\u30b0\u5024(ADC 12bit\u306e\u5834\u5408\u30000\u301c4096)\u3092\u53d6\u5f97\u3067\u304d\u3001\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u221230\u5ea6\u304b\u3089100\u5ea6\u307e\u3067\u306e\u6e29\u5ea6\u3092\u8a08\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting LM61CIZ Datasheet Document LM61CIZ Datasheet Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_SAADC_ENABLED NRFX_POWER_ENABLED NRFX_PPI_ENABLED NRFX_TIMER_ENABLED NRFX_TIMER0_ENABLED SAADC_ENABLED POWER_ENABLED PPI_ENABLED TIMER_ENABLED TIMER0_ENABLED NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME FABO_108_TEMPERATURE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_pwr_mgmt_data ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"saadc_callback() m_adc_evt_counter:%d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double temp = ((( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ) - 600.0 ) / 10.0 ; NRF_LOG_INFO ( \"Celsius=\" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( temp )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"Fabo Shinobi Temprature Brick 108\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts IC\u6e29\u5ea6\u30bb\u30f3\u30b5 LM61CIZ GitHub","title":"108 Temperature Brick"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#108-temperature-brick","text":"","title":"#108 Temperature Brick"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#overview","text":"\u6e29\u5ea6\u3092\u8a08\u6e2c\u3059\u308bBrick\u3067\u3059\u3002 \u30a2\u30ca\u30ed\u30b0\u5024(ADC 12bit\u306e\u5834\u5408\u30000\u301c4096)\u3092\u53d6\u5f97\u3067\u304d\u3001\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u221230\u5ea6\u304b\u3089100\u5ea6\u307e\u3067\u306e\u6e29\u5ea6\u3092\u8a08\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#lm61ciz-datasheet","text":"Document LM61CIZ Datasheet","title":"LM61CIZ Datasheet"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_SAADC_ENABLED NRFX_POWER_ENABLED NRFX_PPI_ENABLED NRFX_TIMER_ENABLED NRFX_TIMER0_ENABLED SAADC_ENABLED POWER_ENABLED PPI_ENABLED TIMER_ENABLED TIMER0_ENABLED NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#sample-code","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME FABO_108_TEMPERATURE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_pwr_mgmt_data ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"saadc_callback() m_adc_evt_counter:%d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double temp = ((( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ) - 600.0 ) / 10.0 ; NRF_LOG_INFO ( \"Celsius=\" NRF_LOG_FLOAT_MARKER , NRF_LOG_FLOAT ( temp )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { ret_code_t err_code ; nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); err_code = nrf_drv_saadc_init ( NULL , saadc_callback ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_channel_init ( 0 , & channel_config ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"Fabo Shinobi Temprature Brick 108\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#parts","text":"IC\u6e29\u5ea6\u30bb\u30f3\u30b5 LM61CIZ","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/108_brick_analog_temperature/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/","text":"#109 AmbientLinght Brick Overview Connecting Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_SAADC_ENABLED SAADC_ENABLED NRFX_PPI_ENABLED PPI_ENABLED NRFX_POWER_ENABLED POWER_ENABLED NRFX_TIMER_ENABLED NRFX_TIMER0_ENABLED TIMER_ENABLED TIMER0_ENABLED NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME FABO_109_AMBIENT_LIGHT #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" NRF_LOG_MODULE_REGISTER (); #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; void * __stop_pwr_mgmt_data ; void map ( const int * source , int * result , size_t n , int ( * func )( int )); static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void map ( const int * source , int * result , size_t n , int ( * func )( int )) { unsigned int i ; for ( i = 0 ; i < n ; i ++ ) { result [ i ] = func ( source [ i ]); } } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double voltage = ( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ; NRF_LOG_INFO ( \"Voltage=\" NRF_LOG_FLOAT_MARKER \"mV\" , NRF_LOG_FLOAT ( voltage )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); APP_ERROR_CHECK ( nrf_drv_saadc_init ( NULL , saadc_callback )); APP_ERROR_CHECK ( nrf_drv_saadc_channel_init ( 0 , & channel_config )); APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER )); APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER )); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"FABO 109 Ambient Light Brick\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"109 AmbientLinght Brick"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#109-ambientlinght-brick","text":"","title":"#109 AmbientLinght Brick"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#overview","text":"","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_SAADC_ENABLED SAADC_ENABLED NRFX_PPI_ENABLED PPI_ENABLED NRFX_POWER_ENABLED POWER_ENABLED NRFX_TIMER_ENABLED NRFX_TIMER0_ENABLED TIMER_ENABLED TIMER0_ENABLED NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/109_brick_analog_ambientlinght/#sample-code","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME FABO_109_AMBIENT_LIGHT #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" NRF_LOG_MODULE_REGISTER (); #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; void * __stop_pwr_mgmt_data ; void map ( const int * source , int * result , size_t n , int ( * func )( int )); static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void map ( const int * source , int * result , size_t n , int ( * func )( int )) { unsigned int i ; for ( i = 0 ; i < n ; i ++ ) { result [ i ] = func ( source [ i ]); } } void saadc_sampling_event_init ( void ) { ret_code_t err_code ; err_code = nrf_drv_ppi_init (); APP_ERROR_CHECK ( err_code ); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; err_code = nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler ); APP_ERROR_CHECK ( err_code ); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ err_code = nrf_drv_ppi_channel_alloc ( & m_ppi_channel ); APP_ERROR_CHECK ( err_code ); err_code = nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr ); APP_ERROR_CHECK ( err_code ); } void saadc_sampling_event_enable ( void ) { ret_code_t err_code = nrf_drv_ppi_channel_enable ( m_ppi_channel ); APP_ERROR_CHECK ( err_code ); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { ret_code_t err_code ; err_code = nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER ); APP_ERROR_CHECK ( err_code ); int i ; NRF_LOG_INFO ( \"ADC event number: %d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double voltage = ( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ; NRF_LOG_INFO ( \"Voltage=\" NRF_LOG_FLOAT_MARKER \"mV\" , NRF_LOG_FLOAT ( voltage )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); APP_ERROR_CHECK ( nrf_drv_saadc_init ( NULL , saadc_callback )); APP_ERROR_CHECK ( nrf_drv_saadc_channel_init ( 0 , & channel_config )); APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER )); APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER )); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"FABO 109 Ambient Light Brick\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/","text":"#110 Tilt Brick Overview \u50be\u659c\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u50be\u659c\u30bb\u30f3\u30b5\u30fc\u306e\u72b6\u614b\u3092\u30c7\u30b8\u30bf\u30eb\u5024(0\u301c1)\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u9ed2\u3044\u90e8\u5206\u306e\u4e2d\u306b\u7389\u304c\u5165\u3063\u3066\u3044\u3066\u50be\u304f\u3068\u30c7\u30b8\u30bf\u30eb\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 LED Brick\u3092\u70b9\u706f/\u6d88\u706f\u3055\u305b\u308b\u969b\u306a\u3069\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 Connecting Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME FABO_110_TILT #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define FaBo_Shinobi_ANALOGPIN 3 nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( BSP_LED_0 ); nrf_gpio_pin_clear ( BSP_LED_0 ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); gpio_init (); while ( true ) { uint32_t TILT_PIN = 0 ; TILT_PIN = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( TILT_PIN == 1 ) { nrf_gpio_pin_set ( BSP_LED_0 ); NRF_LOG_INFO ( \"Detect Slope.\" ); NRF_LOG_FLUSH (); } else { nrf_gpio_pin_clear ( BSP_LED_0 ); } } } \u69cb\u6210Parts \u50be\u659c(\u632f\u52d5)\u30b9\u30a4\u30c3\u30c1 GitHub","title":"110 Tilt Brick"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#110-tilt-brick","text":"","title":"#110 Tilt Brick"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#overview","text":"\u50be\u659c\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u50be\u659c\u30bb\u30f3\u30b5\u30fc\u306e\u72b6\u614b\u3092\u30c7\u30b8\u30bf\u30eb\u5024(0\u301c1)\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u9ed2\u3044\u90e8\u5206\u306e\u4e2d\u306b\u7389\u304c\u5165\u3063\u3066\u3044\u3066\u50be\u304f\u3068\u30c7\u30b8\u30bf\u30eb\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002 LED Brick\u3092\u70b9\u706f/\u6d88\u706f\u3055\u305b\u308b\u969b\u306a\u3069\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#sample-code","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME FABO_110_TILT #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define FaBo_Shinobi_ANALOGPIN 3 nrf_log_module_const_data_t * __start_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_const_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( BSP_LED_0 ); nrf_gpio_pin_clear ( BSP_LED_0 ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); gpio_init (); while ( true ) { uint32_t TILT_PIN = 0 ; TILT_PIN = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( TILT_PIN == 1 ) { nrf_gpio_pin_set ( BSP_LED_0 ); NRF_LOG_INFO ( \"Detect Slope.\" ); NRF_LOG_FLUSH (); } else { nrf_gpio_pin_clear ( BSP_LED_0 ); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#parts","text":"\u50be\u659c(\u632f\u52d5)\u30b9\u30a4\u30c3\u30c1","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/110_brick_analog_tilt/#github","text":"","title":"GitHub"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/","text":"#121 IR_LED Brick Overview Connecting Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME FABO_121_IR_LED #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define FaBo_Shinobi_ANALOGPIN 16 #define FaBo_Shinobi_BUTTONPIN 3 nrf_log_module_const_data_t * __start_log_const_data ; void * __stop_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLUP , NRF_GPIO_PIN_SENSE_LOW ); nrf_gpio_cfg_output ( FaBo_Shinobi_BUTTONPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_BUTTONPIN ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); NRF_LOG_INFO ( \"FaBo_Shinobi_IR_LED SAMPLE.\" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_clear ( FaBo_Shinobi_BUTTONPIN ); } else { nrf_gpio_pin_set ( FaBo_Shinobi_BUTTONPIN ); NRF_LOG_INFO ( \"Button pressed Emission.: %d\" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } } } \u69cb\u6210Parts","title":"121 IR_LED Brick"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#121-ir_led-brick","text":"","title":"#121 IR_LED Brick"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#overview","text":"","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#sample-code","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME FABO_121_IR_LED #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define FaBo_Shinobi_ANALOGPIN 16 #define FaBo_Shinobi_BUTTONPIN 3 nrf_log_module_const_data_t * __start_log_const_data ; void * __stop_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLUP , NRF_GPIO_PIN_SENSE_LOW ); nrf_gpio_cfg_output ( FaBo_Shinobi_BUTTONPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_BUTTONPIN ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); NRF_LOG_INFO ( \"FaBo_Shinobi_IR_LED SAMPLE.\" ); NRF_LOG_FLUSH (); gpio_init (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_clear ( FaBo_Shinobi_BUTTONPIN ); } else { nrf_gpio_pin_set ( FaBo_Shinobi_BUTTONPIN ); NRF_LOG_INFO ( \"Button pressed Emission.: %d\" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/112_brick_analog_ir_led/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/","text":"#113 IR_RECEVER Brick Overview Connecting Schematic User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/external/fprintf ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME FABO_113_IR_RECEIVER #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 nrf_log_module_const_data_t * __start_log_const_data ; void * __stop_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); gpio_init (); NRF_LOG_INFO ( \"FaBo_Shinobi_IR_RECEVIER SAMPLE.\" ); NRF_LOG_FLUSH (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"IR_Received! push time:%d\" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } } \u52d5\u4f5c\u78ba\u8a8d Fabo IR_LED\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"113 IR_RECEVER Brick"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#113-ir_recever-brick","text":"","title":"#113 IR_RECEVER Brick"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#overview","text":"","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#schematic","text":"","title":"Schematic"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/external/fprintf ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/components/libraries/button ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/libraries/bsp ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER ExternalISR7 ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#sample-code","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <stdbool.h> #include <stdint.h> #include \"nrf.h\" #include \"bsp.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #define NRF_LOG_MODULE_NAME FABO_113_IR_RECEIVER #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define FaBo_Shinobi_ANALOGPIN 3 #define FaBo_Shinobi_LEDPIN 18 nrf_log_module_const_data_t * __start_log_const_data ; void * __stop_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_dynamic_data ; static void gpio_init ( void ) { nrf_gpio_cfg_sense_input ( FaBo_Shinobi_ANALOGPIN , NRF_GPIO_PIN_PULLDOWN , NRF_GPIO_PIN_SENSE_HIGH ); nrf_gpio_cfg_output ( FaBo_Shinobi_LEDPIN ); nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); gpio_init (); NRF_LOG_INFO ( \"FaBo_Shinobi_IR_RECEVIER SAMPLE.\" ); NRF_LOG_FLUSH (); while ( true ) { uint32_t BUTTON_SWITCH = 0 ; static uint32_t push_time = 0 ; BUTTON_SWITCH = nrf_gpio_pin_read ( FaBo_Shinobi_ANALOGPIN ); if ( BUTTON_SWITCH == 1 ) { nrf_gpio_pin_set ( FaBo_Shinobi_LEDPIN ); NRF_LOG_INFO ( \"IR_Received! push time:%d\" , push_time ); NRF_LOG_FLUSH (); push_time ++ ; } else { nrf_gpio_pin_clear ( FaBo_Shinobi_LEDPIN ); } } }","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/113_brick_analog_IR_receiver/#_1","text":"Fabo IR_LED\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"\u52d5\u4f5c\u78ba\u8a8d"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/","text":"#116 Distance Brick Overview \u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u306e\u6b63\u9762\u306b\u3064\u3044\u3066\u3044\u308b\u30ec\u30f3\u30ba\u304b\u3089\u7269\u4f53\u307e\u3067\u306e\u8ddd\u96e2\u3092\u30a2\u30ca\u30ed\u30b0\u5024(0\u301c1023)\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6e2c\u5b9a\u53ef\u80fd\u306a\u8ddd\u96e2\u306f10\u301c80cm\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 Connecting GP2Y0A21YK Datasheet Document GP2Y0A21YK Datasheet User Include Directories Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk . Preprocessor Definitions Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_SAADC_ENABLED SAADC_ENABLED NRFX_PPI_ENABLED PPI_ENABLED NRFX_POWER_ENABLED POWER_ENABLED NRFX_TIMER0_ENABLED TIMER0_ENABLED NRFX_TIMER_ENABLED TIMER_ENABLED NRF52832_XXAB BOARD_CUSTOM SDK File Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src Section SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; : IRQHandler Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10 Sample Code main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME FABO_116_DISTANCE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; nrf_log_module_const_data_t * __start_log_const_data ; void * __stop_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_pwr_mgmt_data ; void map ( const int * source , int * result , size_t n , int ( * func )( int )); static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void map ( const int * source , int * result , size_t n , int ( * func )( int )) { unsigned int i ; for ( i = 0 ; i < n ; i ++ ) { result [ i ] = func ( source [ i ]); } } void saadc_sampling_event_init ( void ) { APP_ERROR_CHECK ( nrf_drv_ppi_init ()); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; APP_ERROR_CHECK ( nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler )); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ APP_ERROR_CHECK ( nrf_drv_ppi_channel_alloc ( & m_ppi_channel )); APP_ERROR_CHECK ( nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr )); } void saadc_sampling_event_enable ( void ) { APP_ERROR_CHECK ( nrf_drv_ppi_channel_enable ( m_ppi_channel )); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER )); int i ; NRF_LOG_INFO ( \"ADC event number:%d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double voltage = ( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ; double distance = 80 - (( 70.0 / 2700.0 ) * voltage ); NRF_LOG_INFO ( \"DISTANCE=\" NRF_LOG_FLOAT_MARKER \"cm\" , NRF_LOG_FLOAT ( distance )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); APP_ERROR_CHECK ( nrf_drv_saadc_init ( NULL , saadc_callback )); APP_ERROR_CHECK ( nrf_drv_saadc_channel_init ( 0 , & channel_config )); APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER )); APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER )); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"Fabo Shinobi Distance 116 Brick\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } TeraTerm\u3092\u8d77\u52d5\u3057\u78ba\u8a8d\u3057\u307e\u3059\u3002\u30ea\u30bb\u30c3\u30c8\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u8d77\u52d5\u3057\u307e\u3059\u3002 \u69cb\u6210Parts \u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb GP2Y0A21YK GitHub","title":"116 Distance Brick"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#116-distance-brick","text":"","title":"#116 Distance Brick"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#overview","text":"\u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I/O\u30d4\u30f3\u3088\u308a\u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u306e\u6b63\u9762\u306b\u3064\u3044\u3066\u3044\u308b\u30ec\u30f3\u30ba\u304b\u3089\u7269\u4f53\u307e\u3067\u306e\u8ddd\u96e2\u3092\u30a2\u30ca\u30ed\u30b0\u5024(0\u301c1023)\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6e2c\u5b9a\u53ef\u80fd\u306a\u8ddd\u96e2\u306f10\u301c80cm\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002","title":"Overview"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#connecting","text":"","title":"Connecting"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#gp2y0a21yk-datasheet","text":"Document GP2Y0A21YK Datasheet","title":"GP2Y0A21YK Datasheet"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#user-include-directories","text":"Solution Option -> Preprocessor -> User Include Directories\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) Path ../nRF5_SDK/modules/nrfx/drivers/src ../nRF5_SDK/modules/nrfx/drivers/src/prs ../nRF5_SDK/components/libraries/mutex ../nRF5_SDK/components/libraries/atomic ../nRF5_SDK/components/libraries/ringbuf ../nRF5_SDK/external/fprintf ../nRF5_SDK/components/libraries/balloc ../nRF5_SDK/components/libraries/memobj ../nRF5_SDK/components/libraries/log/src ../nRF5_SDK/components/libraries/strerror ../nRF5_SDK/components/libraries/log ../nRF5_SDK/components/libraries/experimental_section_vars ../nRF5_SDK/components/libraries/pwr_mgmt ../nRF5_SDK/components/libraries/delay ../nRF5_SDK/modules/nrfx/hal ../nRF5_SDK/components/boards ../nRF5_SDK/components/drivers_nrf/nrf_soc_nosd ../nRF5_SDK/components/libraries/util ../nRF5_SDK/integration/nrfx ../nRF5_SDK/modules/nrfx ../nRF5_SDK/modules/nrfx/drivers/include ../nRF5_SDK/integration/nrfx/legacy ../nRF5_SDK/components/toolchain/cmsis/include ../nRF5_SDK/modules/nrfx/mdk .","title":"User Include Directories"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#preprocessor-definitions","text":"Solution Option -> Preprocessor -> Preprocessor Definitions\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\u3002 COPT NRFX_SAADC_ENABLED SAADC_ENABLED NRFX_PPI_ENABLED PPI_ENABLED NRFX_POWER_ENABLED POWER_ENABLED NRFX_TIMER0_ENABLED TIMER0_ENABLED NRFX_TIMER_ENABLED TIMER_ENABLED NRF52832_XXAB BOARD_CUSTOM","title":"Preprocessor Definitions"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#sdk-file","text":"Project\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3002(../nRF5_SDK\u306e\u90e8\u5206\u306f\u9069\u5b9c\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002) File Path app_error.c ../nRF5_SDK/components/libraries/util app_error_handler_gcc.c ../nRF5_SDK/components/libraries/util app_error_weak.c ../nRF5_SDK/components/libraries/util app_util_platform.c ../nRF5_SDK/components/libraries/util nrf_atomic.c ../nRF5_SDK/components/libraries/atomic nrf_balloc.c ../nRF5_SDK/components/libraries/balloc nrf_drv_power.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_ppi.c ../nRF5_SDK/integration/nrfx/legacy nrf_drv_uart.c ../nRF5_SDK/integration/nrfx/legacy nrf_fprintf.c ../nRF5_SDK/external/fprintf nrf_fprintf_format.c ../nRF5_SDK/external/fprintf nrf_log_backend_serial.c ../nRF5_SDK/components/libraries/log/src nrf_log_backend_uart.c ../nRF5_SDK/components/libraries/log/src nrf_log_default_backends.c ../nRF5_SDK/components/libraries/log/src nrf_log_frontend.c ../nRF5_SDK/components/libraries/log/src nrf_log_str_formatter.c ../nRF5_SDK/components/libraries/log/src nrf_memobj.c ../nRF5_SDK/components/libraries/memobj nrf_pwr_mgmt.c ../nRF5_SDK/components/libraries/pwr_mgmt nrf_ringbuf.c ../nRF5_SDK/components/libraries/ringbuf nrf_section_iter.c ../nRF5_SDK/components/libraries/experimental_section_vars nrf_strerror.c ../nRF5_SDK/components/libraries/strerror nrfx_power.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_ppi.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_prs.c ../nRF5_SDK/modules/nrfx/drivers/src/prs nrfx_saadc.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_timer.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uart.c ../nRF5_SDK/modules/nrfx/drivers/src nrfx_uarte.c ../nRF5_SDK/modules/nrfx/drivers/src","title":"SDK File"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#section","text":"SEGGER_Flash.icf\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(SEGGER_Flash.icf\u306fProject\u914d\u4e0b\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 : define block log_const_data_start with size = 8 { symbol __start_log_const_data }; define block log_const_data_list { section . log_const_data * }; define block log_const_data_stop with size = 8 { symbol __stop_log_const_data }; define block log_const_data with fixed order { block log_const_data_start , block log_const_data_list , block log_const_data_stop }; : place in FLASH { block tdata_load , // Thread-local-storage load image section . log_backends , section . nrf_balloc , block log_const_data }; :","title":"Section"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#irqhandler","text":"Cortex_M_Startup.s\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u3002(\u9577\u3044\u306e\u3067\u629c\u7c8b) 1 2 3 4 5 6 7 8 9 10 11 ISR_HANDLER ExternalISR0 ISR_HANDLER ExternalISR1 ISR_HANDLER UARTE0_UART0_IRQHandler ISR_HANDLER ExternalISR3 ISR_HANDLER ExternalISR4 ISR_HANDLER ExternalISR5 ISR_HANDLER ExternalISR6 ISR_HANDLER SAADC_IRQHandler ISR_HANDLER ExternalISR8 ISR_HANDLER ExternalISR9 ISR_HANDLER ExternalISR10","title":"IRQHandler"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#sample-code","text":"main.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 #include <stdbool.h> #include <stdint.h> #include <stdio.h> #include <string.h> #include \"nrf.h\" #include \"nrf_drv_saadc.h\" #include \"nrf_drv_ppi.h\" #include \"nrf_drv_timer.h\" #include \"boards.h\" #include \"app_error.h\" #include \"nrf_delay.h\" #include \"app_util_platform.h\" #include \"nrf_pwr_mgmt.h\" #include \"nrf_drv_power.h\" #define NRF_LOG_MODULE_NAME FABO_116_DISTANCE #include \"nrf_log.h\" NRF_LOG_MODULE_REGISTER (); #include \"nrf_log_ctrl.h\" #include \"nrf_log_default_backends.h\" #define SAMPLES_IN_BUFFER 10 volatile uint8_t state = 1 ; nrf_log_module_const_data_t * __start_log_const_data ; void * __stop_log_const_data ; nrf_log_module_dynamic_data_t * __start_log_dynamic_data ; void * __stop_log_dynamic_data ; void * __start_pwr_mgmt_data ; void * __stop_pwr_mgmt_data ; void map ( const int * source , int * result , size_t n , int ( * func )( int )); static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE ( 0 ); static nrf_saadc_value_t m_buffer_pool [ 2 ][ SAMPLES_IN_BUFFER ]; static nrf_ppi_channel_t m_ppi_channel ; static uint32_t m_adc_evt_counter ; void timer_handler ( nrf_timer_event_t event_type , void * p_context ) { } void map ( const int * source , int * result , size_t n , int ( * func )( int )) { unsigned int i ; for ( i = 0 ; i < n ; i ++ ) { result [ i ] = func ( source [ i ]); } } void saadc_sampling_event_init ( void ) { APP_ERROR_CHECK ( nrf_drv_ppi_init ()); nrf_drv_timer_config_t timer_cfg = NRF_DRV_TIMER_DEFAULT_CONFIG ; timer_cfg . bit_width = NRF_TIMER_BIT_WIDTH_32 ; APP_ERROR_CHECK ( nrf_drv_timer_init ( & m_timer , & timer_cfg , timer_handler )); uint32_t ticks = nrf_drv_timer_ms_to_ticks ( & m_timer , 100 ); nrf_drv_timer_extended_compare ( & m_timer , NRF_TIMER_CC_CHANNEL0 , ticks , NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK , false ); nrf_drv_timer_enable ( & m_timer ); uint32_t timer_compare_event_addr = nrf_drv_timer_compare_event_address_get ( & m_timer , NRF_TIMER_CC_CHANNEL0 ); uint32_t saadc_sample_task_addr = nrf_drv_saadc_sample_task_get (); /* setup ppi channel so that timer compare event is triggering sample task in SAADC */ APP_ERROR_CHECK ( nrf_drv_ppi_channel_alloc ( & m_ppi_channel )); APP_ERROR_CHECK ( nrf_drv_ppi_channel_assign ( m_ppi_channel , timer_compare_event_addr , saadc_sample_task_addr )); } void saadc_sampling_event_enable ( void ) { APP_ERROR_CHECK ( nrf_drv_ppi_channel_enable ( m_ppi_channel )); } void saadc_callback ( nrf_drv_saadc_evt_t const * p_event ) { if ( p_event -> type == NRF_DRV_SAADC_EVT_DONE ) { APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( p_event -> data . done . p_buffer , SAMPLES_IN_BUFFER )); int i ; NRF_LOG_INFO ( \"ADC event number:%d\" , ( int ) m_adc_evt_counter ); for ( i = 0 ; i < SAMPLES_IN_BUFFER ; i ++ ) { double voltage = ( p_event -> data . done . p_buffer [ i ] / 1024.0 ) * 3300.0 ; double distance = 80 - (( 70.0 / 2700.0 ) * voltage ); NRF_LOG_INFO ( \"DISTANCE=\" NRF_LOG_FLOAT_MARKER \"cm\" , NRF_LOG_FLOAT ( distance )); } m_adc_evt_counter ++ ; } } void saadc_init ( void ) { nrf_saadc_channel_config_t channel_config = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE ( NRF_SAADC_INPUT_AIN1 ); APP_ERROR_CHECK ( nrf_drv_saadc_init ( NULL , saadc_callback )); APP_ERROR_CHECK ( nrf_drv_saadc_channel_init ( 0 , & channel_config )); APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 0 ], SAMPLES_IN_BUFFER )); APP_ERROR_CHECK ( nrf_drv_saadc_buffer_convert ( m_buffer_pool [ 1 ], SAMPLES_IN_BUFFER )); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_DEFAULT_BACKENDS_INIT (); APP_ERROR_CHECK ( nrf_drv_power_init ( NULL )); APP_ERROR_CHECK ( nrf_pwr_mgmt_init ()); NRF_LOG_INFO ( \"Fabo Shinobi Distance 116 Brick\" ); saadc_init (); saadc_sampling_event_init (); saadc_sampling_event_enable (); while ( 1 ) { nrf_pwr_mgmt_run (); NRF_LOG_FLUSH (); } } TeraTerm\u3092\u8d77\u52d5\u3057\u78ba\u8a8d\u3057\u307e\u3059\u3002\u30ea\u30bb\u30c3\u30c8\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u8d77\u52d5\u3057\u307e\u3059\u3002","title":"Sample Code"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#parts","text":"\u8ddd\u96e2\u30bb\u30f3\u30b5\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb GP2Y0A21YK","title":"\u69cb\u6210Parts"},{"location":"7.FaBoBrick(ANA)/ses/116_brick_analog_distance/#github","text":"","title":"GitHub"},{"location":"8.FaBoBrick(I2C)/201_brick_i2c_3Aix/","text":"#201 3Aixs I2C Brick Overview Connecting Shinobi\u3068Fabo 3Axis\u3092\u63a5\u7d9a\u3002 \u5fc5\u8981\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30cinclude <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"FaBo_210_3Aix\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define ADXL345_SLAVE_ADDRESS 0x53 #define ADXL345_DEVID_REG 0x00 #define ADXL345_DEVICE 0xe5 #define ADXL345_THRESH_TAP_REG 0x1D #define ADXL345_DUR_REG 0x21 #define ADXL345_LATENT_REG 0x22 #define ADXL345_WINDOW_REG 0x23 #define ADXL345_INT_MAP_REG 0x2F #define ADXL345_INT_ENABLE_REG 0x2E #define ADXL345_POWER_CTL_REG 0x2D #define ADXL345_TAP_STATUS_REG 0x2B #define ADXL345_TAP_AXES_REG 0x2A #define ADXL345_INT_SOURCE_REG 0x30 #define ADXL345_DATA_FORMAT_REG 0x31 #define ADXL345_SELF_TEST_ON 0x80 #define ADXL345_SELF_TEST_OFF 0x00 #define ADXL345_SPI_ON 0x40 #define ADXL345_SPI_OFF 0x00 #define ADXL345_INT_INVERT_ON 0x20 #define ADXL345_INT_INVERT_OFF 0x00 #define ADXL345_FULL_RES_ON 0x08 #define ADXL345_FULL_RES_OFF 0x00 #define ADXL345_JUSTIFY_ON 0x04 #define ADXL345_JUSTIFY_OFF 0x00 #define ADXL345_TAP_AXES_Z_ON 0x01 #define ADXL345_TAP_AXES_Y_ON 0x02 #define ADXL345_TAP_AXES_X_ON 0x04 #define ADXL345_INT_SINGLE_TAP 0x40 #define ADXL345_INT_DOUBLE_TAP 0x20 #define ADXL345_RANGE_2G 0x00 #define ADXL345_RANGE_4G 0x01 #define ADXL345_RANGE_8G 0x02 #define ADXL345_RANGE_16G 0x03 #define ADXL345_AUTO_SLEEP_ON 0x10 #define ADXL345_AUTO_SLEEP_OFF 0x00 #define ADXL345_MEASURE_ON 0x08 #define ADXL345_MEASURE_OFF 0x00 #define ADXL345_SLEEP_ON 0x04 #define ADXL345_SLEEP_OFF 0x00 #define ADXL345_WAKEUP_8HZ 0x00 #define ADXL345_WAKEUP_4HZ 0x01 #define ADXL345_WAKEUP_2HZ 0x02 #define ADXL345_WAKEUP_1HZ 0x03 void writeI2c ( uint8_t register_addr , uint8_t value ); static volatile bool m_xfer_done = false ; static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); static uint8_t m_sample [ 6 ]; void read_sensor_data ( void ); void configuration ( void ) { NRF_LOG_INFO ( \"configuration \\r\\n \" ); uint8_t conf = ADXL345_SELF_TEST_OFF ; conf |= ADXL345_SPI_OFF ; conf |= ADXL345_INT_INVERT_OFF ; conf |= ADXL345_FULL_RES_OFF ; conf |= ADXL345_JUSTIFY_OFF ; conf |= ADXL345_RANGE_16G ; writeI2c ( ADXL345_DATA_FORMAT_REG , conf ); } bool searchDevice () { NRF_LOG_INFO ( \"searchDevice \\r\\n \" ); uint8_t device = 0x00 ; writeI2c ( ADXL345_DEVID_REG , 1 ); //readI2c(ADXL345_DEVID_REG, 1, &device); if ( device == ADXL345_DEVICE ){ return true ; } else { return false ; } } static void powerOn () { NRF_LOG_INFO ( \"powerOn \\r\\n \" ); uint8_t power = ADXL345_AUTO_SLEEP_OFF ; power |= ADXL345_MEASURE_ON ; power |= ADXL345_SLEEP_OFF ; power |= ADXL345_WAKEUP_8HZ ; writeI2c ( ADXL345_POWER_CTL_REG , power ); } uint8_t readIntStatus () { uint8_t buff ; //readI2c(ADXL345_INT_SOURCE_REG, 1, &buff); return buff ; } void enableTap () { writeI2c ( ADXL345_THRESH_TAP_REG , 0x32 ); // 62.5mg/LBS writeI2c ( ADXL345_DUR_REG , 0x0f ); // 1.25ms/LSB writeI2c ( ADXL345_LATENT_REG , 0x78 ); // 1.25ms/LSB writeI2c ( ADXL345_WINDOW_REG , 0xcb ); // 1.25ms/LSB uint8_t int_tap = ADXL345_INT_SINGLE_TAP | ADXL345_INT_DOUBLE_TAP ; writeI2c ( ADXL345_INT_ENABLE_REG , int_tap ); writeI2c ( ADXL345_TAP_AXES_REG , ADXL345_TAP_AXES_Z_ON ); } bool isSingleTap ( uint8_t value ) { if (( value & 0x40 ) == 0x40 ){ return true ; } else { return false ; } } bool isDoubleTap ( uint8_t value ) { if (( value & 0x20 ) == 0x20 ){ return true ; } else { return false ; } } __STATIC_INLINE void data_handler ( uint8_t * axis_buff ) { NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 0 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 1 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 2 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 3 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 4 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 5 ]); int16_t x = ((( int ) axis_buff [ 0 ]) << 8 ) | axis_buff [ 1 ]; int16_t y = ((( int ) axis_buff [ 2 ]) << 8 ) | axis_buff [ 3 ]; int16_t z = ((( int ) axis_buff [ 4 ]) << 8 ) | axis_buff [ 5 ]; NRF_LOG_INFO ( \"x= %d y= %d z= %d \\r\\n \" , x , y , z ); if ( axis_buff [ 0 ] == ADXL345_DEVICE ){ NRF_LOG_INFO ( \"I am ADXL345 \\n\\r \" ); } } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_RX ) { data_handler ( m_sample ); } m_xfer_done = true ; break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_lm75b_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_lm75b_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } static void read_sensor_data () { m_xfer_done = false ; ret_code_t err_code = nrf_drv_twi_rx ( & m_twi , ADXL345_SLAVE_ADDRESS , m_sample , sizeof ( m_sample )); APP_ERROR_CHECK ( err_code ); } void writeI2c ( uint8_t register_addr , uint8_t value ) { uint32_t err_code ; uint8_t reg [ 2 ] = { register_addr , value }; err_code = nrf_drv_twi_tx ( & m_twi , ADXL345_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); while ( m_xfer_done == false ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \"FaBo_3AiX_201 Sample \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); searchDevice (); nrf_delay_ms ( 10 ); read_sensor_data (); NRF_LOG_INFO ( \"Init. \\r\\n \" ); nrf_delay_ms ( 10 ); configuration (); nrf_delay_ms ( 10 ); powerOn (); nrf_delay_ms ( 10 ); while ( 1 ){ uint8_t reg [ 2 ] = { 0x32 , 6 }; nrf_drv_twi_tx ( & m_twi , ADXL345_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); nrf_delay_ms ( 10 ); read_sensor_data (); nrf_delay_ms ( 1000 ); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts - GitHub","title":"201 3Aixs I2C Brick"},{"location":"8.FaBoBrick(I2C)/201_brick_i2c_3Aix/#201-3aixs-i2c-brick","text":"","title":"#201 3Aixs I2C Brick"},{"location":"8.FaBoBrick(I2C)/201_brick_i2c_3Aix/#overview","text":"","title":"Overview"},{"location":"8.FaBoBrick(I2C)/201_brick_i2c_3Aix/#connecting","text":"Shinobi\u3068Fabo 3Axis\u3092\u63a5\u7d9a\u3002","title":"Connecting"},{"location":"8.FaBoBrick(I2C)/201_brick_i2c_3Aix/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"FaBo_210_3Aix\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define ADXL345_SLAVE_ADDRESS 0x53 #define ADXL345_DEVID_REG 0x00 #define ADXL345_DEVICE 0xe5 #define ADXL345_THRESH_TAP_REG 0x1D #define ADXL345_DUR_REG 0x21 #define ADXL345_LATENT_REG 0x22 #define ADXL345_WINDOW_REG 0x23 #define ADXL345_INT_MAP_REG 0x2F #define ADXL345_INT_ENABLE_REG 0x2E #define ADXL345_POWER_CTL_REG 0x2D #define ADXL345_TAP_STATUS_REG 0x2B #define ADXL345_TAP_AXES_REG 0x2A #define ADXL345_INT_SOURCE_REG 0x30 #define ADXL345_DATA_FORMAT_REG 0x31 #define ADXL345_SELF_TEST_ON 0x80 #define ADXL345_SELF_TEST_OFF 0x00 #define ADXL345_SPI_ON 0x40 #define ADXL345_SPI_OFF 0x00 #define ADXL345_INT_INVERT_ON 0x20 #define ADXL345_INT_INVERT_OFF 0x00 #define ADXL345_FULL_RES_ON 0x08 #define ADXL345_FULL_RES_OFF 0x00 #define ADXL345_JUSTIFY_ON 0x04 #define ADXL345_JUSTIFY_OFF 0x00 #define ADXL345_TAP_AXES_Z_ON 0x01 #define ADXL345_TAP_AXES_Y_ON 0x02 #define ADXL345_TAP_AXES_X_ON 0x04 #define ADXL345_INT_SINGLE_TAP 0x40 #define ADXL345_INT_DOUBLE_TAP 0x20 #define ADXL345_RANGE_2G 0x00 #define ADXL345_RANGE_4G 0x01 #define ADXL345_RANGE_8G 0x02 #define ADXL345_RANGE_16G 0x03 #define ADXL345_AUTO_SLEEP_ON 0x10 #define ADXL345_AUTO_SLEEP_OFF 0x00 #define ADXL345_MEASURE_ON 0x08 #define ADXL345_MEASURE_OFF 0x00 #define ADXL345_SLEEP_ON 0x04 #define ADXL345_SLEEP_OFF 0x00 #define ADXL345_WAKEUP_8HZ 0x00 #define ADXL345_WAKEUP_4HZ 0x01 #define ADXL345_WAKEUP_2HZ 0x02 #define ADXL345_WAKEUP_1HZ 0x03 void writeI2c ( uint8_t register_addr , uint8_t value ); static volatile bool m_xfer_done = false ; static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); static uint8_t m_sample [ 6 ]; void read_sensor_data ( void ); void configuration ( void ) { NRF_LOG_INFO ( \"configuration \\r\\n \" ); uint8_t conf = ADXL345_SELF_TEST_OFF ; conf |= ADXL345_SPI_OFF ; conf |= ADXL345_INT_INVERT_OFF ; conf |= ADXL345_FULL_RES_OFF ; conf |= ADXL345_JUSTIFY_OFF ; conf |= ADXL345_RANGE_16G ; writeI2c ( ADXL345_DATA_FORMAT_REG , conf ); } bool searchDevice () { NRF_LOG_INFO ( \"searchDevice \\r\\n \" ); uint8_t device = 0x00 ; writeI2c ( ADXL345_DEVID_REG , 1 ); //readI2c(ADXL345_DEVID_REG, 1, &device); if ( device == ADXL345_DEVICE ){ return true ; } else { return false ; } } static void powerOn () { NRF_LOG_INFO ( \"powerOn \\r\\n \" ); uint8_t power = ADXL345_AUTO_SLEEP_OFF ; power |= ADXL345_MEASURE_ON ; power |= ADXL345_SLEEP_OFF ; power |= ADXL345_WAKEUP_8HZ ; writeI2c ( ADXL345_POWER_CTL_REG , power ); } uint8_t readIntStatus () { uint8_t buff ; //readI2c(ADXL345_INT_SOURCE_REG, 1, &buff); return buff ; } void enableTap () { writeI2c ( ADXL345_THRESH_TAP_REG , 0x32 ); // 62.5mg/LBS writeI2c ( ADXL345_DUR_REG , 0x0f ); // 1.25ms/LSB writeI2c ( ADXL345_LATENT_REG , 0x78 ); // 1.25ms/LSB writeI2c ( ADXL345_WINDOW_REG , 0xcb ); // 1.25ms/LSB uint8_t int_tap = ADXL345_INT_SINGLE_TAP | ADXL345_INT_DOUBLE_TAP ; writeI2c ( ADXL345_INT_ENABLE_REG , int_tap ); writeI2c ( ADXL345_TAP_AXES_REG , ADXL345_TAP_AXES_Z_ON ); } bool isSingleTap ( uint8_t value ) { if (( value & 0x40 ) == 0x40 ){ return true ; } else { return false ; } } bool isDoubleTap ( uint8_t value ) { if (( value & 0x20 ) == 0x20 ){ return true ; } else { return false ; } } __STATIC_INLINE void data_handler ( uint8_t * axis_buff ) { NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 0 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 1 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 2 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 3 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 4 ]); NRF_LOG_INFO ( \"Device=%x \\n\\r \" , axis_buff [ 5 ]); int16_t x = ((( int ) axis_buff [ 0 ]) << 8 ) | axis_buff [ 1 ]; int16_t y = ((( int ) axis_buff [ 2 ]) << 8 ) | axis_buff [ 3 ]; int16_t z = ((( int ) axis_buff [ 4 ]) << 8 ) | axis_buff [ 5 ]; NRF_LOG_INFO ( \"x= %d y= %d z= %d \\r\\n \" , x , y , z ); if ( axis_buff [ 0 ] == ADXL345_DEVICE ){ NRF_LOG_INFO ( \"I am ADXL345 \\n\\r \" ); } } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_RX ) { data_handler ( m_sample ); } m_xfer_done = true ; break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_lm75b_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_lm75b_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } static void read_sensor_data () { m_xfer_done = false ; ret_code_t err_code = nrf_drv_twi_rx ( & m_twi , ADXL345_SLAVE_ADDRESS , m_sample , sizeof ( m_sample )); APP_ERROR_CHECK ( err_code ); } void writeI2c ( uint8_t register_addr , uint8_t value ) { uint32_t err_code ; uint8_t reg [ 2 ] = { register_addr , value }; err_code = nrf_drv_twi_tx ( & m_twi , ADXL345_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); while ( m_xfer_done == false ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \"FaBo_3AiX_201 Sample \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); searchDevice (); nrf_delay_ms ( 10 ); read_sensor_data (); NRF_LOG_INFO ( \"Init. \\r\\n \" ); nrf_delay_ms ( 10 ); configuration (); nrf_delay_ms ( 10 ); powerOn (); nrf_delay_ms ( 10 ); while ( 1 ){ uint8_t reg [ 2 ] = { 0x32 , 6 }; nrf_drv_twi_tx ( & m_twi , ADXL345_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); nrf_delay_ms ( 10 ); read_sensor_data (); nrf_delay_ms ( 1000 ); NRF_LOG_FLUSH (); } }","title":"\u5fc5\u8981\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"},{"location":"8.FaBoBrick(I2C)/201_brick_i2c_3Aix/#parts","text":"-","title":"\u69cb\u6210Parts"},{"location":"8.FaBoBrick(I2C)/201_brick_i2c_3Aix/#github","text":"","title":"GitHub"},{"location":"8.FaBoBrick(I2C)/202_brick_i2c_9Aix/","text":"#202 9Aixs I2C Brick Overview Connecting Shinobi\u3068Fabo 9Axis\u3092\u63a5\u7d9a\u3002 \u5fc5\u8981\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u4ee5\u4e0b\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u304a\u3088\u3073\u9078\u629e\u3057\u307e\u3059\u3002 Board Support --> bsp Define\u306b\u8a2d\u5b9a CMSIS --> CORE Devie --> Startup nRF_Drivers --> app_uart FIFO\u306b\u8a2d\u5b9a nRF_Drivers --> nrf_delay nRF Drivers --> nrf_drv_commmon nRF Drivers --> nrf_drv_uart nRF Drivers --> nrf_error No_softdevice\u3092\u9078\u629e nRF Drivers --> nrf_gpio nRF Drivers --> nrf_twi nRF Drivers --> nrf_uart nRF Drivers --> nrf_uarte nRF_Libraries --> app_error nRF_Libraries --> app_fifp nRF_Libraries --> app_util No_softdevice\u3092\u9078\u629e nRF_Libraries --> nordic_common nRF_Libraries --> nrf_assert nRF_Libraries --> retargetinclude <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_uart.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define UART_TX_BUF_SIZE 256 #define UART_RX_BUF_SIZE 1 #define DEVICEADDRESS_MPU9250 0x68 #define DEVICEADDRESS_MAG 0x0C #define GYRO_FULL_SCALE_250_DPS 0x00 #define GYRO_FULL_SCALE_500_DPS 0x08 #define GYRO_FULL_SCALE_1000_DPS 0x10 #define GYRO_FULL_SCALE_2000_DPS 0x18 #define ACC_FULL_SCALE_2_G 0x00 #define ACC_FULL_SCALE_4_G 0x08 #define ACC_FULL_SCALE_8_G 0x10 #define ACC_FULL_SCALE_16_G 0x18 /* Indicates if reading operation from accelerometer has ended. */ static volatile bool m_xfer_done = true ; /* Indicates if setting mode operation has ended. */ static volatile bool m_set_mode_done = false ; /* TWI instance. */ static const nrf_drv_twi_t m_twi_mpu_9250 = NRF_DRV_TWI_INSTANCE ( 0 ); static volatile uint8_t twi_number = 0 ; static void uart_events_handler ( app_uart_evt_t * p_event ) { switch ( p_event -> evt_type ) { case APP_UART_COMMUNICATION_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_communication ); break ; case APP_UART_FIFO_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_code ); break ; default : break ; } } static void uart_config ( void ) { uint32_t err_code ; const app_uart_comm_params_t comm_params = { RX_PIN_NUMBER , TX_PIN_NUMBER , RTS_PIN_NUMBER , CTS_PIN_NUMBER , APP_UART_FLOW_CONTROL_DISABLED , false , UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_events_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } void MPU9250_set_mode ( void ) { ret_code_t err_code ; uint8_t reg [ 2 ] = { GYRO_FULL_SCALE_2000_DPS , 27 }; err_code = nrf_drv_twi_tx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 10 ); uint8_t reg2 [ 2 ] = { ACC_FULL_SCALE_16_G , 28 }; err_code = nrf_drv_twi_tx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , reg2 , sizeof ( reg2 ), false ); nrf_delay_ms ( 10 ); uint8_t reg3 [ 2 ] = { 0x37 , 0x02 }; err_code = nrf_drv_twi_tx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , reg3 , sizeof ( reg3 ), false ); nrf_delay_ms ( 10 ); while ( m_set_mode_done == false ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { ret_code_t err_code ; static uint8_t Buf [ 14 ]; static uint8_t Mag [ 6 ]; switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if (( p_event -> type == NRF_DRV_TWI_EVT_DONE ) && ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_TX )) { if ( m_set_mode_done != true ) { m_set_mode_done = true ; return ; } m_xfer_done = false ; err_code = nrf_drv_twi_rx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , ( uint8_t * ) & Buf , sizeof ( Buf )); //err_code = nrf_drv_twi_rx(&m_twi_mpu_9250, DEVICEADDRESS_MAG, (uint8_t*)&Mag, sizeof(Mag)); APP_ERROR_CHECK ( err_code ); // Accelerometer int16_t ax =- ( Buf [ 0 ] << 8 | Buf [ 1 ]); int16_t ay =- ( Buf [ 2 ] << 8 | Buf [ 3 ]); int16_t az = Buf [ 4 ] << 8 | Buf [ 5 ]; // Gyroscope int16_t gx =- ( Buf [ 8 ] << 8 | Buf [ 9 ]); int16_t gy =- ( Buf [ 10 ] << 8 | Buf [ 11 ]); int16_t gz = Buf [ 12 ] << 8 | Buf [ 13 ]; printf ( \"Accelerometer \\n\\r \" ); printf ( \"ax=%d \\t ay=%d \\t az=%d \\n\\r \" , ax , ay , az ); printf ( \"Gyroscope \\n\\r \" ); printf ( \"gx=%d \\t gy=%d \\t gz=%d \\n\\r \" , gx , gy , gz ); // Magnetometer int16_t mx =- ( Mag [ 3 ] << 8 | Mag [ 2 ]); int16_t my =- ( Mag [ 1 ] << 8 | Mag [ 0 ]); int16_t mz =- ( Mag [ 5 ] << 8 | Mag [ 4 ]); printf ( \"Magnetometer \\n\\r \" ); printf ( \"mx=%d \\t my=%d \\t mz=%d \\n\\r \" , mx , my , mz ); } else { m_xfer_done = true ; } break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_mpu_9250_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH }; err_code = nrf_drv_twi_init ( & m_twi_mpu_9250 , & twi_mpu_9250_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi_mpu_9250 ); } int main ( void ) { uart_config (); printf ( \" \\n\\r Fabo #202 9Aix Sample Beta \\r\\n \" ); twi_init (); MPU9250_set_mode (); ret_code_t err_code ; while ( true ) { nrf_delay_ms ( 1000 ); do { __WFE (); } while ( m_xfer_done == false ); uint8_t reg9 = 0x3B ; err_code = nrf_drv_twi_tx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , & reg9 , sizeof ( reg9 ), true ); //nrf_delay_ms(100); //uint8_t reg7[2] ={0x0A,0x01}; //err_code = nrf_drv_twi_tx(&m_twi_mpu_9250, DEVICEADDRESS_MAG, reg7, sizeof(reg7), true); //nrf_delay_ms(100); //uint8_t reg5 = 0x03; //err_code = nrf_drv_twi_tx(&m_twi_mpu_9250, DEVICEADDRESS_MAG, &reg5, sizeof(reg5), true); m_xfer_done = false ; } } \u69cb\u6210Parts - GitHub","title":"202 9Aixs I2C Brick"},{"location":"8.FaBoBrick(I2C)/202_brick_i2c_9Aix/#202-9aixs-i2c-brick","text":"","title":"#202 9Aixs I2C Brick"},{"location":"8.FaBoBrick(I2C)/202_brick_i2c_9Aix/#overview","text":"","title":"Overview"},{"location":"8.FaBoBrick(I2C)/202_brick_i2c_9Aix/#connecting","text":"Shinobi\u3068Fabo 9Axis\u3092\u63a5\u7d9a\u3002","title":"Connecting"},{"location":"8.FaBoBrick(I2C)/202_brick_i2c_9Aix/#_1","text":"\u4ee5\u4e0b\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u304a\u3088\u3073\u9078\u629e\u3057\u307e\u3059\u3002 Board Support --> bsp Define\u306b\u8a2d\u5b9a CMSIS --> CORE Devie --> Startup nRF_Drivers --> app_uart FIFO\u306b\u8a2d\u5b9a nRF_Drivers --> nrf_delay nRF Drivers --> nrf_drv_commmon nRF Drivers --> nrf_drv_uart nRF Drivers --> nrf_error No_softdevice\u3092\u9078\u629e nRF Drivers --> nrf_gpio nRF Drivers --> nrf_twi nRF Drivers --> nrf_uart nRF Drivers --> nrf_uarte nRF_Libraries --> app_error nRF_Libraries --> app_fifp nRF_Libraries --> app_util No_softdevice\u3092\u9078\u629e nRF_Libraries --> nordic_common nRF_Libraries --> nrf_assert nRF_Libraries --> retarget 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_uart.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define UART_TX_BUF_SIZE 256 #define UART_RX_BUF_SIZE 1 #define DEVICEADDRESS_MPU9250 0x68 #define DEVICEADDRESS_MAG 0x0C #define GYRO_FULL_SCALE_250_DPS 0x00 #define GYRO_FULL_SCALE_500_DPS 0x08 #define GYRO_FULL_SCALE_1000_DPS 0x10 #define GYRO_FULL_SCALE_2000_DPS 0x18 #define ACC_FULL_SCALE_2_G 0x00 #define ACC_FULL_SCALE_4_G 0x08 #define ACC_FULL_SCALE_8_G 0x10 #define ACC_FULL_SCALE_16_G 0x18 /* Indicates if reading operation from accelerometer has ended. */ static volatile bool m_xfer_done = true ; /* Indicates if setting mode operation has ended. */ static volatile bool m_set_mode_done = false ; /* TWI instance. */ static const nrf_drv_twi_t m_twi_mpu_9250 = NRF_DRV_TWI_INSTANCE ( 0 ); static volatile uint8_t twi_number = 0 ; static void uart_events_handler ( app_uart_evt_t * p_event ) { switch ( p_event -> evt_type ) { case APP_UART_COMMUNICATION_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_communication ); break ; case APP_UART_FIFO_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_code ); break ; default : break ; } } static void uart_config ( void ) { uint32_t err_code ; const app_uart_comm_params_t comm_params = { RX_PIN_NUMBER , TX_PIN_NUMBER , RTS_PIN_NUMBER , CTS_PIN_NUMBER , APP_UART_FLOW_CONTROL_DISABLED , false , UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_events_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } void MPU9250_set_mode ( void ) { ret_code_t err_code ; uint8_t reg [ 2 ] = { GYRO_FULL_SCALE_2000_DPS , 27 }; err_code = nrf_drv_twi_tx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 10 ); uint8_t reg2 [ 2 ] = { ACC_FULL_SCALE_16_G , 28 }; err_code = nrf_drv_twi_tx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , reg2 , sizeof ( reg2 ), false ); nrf_delay_ms ( 10 ); uint8_t reg3 [ 2 ] = { 0x37 , 0x02 }; err_code = nrf_drv_twi_tx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , reg3 , sizeof ( reg3 ), false ); nrf_delay_ms ( 10 ); while ( m_set_mode_done == false ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { ret_code_t err_code ; static uint8_t Buf [ 14 ]; static uint8_t Mag [ 6 ]; switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if (( p_event -> type == NRF_DRV_TWI_EVT_DONE ) && ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_TX )) { if ( m_set_mode_done != true ) { m_set_mode_done = true ; return ; } m_xfer_done = false ; err_code = nrf_drv_twi_rx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , ( uint8_t * ) & Buf , sizeof ( Buf )); //err_code = nrf_drv_twi_rx(&m_twi_mpu_9250, DEVICEADDRESS_MAG, (uint8_t*)&Mag, sizeof(Mag)); APP_ERROR_CHECK ( err_code ); // Accelerometer int16_t ax =- ( Buf [ 0 ] << 8 | Buf [ 1 ]); int16_t ay =- ( Buf [ 2 ] << 8 | Buf [ 3 ]); int16_t az = Buf [ 4 ] << 8 | Buf [ 5 ]; // Gyroscope int16_t gx =- ( Buf [ 8 ] << 8 | Buf [ 9 ]); int16_t gy =- ( Buf [ 10 ] << 8 | Buf [ 11 ]); int16_t gz = Buf [ 12 ] << 8 | Buf [ 13 ]; printf ( \"Accelerometer \\n\\r \" ); printf ( \"ax=%d \\t ay=%d \\t az=%d \\n\\r \" , ax , ay , az ); printf ( \"Gyroscope \\n\\r \" ); printf ( \"gx=%d \\t gy=%d \\t gz=%d \\n\\r \" , gx , gy , gz ); // Magnetometer int16_t mx =- ( Mag [ 3 ] << 8 | Mag [ 2 ]); int16_t my =- ( Mag [ 1 ] << 8 | Mag [ 0 ]); int16_t mz =- ( Mag [ 5 ] << 8 | Mag [ 4 ]); printf ( \"Magnetometer \\n\\r \" ); printf ( \"mx=%d \\t my=%d \\t mz=%d \\n\\r \" , mx , my , mz ); } else { m_xfer_done = true ; } break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_mpu_9250_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH }; err_code = nrf_drv_twi_init ( & m_twi_mpu_9250 , & twi_mpu_9250_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi_mpu_9250 ); } int main ( void ) { uart_config (); printf ( \" \\n\\r Fabo #202 9Aix Sample Beta \\r\\n \" ); twi_init (); MPU9250_set_mode (); ret_code_t err_code ; while ( true ) { nrf_delay_ms ( 1000 ); do { __WFE (); } while ( m_xfer_done == false ); uint8_t reg9 = 0x3B ; err_code = nrf_drv_twi_tx ( & m_twi_mpu_9250 , DEVICEADDRESS_MPU9250 , & reg9 , sizeof ( reg9 ), true ); //nrf_delay_ms(100); //uint8_t reg7[2] ={0x0A,0x01}; //err_code = nrf_drv_twi_tx(&m_twi_mpu_9250, DEVICEADDRESS_MAG, reg7, sizeof(reg7), true); //nrf_delay_ms(100); //uint8_t reg5 = 0x03; //err_code = nrf_drv_twi_tx(&m_twi_mpu_9250, DEVICEADDRESS_MAG, &reg5, sizeof(reg5), true); m_xfer_done = false ; } }","title":"\u5fc5\u8981\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"},{"location":"8.FaBoBrick(I2C)/202_brick_i2c_9Aix/#parts","text":"-","title":"\u69cb\u6210Parts"},{"location":"8.FaBoBrick(I2C)/202_brick_i2c_9Aix/#github","text":"","title":"GitHub"},{"location":"8.FaBoBrick(I2C)/204_brick_i2c_barometer/","text":"#204 Barometer Brick Overview Connecting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 #include <stdio.h> #include <math.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"FaBo_204_Barometor\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define MPL115A2_SLAVE_ADDRESS 0x60 ///< MPL115A2 I2C slave address #define MPL115A2_PADC_MSB 0x00 #define MPL115A2_PADC_LSB 0x01 #define MPL115A2_TADC_MSB 0x02 #define MPL115A2_TACD_LSB 0x03 #define MPL115A2_A0_MSB 0x04 #define MPL115A2_A0_LSB 0x05 #define MPL115A2_B1_MSB 0x06 #define MPL115A2_B1_LSB 0x07 #define MPL115A2_B2_MSB 0x08 #define MPL115A2_B2_LSB 0x09 #define MPL115A2_C12_MSB 0x0A #define MPL115A2_C12_LSB 0x0B #define MPL115A2_CONVERT 0x12 void begin ( void ); void readCoef ( void ); void readData ( float * hpa , float * temp ); float readHpa ( float altitude ); float readTemp ( void ); float _a0 , _b1 , _b2 , _c12 ; void writeI2c ( uint8_t address , uint8_t data ); void readI2c ( uint8_t address , uint8_t num , uint8_t * data ); static volatile bool m_xfer_done = false ; static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); void read_sensor_data ( void ); void begin () { readCoef (); } void readCoef () { uint8_t data [ 8 ]; readI2c ( MPL115A2_A0_MSB , 8 , data ); nrf_delay_ms ( 1000 ); _a0 = (( float ) (( data [ 2 ] << 8 ) + data [ 1 ]) / (( long ) 1 << 3 )); _b1 = (( float ) (( data [ 2 ] << 8 ) + data [ 3 ]) / (( long ) 1 << 13 )); _b2 = (( float ) (( data [ 4 ] << 8 ) + data [ 5 ]) / (( long ) 1 << 14 )); _c12 = (( float ) (( data [ 6 ] << 8 ) + data [ 7 ]) / (( long ) 1 << 24 )); } float readHpa ( float altitude ) { float hpa , temp ; readData ( & hpa , & temp ); return hpa / pow ( 1.0F - ( altitude / 44330.0F ), 5.255F ); } float readTemp () { float hpa , temp ; readData ( & hpa , & temp ); return temp ; } void readData ( float * hpa , float * temp ) { uint8_t data [ 4 ]; uint16_t padc , tadc ; float pcomp ; writeI2c ( MPL115A2_CONVERT , 0x01 ); nrf_delay_ms ( 3 ); readI2c ( MPL115A2_PADC_MSB , 4 , data ); nrf_delay_ms ( 10 ); padc = ((( uint16_t ) data [ 0 ] << 8 ) | data [ 1 ]) >> 6 ; tadc = ((( uint16_t ) data [ 2 ] << 8 ) | data [ 3 ]) >> 6 ; pcomp = _a0 + ( _b1 + _c12 * tadc ) * padc + _b2 * tadc ; * hpa = pcomp * ( ( 1150.0F - 500.0F ) / 1023.0F ) + 500.0F ; * temp = 25.0F - (( float ) tadc - 512.0F ) / 5.35F ; } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_RX ) { //data_handler(m_sample); } m_xfer_done = true ; break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_mpl115a2_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_mpl115a2_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } void writeI2c ( uint8_t register_addr , uint8_t value ) { uint32_t err_code ; uint8_t reg [ 2 ] = { register_addr , value }; err_code = nrf_drv_twi_tx ( & m_twi , MPL115A2_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); while ( m_xfer_done == false ); } void readI2c ( uint8_t address , uint8_t num , uint8_t * data ) { uint32_t err_code ; uint8_t reg [ 2 ] = { address , num }; err_code = nrf_drv_twi_tx ( & m_twi , MPL115A2_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); while ( m_xfer_done == false ); nrf_delay_ms ( 10 ); m_xfer_done = false ; err_code = nrf_drv_twi_rx ( & m_twi , MPL115A2_SLAVE_ADDRESS , data , sizeof ( data )); APP_ERROR_CHECK ( err_code ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \"FaBo_Barometor_204 Sample \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); NRF_LOG_INFO ( \"RESET \\r\\n \" ); NRF_LOG_FLUSH (); nrf_delay_ms ( 10 ); begin (); nrf_delay_ms ( 10 ); NRF_LOG_INFO ( \"Init. \\r\\n \" ); nrf_delay_ms ( 10 ); while ( 1 ){ float a = readTemp (); NRF_LOG_INFO ( \"Temp:\u0081\u0081 \" NRF_LOG_FLOAT_MARKER \" \\r\\n \" , NRF_LOG_FLOAT ( a )); nrf_delay_ms ( 100 ); float b = readHpa ( 212.0F ); NRF_LOG_INFO ( \"hPa: \" NRF_LOG_FLOAT_MARKER \" \\r\\n \" , NRF_LOG_FLOAT ( b )); nrf_delay_ms ( 1000 ); NRF_LOG_FLUSH (); } } \u69cb\u6210Parts - GitHub","title":"204 Barometer Brick"},{"location":"8.FaBoBrick(I2C)/204_brick_i2c_barometer/#204-barometer-brick","text":"","title":"#204 Barometer Brick"},{"location":"8.FaBoBrick(I2C)/204_brick_i2c_barometer/#overview","text":"","title":"Overview"},{"location":"8.FaBoBrick(I2C)/204_brick_i2c_barometer/#connecting","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 #include <stdio.h> #include <math.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"FaBo_204_Barometor\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define MPL115A2_SLAVE_ADDRESS 0x60 ///< MPL115A2 I2C slave address #define MPL115A2_PADC_MSB 0x00 #define MPL115A2_PADC_LSB 0x01 #define MPL115A2_TADC_MSB 0x02 #define MPL115A2_TACD_LSB 0x03 #define MPL115A2_A0_MSB 0x04 #define MPL115A2_A0_LSB 0x05 #define MPL115A2_B1_MSB 0x06 #define MPL115A2_B1_LSB 0x07 #define MPL115A2_B2_MSB 0x08 #define MPL115A2_B2_LSB 0x09 #define MPL115A2_C12_MSB 0x0A #define MPL115A2_C12_LSB 0x0B #define MPL115A2_CONVERT 0x12 void begin ( void ); void readCoef ( void ); void readData ( float * hpa , float * temp ); float readHpa ( float altitude ); float readTemp ( void ); float _a0 , _b1 , _b2 , _c12 ; void writeI2c ( uint8_t address , uint8_t data ); void readI2c ( uint8_t address , uint8_t num , uint8_t * data ); static volatile bool m_xfer_done = false ; static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); void read_sensor_data ( void ); void begin () { readCoef (); } void readCoef () { uint8_t data [ 8 ]; readI2c ( MPL115A2_A0_MSB , 8 , data ); nrf_delay_ms ( 1000 ); _a0 = (( float ) (( data [ 2 ] << 8 ) + data [ 1 ]) / (( long ) 1 << 3 )); _b1 = (( float ) (( data [ 2 ] << 8 ) + data [ 3 ]) / (( long ) 1 << 13 )); _b2 = (( float ) (( data [ 4 ] << 8 ) + data [ 5 ]) / (( long ) 1 << 14 )); _c12 = (( float ) (( data [ 6 ] << 8 ) + data [ 7 ]) / (( long ) 1 << 24 )); } float readHpa ( float altitude ) { float hpa , temp ; readData ( & hpa , & temp ); return hpa / pow ( 1.0F - ( altitude / 44330.0F ), 5.255F ); } float readTemp () { float hpa , temp ; readData ( & hpa , & temp ); return temp ; } void readData ( float * hpa , float * temp ) { uint8_t data [ 4 ]; uint16_t padc , tadc ; float pcomp ; writeI2c ( MPL115A2_CONVERT , 0x01 ); nrf_delay_ms ( 3 ); readI2c ( MPL115A2_PADC_MSB , 4 , data ); nrf_delay_ms ( 10 ); padc = ((( uint16_t ) data [ 0 ] << 8 ) | data [ 1 ]) >> 6 ; tadc = ((( uint16_t ) data [ 2 ] << 8 ) | data [ 3 ]) >> 6 ; pcomp = _a0 + ( _b1 + _c12 * tadc ) * padc + _b2 * tadc ; * hpa = pcomp * ( ( 1150.0F - 500.0F ) / 1023.0F ) + 500.0F ; * temp = 25.0F - (( float ) tadc - 512.0F ) / 5.35F ; } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_RX ) { //data_handler(m_sample); } m_xfer_done = true ; break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_mpl115a2_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_mpl115a2_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } void writeI2c ( uint8_t register_addr , uint8_t value ) { uint32_t err_code ; uint8_t reg [ 2 ] = { register_addr , value }; err_code = nrf_drv_twi_tx ( & m_twi , MPL115A2_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); while ( m_xfer_done == false ); } void readI2c ( uint8_t address , uint8_t num , uint8_t * data ) { uint32_t err_code ; uint8_t reg [ 2 ] = { address , num }; err_code = nrf_drv_twi_tx ( & m_twi , MPL115A2_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); while ( m_xfer_done == false ); nrf_delay_ms ( 10 ); m_xfer_done = false ; err_code = nrf_drv_twi_rx ( & m_twi , MPL115A2_SLAVE_ADDRESS , data , sizeof ( data )); APP_ERROR_CHECK ( err_code ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \"FaBo_Barometor_204 Sample \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); NRF_LOG_INFO ( \"RESET \\r\\n \" ); NRF_LOG_FLUSH (); nrf_delay_ms ( 10 ); begin (); nrf_delay_ms ( 10 ); NRF_LOG_INFO ( \"Init. \\r\\n \" ); nrf_delay_ms ( 10 ); while ( 1 ){ float a = readTemp (); NRF_LOG_INFO ( \"Temp:\u0081\u0081 \" NRF_LOG_FLOAT_MARKER \" \\r\\n \" , NRF_LOG_FLOAT ( a )); nrf_delay_ms ( 100 ); float b = readHpa ( 212.0F ); NRF_LOG_INFO ( \"hPa: \" NRF_LOG_FLOAT_MARKER \" \\r\\n \" , NRF_LOG_FLOAT ( b )); nrf_delay_ms ( 1000 ); NRF_LOG_FLUSH (); } }","title":"Connecting"},{"location":"8.FaBoBrick(I2C)/204_brick_i2c_barometer/#parts","text":"-","title":"\u69cb\u6210Parts"},{"location":"8.FaBoBrick(I2C)/204_brick_i2c_barometer/#github","text":"","title":"GitHub"},{"location":"8.FaBoBrick(I2C)/205_brick_i2c_proximity/","text":"#205 Proximity Brick Overview Connectinginclude <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"FaBo_210_3Aix\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define VCNL4010_SLAVE_ADDRESS 0x13 ///< I2C Slave Address #define VCNL4010_DEVICE_ID 0x21 ///< Product,Revision ID Value //Register Addresses #define VCNL4010_REG_CMD 0x80 #define VCNL4010_REG_ID 0x81 #define VCNL4010_REG_PROX_RATE 0x82 #define VCNL4010_REG_LED_CRNT 0x83 #define VCNL4010_REG_AMBI_PARM 0x84 #define VCNL4010_REG_AMBI_DATA_H 0x85 #define VCNL4010_REG_AMBI_DATA_L 0x86 #define VCNL4010_REG_PROX_DATA_H 0x87 #define VCNL4010_REG_PROX_DATA_L 0x88 #define VCNL4010_REG_INT_CTRL 0x89 #define VCNL4010_REG_INT_LOW_H 0x8A #define VCNL4010_REG_INT_LOW_L 0x8B #define VCNL4010_REG_INT_HIGH_H 0x8C #define VCNL4010_REG_INT_HIGH_L 0x8D #define VCNL4010_REG_INT_STAT 0x8E #define VCNL4010_REG_PROX_ADJ 0x8F //Commands #define VCNL4010_CMD_SELFTIMED_EN 0x01 #define VCNL4010_CMD_PROX_EN 0x02 #define VCNL4010_CMD_ALS_EN 0x04 #define VCNL4010_CMD_PROX_OD 0x08 #define VCNL4010_CMD_ALS_OD 0x10 #define VCNL4010_CMD_PROX_DRDY 0x20 #define VCNL4010_CMD_ALS_DRDY 0x40 //Proximity Measurement Rate #define VCNL4010_PROX_RATE_1 0x00 #define VCNL4010_PROX_RATE_3 0x01 #define VCNL4010_PROX_RATE_7 0x02 #define VCNL4010_PROX_RATE_16 0x03 #define VCNL4010_PROX_RATE_31 0x04 #define VCNL4010_PROX_RATE_62 0x05 #define VCNL4010_PROX_RATE_125 0x06 #define VCNL4010_PROX_RATE_250 0x07 //Ambient Light Parameter #define VCNL4010_AMBI_CONT_CONV_MODE 0x80 #define VCNL4010_AMBI_RATE_1 0x00 #define VCNL4010_AMBI_RATE_2 0x10 #define VCNL4010_AMBI_RATE_3 0x20 #define VCNL4010_AMBI_RATE_4 0x30 #define VCNL4010_AMBI_RATE_5 0x40 #define VCNL4010_AMBI_RATE_6 0x50 #define VCNL4010_AMBI_RATE_8 0x60 #define VCNL4010_AMBI_RATE_10 0x70 #define VCNL4010_AMBI_AUTO_OFFSET 0x08 #define VCNL4010_AMBI_AVE_NUM_1 0x00 #define VCNL4010_AMBI_AVE_NUM_2 0x01 #define VCNL4010_AMBI_AVE_NUM_4 0x02 #define VCNL4010_AMBI_AVE_NUM_8 0x03 #define VCNL4010_AMBI_AVE_NUM_16 0x04 #define VCNL4010_AMBI_AVE_NUM_32 0x05 #define VCNL4010_AMBI_AVE_NUM_64 0x06 #define VCNL4010_AMBI_AVE_NUM_128 0x07 bool begin ( void ); bool searchDevice ( void ); void configuration ( void ); void setCommand ( uint8_t config ); void setProxRate ( uint8_t config ); void setLedCurrent ( uint8_t config ); void setAmbiParm ( uint8_t config ); bool checkProxReady ( void ); bool checkAmbiReady ( void ); uint16_t readProx ( void ); uint16_t readAmbi ( void ); void dumpReg ( void ); void writeI2c ( uint8_t address , uint8_t data ); void readI2c ( uint8_t address , uint8_t * data ); void print_byte ( uint8_t val ); static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); bool begin () { if ( searchDevice () ) { configuration (); return true ; } else { return false ; } } bool searchDevice () { uint8_t data ; readI2c ( VCNL4010_REG_ID , & data ); if ( data == VCNL4010_DEVICE_ID ) { return true ; } else { return false ; } } void configuration () { setCommand ( VCNL4010_CMD_SELFTIMED_EN | VCNL4010_CMD_PROX_EN | VCNL4010_CMD_ALS_EN ); setProxRate ( VCNL4010_PROX_RATE_250 ); setLedCurrent ( 20 ); setAmbiParm ( VCNL4010_AMBI_RATE_10 | VCNL4010_AMBI_AUTO_OFFSET | VCNL4010_AMBI_AVE_NUM_128 ); } void setCommand ( uint8_t config ) { writeI2c ( VCNL4010_REG_CMD , config ); } void setProxRate ( uint8_t config ) { writeI2c ( VCNL4010_REG_PROX_RATE , config ); } void setLedCurrent ( uint8_t config ) { writeI2c ( VCNL4010_REG_LED_CRNT , config ); } void setAmbiParm ( uint8_t config ) { writeI2c ( VCNL4010_REG_AMBI_PARM , config ); } bool checkProxReady () { uint8_t data ; NRF_LOG_FLUSH (); readI2c ( VCNL4010_REG_CMD , & data ); if ( data & VCNL4010_CMD_PROX_DRDY ) { return true ; } return false ; } bool checkAmbiReady () { uint8_t data ; readI2c ( VCNL4010_REG_CMD , & data ); if ( data & VCNL4010_CMD_ALS_DRDY ) { return true ; } return false ; } uint16_t readProx () { uint8_t data_h , data_l ; readI2c ( VCNL4010_REG_PROX_DATA_H , & data_h ); readI2c ( VCNL4010_REG_PROX_DATA_L , & data_l ); uint16_t value ; value = data_h ; value <<= 8 ; value |= data_l ; return value ; } uint16_t readAmbi () { uint8_t ambi_h , ambi_l ; uint16_t value ; readI2c ( VCNL4010_REG_AMBI_DATA_H , & ambi_h ); readI2c ( VCNL4010_REG_AMBI_DATA_L , & ambi_l ); value = ambi_h ; value <<= 8 ; value |= ambi_l ; return value ; } void dumpReg () { uint8_t data ; int i ; for ( i = 0x80 ; i <= 0x90 ; i ++ ){ readI2c ( i , & data ); NRF_LOG_INFO ( \"0x%x:%b \\n\\r \" , i , data ); NRF_LOG_FLUSH (); print_byte ( data ); } } void print_byte ( uint8_t val ) { int i ; NRF_LOG_INFO ( \"B\" ); NRF_LOG_FLUSH (); for ( i = 7 ; i >= 0 ; i -- ){ NRF_LOG_INFO ( \"%b\" , val >> i & 1 ); NRF_LOG_FLUSH (); } } void writeI2c ( uint8_t address , uint8_t data ) { uint32_t err_code ; uint8_t reg [ 2 ] = { address , data }; err_code = nrf_drv_twi_tx ( & m_twi , VCNL4010_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 40 ); } void readI2c ( uint8_t address , uint8_t * data ) { nrf_delay_ms ( 10 ); uint32_t err_code ; uint8_t reg = address ; err_code = nrf_drv_twi_tx ( & m_twi , VCNL4010_SLAVE_ADDRESS , & reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 100 ); err_code = nrf_drv_twi_rx ( & m_twi , VCNL4010_SLAVE_ADDRESS , data , sizeof ( data )); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 40 ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_RX ) { } break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_lm75b_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_lm75b_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \"FaBo_Proximity \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); begin (); NRF_LOG_INFO ( \"Init... \\r\\n \" ); NRF_LOG_FLUSH (); while ( 1 ){ if ( checkProxReady ()){ NRF_LOG_INFO ( \"Prox:%d \\r\\n \" , readProx ()); NRF_LOG_FLUSH (); } nrf_delay_ms ( 10 ); if ( checkAmbiReady ()){ NRF_LOG_INFO ( \"Ambi:%d \\r\\n \" , readAmbi ()); NRF_LOG_FLUSH (); } nrf_delay_ms ( 1000 ); } } \u69cb\u6210Parts GitHub","title":"205 Proximity Brick"},{"location":"8.FaBoBrick(I2C)/205_brick_i2c_proximity/#205-proximity-brick","text":"","title":"#205 Proximity Brick"},{"location":"8.FaBoBrick(I2C)/205_brick_i2c_proximity/#overview","text":"","title":"Overview"},{"location":"8.FaBoBrick(I2C)/205_brick_i2c_proximity/#connecting","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"FaBo_210_3Aix\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define VCNL4010_SLAVE_ADDRESS 0x13 ///< I2C Slave Address #define VCNL4010_DEVICE_ID 0x21 ///< Product,Revision ID Value //Register Addresses #define VCNL4010_REG_CMD 0x80 #define VCNL4010_REG_ID 0x81 #define VCNL4010_REG_PROX_RATE 0x82 #define VCNL4010_REG_LED_CRNT 0x83 #define VCNL4010_REG_AMBI_PARM 0x84 #define VCNL4010_REG_AMBI_DATA_H 0x85 #define VCNL4010_REG_AMBI_DATA_L 0x86 #define VCNL4010_REG_PROX_DATA_H 0x87 #define VCNL4010_REG_PROX_DATA_L 0x88 #define VCNL4010_REG_INT_CTRL 0x89 #define VCNL4010_REG_INT_LOW_H 0x8A #define VCNL4010_REG_INT_LOW_L 0x8B #define VCNL4010_REG_INT_HIGH_H 0x8C #define VCNL4010_REG_INT_HIGH_L 0x8D #define VCNL4010_REG_INT_STAT 0x8E #define VCNL4010_REG_PROX_ADJ 0x8F //Commands #define VCNL4010_CMD_SELFTIMED_EN 0x01 #define VCNL4010_CMD_PROX_EN 0x02 #define VCNL4010_CMD_ALS_EN 0x04 #define VCNL4010_CMD_PROX_OD 0x08 #define VCNL4010_CMD_ALS_OD 0x10 #define VCNL4010_CMD_PROX_DRDY 0x20 #define VCNL4010_CMD_ALS_DRDY 0x40 //Proximity Measurement Rate #define VCNL4010_PROX_RATE_1 0x00 #define VCNL4010_PROX_RATE_3 0x01 #define VCNL4010_PROX_RATE_7 0x02 #define VCNL4010_PROX_RATE_16 0x03 #define VCNL4010_PROX_RATE_31 0x04 #define VCNL4010_PROX_RATE_62 0x05 #define VCNL4010_PROX_RATE_125 0x06 #define VCNL4010_PROX_RATE_250 0x07 //Ambient Light Parameter #define VCNL4010_AMBI_CONT_CONV_MODE 0x80 #define VCNL4010_AMBI_RATE_1 0x00 #define VCNL4010_AMBI_RATE_2 0x10 #define VCNL4010_AMBI_RATE_3 0x20 #define VCNL4010_AMBI_RATE_4 0x30 #define VCNL4010_AMBI_RATE_5 0x40 #define VCNL4010_AMBI_RATE_6 0x50 #define VCNL4010_AMBI_RATE_8 0x60 #define VCNL4010_AMBI_RATE_10 0x70 #define VCNL4010_AMBI_AUTO_OFFSET 0x08 #define VCNL4010_AMBI_AVE_NUM_1 0x00 #define VCNL4010_AMBI_AVE_NUM_2 0x01 #define VCNL4010_AMBI_AVE_NUM_4 0x02 #define VCNL4010_AMBI_AVE_NUM_8 0x03 #define VCNL4010_AMBI_AVE_NUM_16 0x04 #define VCNL4010_AMBI_AVE_NUM_32 0x05 #define VCNL4010_AMBI_AVE_NUM_64 0x06 #define VCNL4010_AMBI_AVE_NUM_128 0x07 bool begin ( void ); bool searchDevice ( void ); void configuration ( void ); void setCommand ( uint8_t config ); void setProxRate ( uint8_t config ); void setLedCurrent ( uint8_t config ); void setAmbiParm ( uint8_t config ); bool checkProxReady ( void ); bool checkAmbiReady ( void ); uint16_t readProx ( void ); uint16_t readAmbi ( void ); void dumpReg ( void ); void writeI2c ( uint8_t address , uint8_t data ); void readI2c ( uint8_t address , uint8_t * data ); void print_byte ( uint8_t val ); static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); bool begin () { if ( searchDevice () ) { configuration (); return true ; } else { return false ; } } bool searchDevice () { uint8_t data ; readI2c ( VCNL4010_REG_ID , & data ); if ( data == VCNL4010_DEVICE_ID ) { return true ; } else { return false ; } } void configuration () { setCommand ( VCNL4010_CMD_SELFTIMED_EN | VCNL4010_CMD_PROX_EN | VCNL4010_CMD_ALS_EN ); setProxRate ( VCNL4010_PROX_RATE_250 ); setLedCurrent ( 20 ); setAmbiParm ( VCNL4010_AMBI_RATE_10 | VCNL4010_AMBI_AUTO_OFFSET | VCNL4010_AMBI_AVE_NUM_128 ); } void setCommand ( uint8_t config ) { writeI2c ( VCNL4010_REG_CMD , config ); } void setProxRate ( uint8_t config ) { writeI2c ( VCNL4010_REG_PROX_RATE , config ); } void setLedCurrent ( uint8_t config ) { writeI2c ( VCNL4010_REG_LED_CRNT , config ); } void setAmbiParm ( uint8_t config ) { writeI2c ( VCNL4010_REG_AMBI_PARM , config ); } bool checkProxReady () { uint8_t data ; NRF_LOG_FLUSH (); readI2c ( VCNL4010_REG_CMD , & data ); if ( data & VCNL4010_CMD_PROX_DRDY ) { return true ; } return false ; } bool checkAmbiReady () { uint8_t data ; readI2c ( VCNL4010_REG_CMD , & data ); if ( data & VCNL4010_CMD_ALS_DRDY ) { return true ; } return false ; } uint16_t readProx () { uint8_t data_h , data_l ; readI2c ( VCNL4010_REG_PROX_DATA_H , & data_h ); readI2c ( VCNL4010_REG_PROX_DATA_L , & data_l ); uint16_t value ; value = data_h ; value <<= 8 ; value |= data_l ; return value ; } uint16_t readAmbi () { uint8_t ambi_h , ambi_l ; uint16_t value ; readI2c ( VCNL4010_REG_AMBI_DATA_H , & ambi_h ); readI2c ( VCNL4010_REG_AMBI_DATA_L , & ambi_l ); value = ambi_h ; value <<= 8 ; value |= ambi_l ; return value ; } void dumpReg () { uint8_t data ; int i ; for ( i = 0x80 ; i <= 0x90 ; i ++ ){ readI2c ( i , & data ); NRF_LOG_INFO ( \"0x%x:%b \\n\\r \" , i , data ); NRF_LOG_FLUSH (); print_byte ( data ); } } void print_byte ( uint8_t val ) { int i ; NRF_LOG_INFO ( \"B\" ); NRF_LOG_FLUSH (); for ( i = 7 ; i >= 0 ; i -- ){ NRF_LOG_INFO ( \"%b\" , val >> i & 1 ); NRF_LOG_FLUSH (); } } void writeI2c ( uint8_t address , uint8_t data ) { uint32_t err_code ; uint8_t reg [ 2 ] = { address , data }; err_code = nrf_drv_twi_tx ( & m_twi , VCNL4010_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 40 ); } void readI2c ( uint8_t address , uint8_t * data ) { nrf_delay_ms ( 10 ); uint32_t err_code ; uint8_t reg = address ; err_code = nrf_drv_twi_tx ( & m_twi , VCNL4010_SLAVE_ADDRESS , & reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 100 ); err_code = nrf_drv_twi_rx ( & m_twi , VCNL4010_SLAVE_ADDRESS , data , sizeof ( data )); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 40 ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_RX ) { } break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_lm75b_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_lm75b_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \"FaBo_Proximity \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); begin (); NRF_LOG_INFO ( \"Init... \\r\\n \" ); NRF_LOG_FLUSH (); while ( 1 ){ if ( checkProxReady ()){ NRF_LOG_INFO ( \"Prox:%d \\r\\n \" , readProx ()); NRF_LOG_FLUSH (); } nrf_delay_ms ( 10 ); if ( checkAmbiReady ()){ NRF_LOG_INFO ( \"Ambi:%d \\r\\n \" , readAmbi ()); NRF_LOG_FLUSH (); } nrf_delay_ms ( 1000 ); } }","title":"Connecting"},{"location":"8.FaBoBrick(I2C)/205_brick_i2c_proximity/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"8.FaBoBrick(I2C)/205_brick_i2c_proximity/#github","text":"","title":"GitHub"},{"location":"8.FaBoBrick(I2C)/207_brick_i2c_Temprature/","text":"#207 temperature Brick Overview Connecting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"Fabo_207_temprature\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define ADT7410_SLAVE_ADDRESS 0x48 ///< Default I2C Slave Address //Register Addresses #define ADT7410_TEMP_MSB_REG 0x00 #define ADT7410_TEMP_LSB_REG 0x01 #define ADT7410_STATUS_REG 0x02 #define ADT7410_CONFIGURATION_REG 0x03 #define ADT7410_WHO_AM_I_REG 0x0B //Config Parameter #define ADT7410_13BIT_RESOLUTION 0x00 #define ADT7410_16BIT_RESOLUTION 0x80 #define ADT7410_OP_MODE_CONTINUOUS 0x00 #define ADT7410_OP_MODE_ONESHOT 0x20 #define ADT7410_OP_MODE_SPS 0x40 #define ADT7410_OP_MODE_SHUTDOWN 0x60 #define ADT7410_INTERRUPT_MODE 0x00 #define ADT7410_COMPARATOR_MODE 0x10 #define ADT7410_INT_LOW 0x00 #define ADT7410_INT_HIGH 0x08 #define ADT7410_CT_LOW 0x00 #define ADT7410_CT_HIGH 0x04 #define ADT7410_16BIT_OP_MODE_1FAULT 0x00 #define ADT7410_16BIT_OP_MODE_2FAULT 0x01 #define ADT7410_16BIT_OP_MODE_3FAULT 0x02 #define ADT7410_16BIT_OP_MODE_4FAULT 0x03 void begin ( void ); void configure ( uint8_t config ); bool checkDataReady ( void ); float readTemperature ( void ); void writeI2c ( uint8_t address , uint8_t data ); void readI2c ( uint8_t address , uint8_t * data ); /* TWI instance. */ static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); void begin () { uint8_t config ; // config = ADT7410_13BIT_RESOLUTION; config = ADT7410_16BIT_RESOLUTION ; config |= ADT7410_16BIT_OP_MODE_1FAULT ; config |= ADT7410_CT_LOW ; config |= ADT7410_INT_LOW ; config |= ADT7410_INTERRUPT_MODE ; config |= ADT7410_OP_MODE_CONTINUOUS ; configure ( config ); } void configure ( uint8_t config ) { writeI2c ( ADT7410_CONFIGURATION_REG , config ); } bool checkDataReady () { uint8_t status ; readI2c ( ADT7410_STATUS_REG , & status ); if ( ( status & 0x80 ) ) { return false ; } else { return true ; } } float readTemperature () { uint8_t buffer [ 2 ]; uint16_t adc ; float temp ; int16_t val ; uint8_t config ; if ( checkDataReady () ) { nrf_delay_ms ( 10 ); readI2c ( ADT7410_CONFIGURATION_REG , & config ); nrf_delay_ms ( 40 ); readI2c ( ADT7410_TEMP_MSB_REG , buffer ); nrf_delay_ms ( 10 ); adc = ( uint16_t ) buffer [ 0 ] << 8 ; adc |= buffer [ 1 ]; val = ( long ) adc ; if ( ( config & 0x80 ) ) { // 13bit resolution adc >>= 3 ; if ( adc & 0x1000 ) { val = val - 8192 ; } temp = ( float ) val / 16.0F ; } else { // 16bit resolution if ( adc & 0x8000 ) { val = val - 65536 ; } temp = ( float ) val / 128.0F ; } return temp ; } else { return 0.0 ; } } void writeI2c ( uint8_t address , uint8_t data ) { uint32_t err_code ; uint8_t reg [ 2 ] = { address , data }; err_code = nrf_drv_twi_tx ( & m_twi , ADT7410_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 40 ); } void readI2c ( uint8_t address , uint8_t * data ) { nrf_delay_ms ( 10 ); uint32_t err_code ; uint8_t reg = address ; err_code = nrf_drv_twi_tx ( & m_twi , ADT7410_SLAVE_ADDRESS , & reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 100 ); err_code = nrf_drv_twi_rx ( & m_twi , ADT7410_SLAVE_ADDRESS , data , sizeof ( data )); APP_ERROR_CHECK ( err_code ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_RX ) { } break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_Temprature_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_Temprature_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \" \\r\\n Fabo_207_Temprature_Brick Sample \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); NRF_LOG_INFO ( \"RESET \\r\\n \" ); NRF_LOG_FLUSH (); begin (); while ( true ) { float a = readTemperature (); NRF_LOG_INFO ( \"Temperarue\" NRF_LOG_FLOAT_MARKER \" \\r\\n \" , a ); NRF_LOG_FLUSH (); nrf_delay_ms ( 1000 ); } } \u69cb\u6210Parts GitHub","title":"207 temperature Brick"},{"location":"8.FaBoBrick(I2C)/207_brick_i2c_Temprature/#207-temperature-brick","text":"","title":"#207 temperature Brick"},{"location":"8.FaBoBrick(I2C)/207_brick_i2c_Temprature/#overview","text":"","title":"Overview"},{"location":"8.FaBoBrick(I2C)/207_brick_i2c_Temprature/#connecting","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"Fabo_207_temprature\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define ADT7410_SLAVE_ADDRESS 0x48 ///< Default I2C Slave Address //Register Addresses #define ADT7410_TEMP_MSB_REG 0x00 #define ADT7410_TEMP_LSB_REG 0x01 #define ADT7410_STATUS_REG 0x02 #define ADT7410_CONFIGURATION_REG 0x03 #define ADT7410_WHO_AM_I_REG 0x0B //Config Parameter #define ADT7410_13BIT_RESOLUTION 0x00 #define ADT7410_16BIT_RESOLUTION 0x80 #define ADT7410_OP_MODE_CONTINUOUS 0x00 #define ADT7410_OP_MODE_ONESHOT 0x20 #define ADT7410_OP_MODE_SPS 0x40 #define ADT7410_OP_MODE_SHUTDOWN 0x60 #define ADT7410_INTERRUPT_MODE 0x00 #define ADT7410_COMPARATOR_MODE 0x10 #define ADT7410_INT_LOW 0x00 #define ADT7410_INT_HIGH 0x08 #define ADT7410_CT_LOW 0x00 #define ADT7410_CT_HIGH 0x04 #define ADT7410_16BIT_OP_MODE_1FAULT 0x00 #define ADT7410_16BIT_OP_MODE_2FAULT 0x01 #define ADT7410_16BIT_OP_MODE_3FAULT 0x02 #define ADT7410_16BIT_OP_MODE_4FAULT 0x03 void begin ( void ); void configure ( uint8_t config ); bool checkDataReady ( void ); float readTemperature ( void ); void writeI2c ( uint8_t address , uint8_t data ); void readI2c ( uint8_t address , uint8_t * data ); /* TWI instance. */ static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); void begin () { uint8_t config ; // config = ADT7410_13BIT_RESOLUTION; config = ADT7410_16BIT_RESOLUTION ; config |= ADT7410_16BIT_OP_MODE_1FAULT ; config |= ADT7410_CT_LOW ; config |= ADT7410_INT_LOW ; config |= ADT7410_INTERRUPT_MODE ; config |= ADT7410_OP_MODE_CONTINUOUS ; configure ( config ); } void configure ( uint8_t config ) { writeI2c ( ADT7410_CONFIGURATION_REG , config ); } bool checkDataReady () { uint8_t status ; readI2c ( ADT7410_STATUS_REG , & status ); if ( ( status & 0x80 ) ) { return false ; } else { return true ; } } float readTemperature () { uint8_t buffer [ 2 ]; uint16_t adc ; float temp ; int16_t val ; uint8_t config ; if ( checkDataReady () ) { nrf_delay_ms ( 10 ); readI2c ( ADT7410_CONFIGURATION_REG , & config ); nrf_delay_ms ( 40 ); readI2c ( ADT7410_TEMP_MSB_REG , buffer ); nrf_delay_ms ( 10 ); adc = ( uint16_t ) buffer [ 0 ] << 8 ; adc |= buffer [ 1 ]; val = ( long ) adc ; if ( ( config & 0x80 ) ) { // 13bit resolution adc >>= 3 ; if ( adc & 0x1000 ) { val = val - 8192 ; } temp = ( float ) val / 16.0F ; } else { // 16bit resolution if ( adc & 0x8000 ) { val = val - 65536 ; } temp = ( float ) val / 128.0F ; } return temp ; } else { return 0.0 ; } } void writeI2c ( uint8_t address , uint8_t data ) { uint32_t err_code ; uint8_t reg [ 2 ] = { address , data }; err_code = nrf_drv_twi_tx ( & m_twi , ADT7410_SLAVE_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 40 ); } void readI2c ( uint8_t address , uint8_t * data ) { nrf_delay_ms ( 10 ); uint32_t err_code ; uint8_t reg = address ; err_code = nrf_drv_twi_tx ( & m_twi , ADT7410_SLAVE_ADDRESS , & reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 100 ); err_code = nrf_drv_twi_rx ( & m_twi , ADT7410_SLAVE_ADDRESS , data , sizeof ( data )); APP_ERROR_CHECK ( err_code ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { switch ( p_event -> type ) { case NRF_DRV_TWI_EVT_DONE : if ( p_event -> xfer_desc . type == NRF_DRV_TWI_XFER_RX ) { } break ; default : break ; } } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_Temprature_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_Temprature_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \" \\r\\n Fabo_207_Temprature_Brick Sample \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); NRF_LOG_INFO ( \"RESET \\r\\n \" ); NRF_LOG_FLUSH (); begin (); while ( true ) { float a = readTemperature (); NRF_LOG_INFO ( \"Temperarue\" NRF_LOG_FLOAT_MARKER \" \\r\\n \" , a ); NRF_LOG_FLUSH (); nrf_delay_ms ( 1000 ); } }","title":"Connecting"},{"location":"8.FaBoBrick(I2C)/207_brick_i2c_Temprature/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"8.FaBoBrick(I2C)/207_brick_i2c_Temprature/#github","text":"","title":"GitHub"},{"location":"8.FaBoBrick(I2C)/210_brick_i2c_GPIO/","text":"#210 GPIO I2C Brick Overview \u6c4e\u7528I/O\u62e1\u5f35\u30c1\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I2C\u30678\u500b\u306eLED\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002 Connecting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" /* TWI instance ID. */ #define TWI_INSTANCE_ID 0 /* Common addresses definition for temperature sensor. */ #define PCAL6408 0x20 /* TWI instance. */ static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); uint16_t cmd [ 4 ] = { 0x00 , 0x01 , 0x02 , 0x03 }; uint8_t patern [ 9 ] = { 0x00 , 0x01 , 0x02 , 0x04 , 0x08 , 0x10 , 0x20 , 0x40 , 0x80 }; /** * @brief Function for setting active mode on MMA7660 accelerometer. */ void PCAL6408_set_mode ( void ) { ret_code_t err_code ; uint8_t reg [ 2 ] = { cmd [ 3 ], 0x00 }; err_code = nrf_drv_twi_tx ( & m_twi , PCAL6408 , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { } void twi_init ( void ) { ret_code_t err_code ; NRF_LOG_INFO ( \" \\r\\n TWI_init \\r\\n \" ); const nrf_drv_twi_config_t twi_PCAL6408_config = { . scl = 27 , . sda = 26 , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_PCAL6408_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } int main ( void ) { ret_code_t err_code ; APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \" \\r\\n FaboGPIO #210 \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); PCAL6408_set_mode (); while ( 1 ){ for ( int j = 0 ; j < 9 ; j ++ ){ uint8_t reg [ 2 ] = { cmd [ 1 ], patern [ j ]}; nrf_drv_twi_tx ( & m_twi , PCAL6408 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 500 ); } } } \u69cb\u6210Parts - NXP PCAL6408 GitHub","title":"210 GPIO I2C Brick"},{"location":"8.FaBoBrick(I2C)/210_brick_i2c_GPIO/#210-gpio-i2c-brick","text":"","title":"#210 GPIO I2C Brick"},{"location":"8.FaBoBrick(I2C)/210_brick_i2c_GPIO/#overview","text":"\u6c4e\u7528I/O\u62e1\u5f35\u30c1\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u305fBrick\u3067\u3059\u3002 I2C\u30678\u500b\u306eLED\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"8.FaBoBrick(I2C)/210_brick_i2c_GPIO/#connecting","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"APP\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" /* TWI instance ID. */ #define TWI_INSTANCE_ID 0 /* Common addresses definition for temperature sensor. */ #define PCAL6408 0x20 /* TWI instance. */ static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); uint16_t cmd [ 4 ] = { 0x00 , 0x01 , 0x02 , 0x03 }; uint8_t patern [ 9 ] = { 0x00 , 0x01 , 0x02 , 0x04 , 0x08 , 0x10 , 0x20 , 0x40 , 0x80 }; /** * @brief Function for setting active mode on MMA7660 accelerometer. */ void PCAL6408_set_mode ( void ) { ret_code_t err_code ; uint8_t reg [ 2 ] = { cmd [ 3 ], 0x00 }; err_code = nrf_drv_twi_tx ( & m_twi , PCAL6408 , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { } void twi_init ( void ) { ret_code_t err_code ; NRF_LOG_INFO ( \" \\r\\n TWI_init \\r\\n \" ); const nrf_drv_twi_config_t twi_PCAL6408_config = { . scl = 27 , . sda = 26 , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_PCAL6408_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } int main ( void ) { ret_code_t err_code ; APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \" \\r\\n FaboGPIO #210 \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); PCAL6408_set_mode (); while ( 1 ){ for ( int j = 0 ; j < 9 ; j ++ ){ uint8_t reg [ 2 ] = { cmd [ 1 ], patern [ j ]}; nrf_drv_twi_tx ( & m_twi , PCAL6408 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 500 ); } } }","title":"Connecting"},{"location":"8.FaBoBrick(I2C)/210_brick_i2c_GPIO/#parts","text":"- NXP PCAL6408","title":"\u69cb\u6210Parts"},{"location":"8.FaBoBrick(I2C)/210_brick_i2c_GPIO/#github","text":"","title":"GitHub"},{"location":"8.FaBoBrick(I2C)/213_brick_i2c_LCDMini/","text":"#213 LCD_Mini Brick Overview Connecting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"FaBo_LCDMini\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define AQM0802A_ADDRESS 0x3E #define CONTRAST 0x25 /* TWI instance. */ static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); void command ( uint8_t c ) { ret_code_t err_code ; uint8_t reg [ 2 ] = { 0x00 , c }; err_code = nrf_drv_twi_tx ( & m_twi , AQM0802A_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 30 ); } void send ( uint8_t d ) { ret_code_t err_code ; uint8_t reg [ 2 ] = { 0x40 , d }; err_code = nrf_drv_twi_tx ( & m_twi , AQM0802A_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 30 ); } void lcdprint ( char * c ) { while ( * c != 0 ){ send ( * c ++ ); } } void set_cursor ( uint8_t column , uint8_t row ){ switch ( row ){ case 0 : command ( column + 0x80 ); break ; case 1 : command ( column + 0xc0 ); break ; default : break ; } } void lcd_begin ( void ) { nrf_delay_ms ( 30 ); command ( 0x38 ); command ( 0x39 ); command ( 0x14 ); command ( 0x70 ); command ( 0x56 ); command ( 0x6B ); nrf_delay_ms ( 30 ); command ( 0x39 ); command ( 0x0C ); command ( 0x01 ); nrf_delay_ms ( 30 ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_LCD_Mini_config = { . scl = 27 , . sda = 26 , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_LCD_Mini_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \" \\r\\n Fabo LCDMini_213 \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); lcd_begin (); set_cursor ( 0 , 0 ); lcdprint ( \"Fabo\" ); set_cursor ( 0 , 1 ); lcdprint ( \"Shinobi\" ); nrf_delay_ms ( 500 ); while ( true ) { NRF_LOG_FLUSH (); } } \u69cb\u6210Parts GitHub","title":"213 LCD_Mini Brick"},{"location":"8.FaBoBrick(I2C)/213_brick_i2c_LCDMini/#213-lcd_mini-brick","text":"","title":"#213 LCD_Mini Brick"},{"location":"8.FaBoBrick(I2C)/213_brick_i2c_LCDMini/#overview","text":"","title":"Overview"},{"location":"8.FaBoBrick(I2C)/213_brick_i2c_LCDMini/#connecting","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 #include <stdio.h> #include \"boards.h\" #include \"app_util_platform.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define NRF_LOG_MODULE_NAME \"FaBo_LCDMini\" #include \"nrf_log.h\" #include \"nrf_log_ctrl.h\" #define TWI_INSTANCE_ID 0 #define AQM0802A_ADDRESS 0x3E #define CONTRAST 0x25 /* TWI instance. */ static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE ( TWI_INSTANCE_ID ); void command ( uint8_t c ) { ret_code_t err_code ; uint8_t reg [ 2 ] = { 0x00 , c }; err_code = nrf_drv_twi_tx ( & m_twi , AQM0802A_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 30 ); } void send ( uint8_t d ) { ret_code_t err_code ; uint8_t reg [ 2 ] = { 0x40 , d }; err_code = nrf_drv_twi_tx ( & m_twi , AQM0802A_ADDRESS , reg , sizeof ( reg ), false ); APP_ERROR_CHECK ( err_code ); nrf_delay_ms ( 30 ); } void lcdprint ( char * c ) { while ( * c != 0 ){ send ( * c ++ ); } } void set_cursor ( uint8_t column , uint8_t row ){ switch ( row ){ case 0 : command ( column + 0x80 ); break ; case 1 : command ( column + 0xc0 ); break ; default : break ; } } void lcd_begin ( void ) { nrf_delay_ms ( 30 ); command ( 0x38 ); command ( 0x39 ); command ( 0x14 ); command ( 0x70 ); command ( 0x56 ); command ( 0x6B ); nrf_delay_ms ( 30 ); command ( 0x39 ); command ( 0x0C ); command ( 0x01 ); nrf_delay_ms ( 30 ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { } void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_LCD_Mini_config = { . scl = 27 , . sda = 26 , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH , . clear_bus_init = false }; err_code = nrf_drv_twi_init ( & m_twi , & twi_LCD_Mini_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi ); } int main ( void ) { APP_ERROR_CHECK ( NRF_LOG_INIT ( NULL )); NRF_LOG_INFO ( \" \\r\\n Fabo LCDMini_213 \\r\\n \" ); NRF_LOG_FLUSH (); twi_init (); lcd_begin (); set_cursor ( 0 , 0 ); lcdprint ( \"Fabo\" ); set_cursor ( 0 , 1 ); lcdprint ( \"Shinobi\" ); nrf_delay_ms ( 500 ); while ( true ) { NRF_LOG_FLUSH (); } }","title":"Connecting"},{"location":"8.FaBoBrick(I2C)/213_brick_i2c_LCDMini/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"8.FaBoBrick(I2C)/213_brick_i2c_LCDMini/#github","text":"","title":"GitHub"},{"location":"9.FaBoBrick(Serial)/302Buletooth_Serial/","text":"#302 Buletooth Serial Brick Overview Bluetooth\u901a\u4fe1\u304c\u3067\u304d\u308bBrick\u3067\u3059\u3002 PC\u3084\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306a\u3069\u306e\u7aef\u672b\u3068\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Connecting Wifi Brick\u306f\u3000Arduino D9,CN10 mopho pin 4pin\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u5199\u771f\u306f\u958b\u767a\u4e2d\u306e\u3082\u306e\u3067\u3059\u3002 DMA\u306b\u3088\u308b\u901a\u4fe1 DMA\u306f\uff23\uff30\uff35\u3092\u4ef2\u4ecb\u305b\u305a\u76f4\u63a5\u30e1\u30e2\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3057\u30c7\u30fc\u30bf\u3092\u9001\u53d7\u4fe1\u3057\u307e\u3059\u3002\u305d\u306e\u9593\u306f\u3001\uff23\uff30\uff35\u306f\u4ed6\u306e\u51e6\u7406\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\u3001DMA\u304c\u30d0\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u306e\u3067\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002","title":"302 Buletooth Serial Brick"},{"location":"9.FaBoBrick(Serial)/302Buletooth_Serial/#302-buletooth-serial-brick","text":"","title":"#302 Buletooth Serial Brick"},{"location":"9.FaBoBrick(Serial)/302Buletooth_Serial/#overview","text":"Bluetooth\u901a\u4fe1\u304c\u3067\u304d\u308bBrick\u3067\u3059\u3002 PC\u3084\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306a\u3069\u306e\u7aef\u672b\u3068\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"9.FaBoBrick(Serial)/302Buletooth_Serial/#connecting","text":"Wifi Brick\u306f\u3000Arduino D9,CN10 mopho pin 4pin\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u5199\u771f\u306f\u958b\u767a\u4e2d\u306e\u3082\u306e\u3067\u3059\u3002","title":"Connecting"},{"location":"9.FaBoBrick(Serial)/302Buletooth_Serial/#dma","text":"DMA\u306f\uff23\uff30\uff35\u3092\u4ef2\u4ecb\u305b\u305a\u76f4\u63a5\u30e1\u30e2\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3057\u30c7\u30fc\u30bf\u3092\u9001\u53d7\u4fe1\u3057\u307e\u3059\u3002\u305d\u306e\u9593\u306f\u3001\uff23\uff30\uff35\u306f\u4ed6\u306e\u51e6\u7406\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\u3001DMA\u304c\u30d0\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u306e\u3067\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002","title":"DMA\u306b\u3088\u308b\u901a\u4fe1"},{"location":"9.FaBoBrick(Serial)/304USB_Serial/","text":"#304 USB Serial Brick Overview FT232RL\u3092\u4f7f\u7528\u3057\u305f\u3001USB\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u304c\u3067\u304d\u308bBrick\u3067\u3059\u3002 mac\u3000screen\u30b3\u30de\u30f3\u30c9\u3067 screen /dev/tty. * * 115200 \u7d42\u4e86\u5f8c\u306fscreen -r \u3067\u5fa9\u6d3b\u3067\u304d\u308b\u3002 screen -ls\u3067\u3082\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u78ba\u8a8d\u3002 \u7d42\u4e86\u3059\u308b\u306e\u306f\u3001 control \u62bc\u3057\u306a\u304c\u3089\u3000a ,k\u3068\u62bc\u3059\u3002 Connecting Serial\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\u3057\u3001MicroUSB\u30b3\u30cd\u30af\u30bf\u3092\u4ed6\u306e\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002Necleo\u306ei/o\u306f3.3V\u3067\u99c6\u52d5\u3057\u307e\u3059\u306e\u3067USB Brick\u306e\u96fb\u5727\u30b9\u30a4\u30c3\u30c1\u30923.3V\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 sdk_config.h printf\u3067\u51fa\u529b\u3059\u308b\u8a2d\u5b9a\u3002 Sample Code 1 \u69cb\u6210Parts - GitHub","title":"304 USB Serial Brick"},{"location":"9.FaBoBrick(Serial)/304USB_Serial/#304-usb-serial-brick","text":"","title":"#304 USB Serial Brick"},{"location":"9.FaBoBrick(Serial)/304USB_Serial/#overview","text":"FT232RL\u3092\u4f7f\u7528\u3057\u305f\u3001USB\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u304c\u3067\u304d\u308bBrick\u3067\u3059\u3002 mac\u3000screen\u30b3\u30de\u30f3\u30c9\u3067 screen /dev/tty. * * 115200 \u7d42\u4e86\u5f8c\u306fscreen -r \u3067\u5fa9\u6d3b\u3067\u304d\u308b\u3002 screen -ls\u3067\u3082\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u78ba\u8a8d\u3002 \u7d42\u4e86\u3059\u308b\u306e\u306f\u3001 control \u62bc\u3057\u306a\u304c\u3089\u3000a ,k\u3068\u62bc\u3059\u3002","title":"Overview"},{"location":"9.FaBoBrick(Serial)/304USB_Serial/#connecting","text":"Serial\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\u3057\u3001MicroUSB\u30b3\u30cd\u30af\u30bf\u3092\u4ed6\u306e\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002Necleo\u306ei/o\u306f3.3V\u3067\u99c6\u52d5\u3057\u307e\u3059\u306e\u3067USB Brick\u306e\u96fb\u5727\u30b9\u30a4\u30c3\u30c1\u30923.3V\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 sdk_config.h printf\u3067\u51fa\u529b\u3059\u308b\u8a2d\u5b9a\u3002","title":"Connecting"},{"location":"9.FaBoBrick(Serial)/304USB_Serial/#sample-code","text":"1","title":"Sample Code"},{"location":"9.FaBoBrick(Serial)/304USB_Serial/#parts","text":"-","title":"\u69cb\u6210Parts"},{"location":"9.FaBoBrick(Serial)/304USB_Serial/#github","text":"","title":"GitHub"},{"location":"9.FaBoBrick(Serial)/305Wifi_Serial/","text":"#305 Wifi Serial Brick Overview Wifi\u901a\u4fe1\u304c\u3067\u304d\u308bBrick\u3067\u3059\u3002 Connecting Wifi Brick\u306f\u3000Arduino D9,CN10 mopho pin 4pin\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u5199\u771f\u306f\u958b\u767a\u4e2d\u306e\u3082\u306e\u3067\u3059\u3002 \u30dd\u30fc\u30ea\u30f3\u30b0\u306b\u3088\u308b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1","title":"305 Wifi Serial Brick"},{"location":"9.FaBoBrick(Serial)/305Wifi_Serial/#305-wifi-serial-brick","text":"","title":"#305 Wifi Serial Brick"},{"location":"9.FaBoBrick(Serial)/305Wifi_Serial/#overview","text":"Wifi\u901a\u4fe1\u304c\u3067\u304d\u308bBrick\u3067\u3059\u3002","title":"Overview"},{"location":"9.FaBoBrick(Serial)/305Wifi_Serial/#connecting","text":"Wifi Brick\u306f\u3000Arduino D9,CN10 mopho pin 4pin\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u5199\u771f\u306f\u958b\u767a\u4e2d\u306e\u3082\u306e\u3067\u3059\u3002","title":"Connecting"},{"location":"9.FaBoBrick(Serial)/305Wifi_Serial/#_1","text":"","title":"\u30dd\u30fc\u30ea\u30f3\u30b0\u306b\u3088\u308b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1"},{"location":"9.FaBoBrick(Serial)/NUS/","text":"#NUS \u30bb\u30f3\u30c8\u30e9\u30eb\u3068\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u9593\u3067\u63a5\u7d9a\u3057\u3001GATT\u3078\u66f8\u304d\u8fbc\u3080\u306e\u3067\u3059\u304cUART\u306e\u3088\u3046\u306b\u4f7f\u3048\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002 Nordic\u306e\u72ec\u81ea\u306eBLE\u30b5\u30fc\u30d3\u30b9\u3067\u3001Bluetooth\u30af\u30e9\u30b7\u30c3\u30afRFCOMM\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\uff08UART over BT\uff09\u306e\u69d8\u306aUART Service\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u307e\u3059\u3002 \u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u7c21\u5358\u306b\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306a\u3069\u306e\u30bb\u30f3\u30c8\u30e9\u30eb\u304b\u3089\u6587\u5b57\u3092\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002 GATT\u306f\u3001\uff14\u3064\u306eRX\uff08\u66f8\u304d\u8fbc\u307f\uff09\u3001\uff12\u3064TX\uff08\u901a\u77e5\uff09\u306e\u30c7\u30fc\u30bf\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 \u53c2\u7167 http://infocenter.nordicsemi.com/index.jsp","title":"NUS"},{"location":"9.FaBoBrick(Serial)/NUS/#nus","text":"\u30bb\u30f3\u30c8\u30e9\u30eb\u3068\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u9593\u3067\u63a5\u7d9a\u3057\u3001GATT\u3078\u66f8\u304d\u8fbc\u3080\u306e\u3067\u3059\u304cUART\u306e\u3088\u3046\u306b\u4f7f\u3048\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002 Nordic\u306e\u72ec\u81ea\u306eBLE\u30b5\u30fc\u30d3\u30b9\u3067\u3001Bluetooth\u30af\u30e9\u30b7\u30c3\u30afRFCOMM\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\uff08UART over BT\uff09\u306e\u69d8\u306aUART Service\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u307e\u3059\u3002 \u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u7c21\u5358\u306b\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306a\u3069\u306e\u30bb\u30f3\u30c8\u30e9\u30eb\u304b\u3089\u6587\u5b57\u3092\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002 GATT\u306f\u3001\uff14\u3064\u306eRX\uff08\u66f8\u304d\u8fbc\u307f\uff09\u3001\uff12\u3064TX\uff08\u901a\u77e5\uff09\u306e\u30c7\u30fc\u30bf\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002","title":"#NUS"},{"location":"9.FaBoBrick(Serial)/NUS/#_1","text":"http://infocenter.nordicsemi.com/index.jsp","title":"\u53c2\u7167"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/","text":"\u96fb\u529b\u6e2c\u5b9a\u306e\u65b9\u6cd5 PCA63511 Overview Nordic Semiconductor PowerProfilerKit\uff08PPK\uff09\u3092\u4f7f\u3048\u3070\u3001\u9ad8\u4fa1\u306aDC\u96fb\u6e90\u3084\u6e2c\u5b9a\u5668\u304c\u306a\u304f\u3068\u3082\u3001\u5b89\u304f\u3001\u7c21\u5358\u306b\u96fb\u529b\u3092\u8a08\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u6e2c\u5b9a\u7528\u30de\u30a4\u30b3\u30f3\u306f\u3001PPK\u4e0a\u306b\u3042\u308bNordic Semiconductor NRF52832(Cortex-M4F)\u3067\u3059\u3002\u6e2c\u5b9a\u7bc4\u56f2\u306f1\u03bcA\uff5e70\uff4dA\uff08\u6700\u5c0f\u5206\u89e3\u80fd0.2\u03bcA\uff09\u6e2c\u5b9a\u7cbe\u5ea6\u306f\u00b1\uff12\uff10\uff05\u3001\u6700\u5c0f13\u03bc\u79d2\u3067\u8868\u793a\u53ef\u80fd\u3067\u3059\u3002 \u6e2c\u5b9a\u306e\u65b9\u6cd5 PPK\u4e0a\u306b\u3042\u308b\u3001nRF52832\u306eADC\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u88ab\u8a66\u9a13\u30c7\u30d0\u30a4\u30b9\u306e\u96fb\u6e90\u306b\u30b7\u30e3\u30f3\u30c8\u62b5\u6297\u3092\u76f4\u5217\u306b\u63a5\u7d9a\u3057\u3001\u62b5\u6297\u9593\u306e\u96fb\u5727\u964d\u4e0b\u306b\u3088\u308a\u96fb\u6d41\u5024\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u96fb\u6d41\u6e2c\u5b9a\u7bc4\u56f2\u306b\u3088\u308a\u3001\uff13\u3064\u306e\u6e2c\u5b9a\u56de\u8def\u304c\u3042\u308a\u3001\u81ea\u52d5\u7684\u306b\u9078\u629e\u3055\u308c\u307e\u3059\u3002 \u96fb\u6e90\u4f9b\u7d66 DK\u30dc\u30fc\u30c9\u3001PowerProfilerKit\uff08USB5V\u5916\u90e8 Max70mA,\u96fb\u5727\u8abf\u6574\u53ef\u80fd\uff09\u3001\u5916\u90e8\u96fb\u6e90(1.8V~3.6V)\u304b\u3089\u306e3\u7a2e\u985e\u304b\u3089\u9078\u629e\u3002\u540c\u671f\u30c8\u30ea\u30ac\u30fcIN\u3001OUT\u642d\u8f09\u3002\u30aa\u30b7\u30ed\u30b9\u30b3\u30fc\u30d7\u3084\u30ed\u30b8\u30c3\u30af\u30a2\u30ca\u30e9\u30a4\u30b6\u30fc\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 \u30b9\u30a4\u30c3\u30c1 PPK\u306b\u306f\u3001DUT Select,PowerSelect,SEGGER J-Link select\u306e\uff13\u3064\u306e\u30b9\u30a4\u30c3\u30c1\u304c\u3042\u308a\u307e\u3059\u3002 DUT select(SW2) nRF52\u30dc\u30fc\u30c9\u3042\u308b\u3044\u306f\u3001\u5916\u90e8\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u9078\u629e\u3059\u308b\u3002 DK nRF52\u30dc\u30fc\u30c9 External\u3000\u5916\u90e8\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2 Power select(SW4) DUT\u3078\u4f9b\u7d66\u3059\u308b\u96fb\u6e90\u306e\u9078\u629e\u3002 DK\u3000\u5916\u90e8\u304b\u3089\u306e\u96fb\u6e90\u3002 Reg \u5916\u90e8\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u7528 Eternal \u5916\u90e8\u304b\u3089\u96fb\u6e90\u7528 COM(SW3) PPK\u306eSoc\u3068\u63a5\u7d9a\u3059\u308bJ-Link\u306e\u9078\u629e\u3059\u308b\u30b9\u30a4\u30c3\u30c1\u3002 DK DK\u30ad\u30c3\u30c8\u306eJ-Link\u3092\u4f7f\u7528\u3059\u308b\u3002\uff08PPK\u306eSoc\u3092\u30c7\u30d0\u30c3\u30af\u3059\u308b\u5834\u5408\uff09 EXT \u5916\u90e8\u304b\u3089\u306eJ-Link\u3092\u4f7f\u7528\u3059\u308b\u3002\uff08DK\u30dc\u30fc\u30c9\u306eSoc\u3092\u30c7\u30d0\u30c3\u30af\u3059\u308b\u5834\u5408\uff09 \u203b\u901a\u5e38\u306f\u3001DK\u5074\u306b\u3059\u308b\u3002 PC\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Python\u3092\u5229\u7528\u3057\u305f\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u65b9\u6cd5\u3067\u6e2c\u5b9a\u3057\u307e\u3059\u3002Windows\u306e\u5834\u5408\u3001Windows\u7248nRFConnect\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Windows\u7248\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 nRFConnect\u3092\u8d77\u52d5\u3057\u3001Add/remove apps\u3092\u9078\u3073\u3001PowerProfiler\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 LanchApp\u3092\u9078\u629e\u3057\u3001PowerProfiler\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002ComPort\u3092\u9069\u5207\u306b\u9078\u629e\u3057\u307e\u3059\u3002 \u4e0b\u8a18\u306e\u3088\u3046\u306a\u3001\u753b\u9762\u304c\u73fe\u308c\u3001DK\u30dc\u30fc\u30c9\u306e\u30dd\u30fc\u30c8\u3092\u9078\u629e\u3057\u3001\u6b63\u5e38\u306e\u5834\u5408\u3001\u3057\u3070\u3089\u304f\u7d4c\u3064\u3068\u6ce2\u5f62\u304c\u73fe\u308c\u307e\u3059\u3002 \u4e0a\u5074\u306e\u6ce2\u5f62\u306f\u3001\u9577\u6642\u9593\u306e\u6ce2\u5f62 \u4e0b\u5074\u306e\u6ce2\u5f62\u306f\u3001\u77ed\u6642\u9593\u306e\u30c8\u30ea\u30ac\u30fc\u306b\u3088\u3063\u3066\u8868\u793a\u3055\u308c\u308b\u6ce2\u5f62 \u5e73\u5747\u5024\u304cAVG\u3067\u3042\u308a\u3001\u3053\u308c\u306b\u3088\u308a\u96fb\u6c60\u5bff\u547d\u304a\u304a\u3088\u305d\u306e\u96fb\u6c60\u5bff\u547d\u304c\u308f\u304b\u308b\u3002 \u30d4\u30fc\u30af\u96fb\u6d41\u304c\u3068\u3089\u308f\u308c\u3084\u3059\u3044\u3067\u3059\u304c\u3001\u30b9\u30ea\u30fc\u30d7\u96fb\u6d41\u304c\u5c11\u306a\u3044\u3068\u9577\u5bff\u547d\u3067\u3059\u3002 \u30de\u30f3\u30ac\u30f3\u96fb\u6c60\u3084\u30a2\u30eb\u30ab\u30ea\u96fb\u6c60\u306f\u3001\u81ea\u5df1\u653e\u96fb\u304c\u9ad8\u304f\u88fd\u9020\u304b\u3089\u306e\u6642\u9593\u306b\u3088\u308a\u4fdd\u6709\u3057\u3066\u3044\u308b\u96fb\u6c60\u5bb9\u91cf\u3084\u88fd\u9020\u6642\u306e\u88fd\u54c1\u306e\u3070\u3089\u3064\u304d\u306b\u3088\u308a\u5909\u308f\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3001\u6e29\u5ea6\u3084\u96fb\u6d41\u306e\u53d6\u308a\u51fa\u3057\u65b9\u6cd5\u3067\u5bb9\u91cf\u3082\u5909\u5316\u3059\u308b\u3002\u96fb\u6c60\u30e1\u30fc\u30ab\u30fc\u306e\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u8a08\u7b97\u306e\uff11\uff0f\uff12\u304b\u3089\uff11\uff0f\uff13\u3050\u3089\u3044\u3042\u308b\u3068\u5b89\u5fc3\u3067\u3059\u3002 \u30ea\u30c1\u30a6\u30e0\u30b3\u30a4\u30f3\u96fb\u6c60\u306f\u81ea\u5df1\u653e\u96fb\u304c\u5c11\u306a\u304f\u3001\u5927\u304d\u306a\u96fb\u6d41\u306f\u6d41\u305b\u307e\u305b\u3093\u304c\u3001\u6e29\u5ea6\u5909\u5316\u306b\u3082\u5f37\u304f\u3001\u96fb\u6c60\u5bff\u547d\u304c\u8a08\u7b97\u3057\u3084\u3059\u3044\u3002\u4f8b\u3048\u3070\u3001CR2477\u306f1000mAh\u3067\u3042\u308a\u3001\u5e73\u5747\u96fb\u6d41\u304c1mA\u3067\u3042\u308c\u30701000mAh/1mA\u304b\u30891000\u6642\u9593\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u8a08\u7b97\u306e\uff18\uff10\uff05\u3068\u3057\u3066\u8a08\u7b97\u3057\u305f\u307b\u3046\u304c\u5b89\u5fc3\u3067\u3059\u3002 \u63a5\u7d9a\u4f8b nRF52DK,nRF51Dk\u3042\u308b\u3044\u306f\u3001nRF52840-PDK\u3092\u30d9\u30fc\u30b9\u306bPPK\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u30de\u30a4\u30af\u30edUSB\u30b1\u30fc\u30d6\u30eb\u3067DK\u30dc\u30fc\u30c9\u306eUSB\u30dd\u30fc\u30c8\u3068\u30d1\u30bd\u30b3\u30f3\u306eUSB\u30dd\u30fc\u30c8\u306b\u63a5\u7d9a \u96fb\u6e90\u30b3\u30cd\u30af\u30bf\u3067DUT(\u88ab\u8a66\u9a13\u30c7\u30d0\u30a4\u30b9\uff09\u3068PPK\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u30b9\u30a4\u30c3\u30c1\u306f\u3001SW2\u3092Eternal,SW4\u3092Reg.\u306b\u3059\u308b\u3002COM\u306f\u3001DK\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002 PPK\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u66f4\u65b0 Nordic Profiler Kit\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30bf\u30d6\u304b\u3089nRF6707-SW\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 PPK\u306eSoc\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306f\u3001ppk_110.hex\u3067\u3059\u3002\u66f4\u65b0\u3055\u308c\u308b\u5834\u5408\u306f\u3001nRFgoStudio\u3084flash_ppk.py\u306e\u30d5\u30a1\u30a4\u30eb\u5b9f\u884c\u3067\u66f4\u65b0\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003 http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.tools%2Fdita%2Ftools%2Fpower_profiler_kit%2FPPK_user_guide_Intro.html https://www.nordicsemi.com/eng/Products/Power-Profiler-Kit","title":"\u96fb\u529b\u6e2c\u5b9a\u306e\u65b9\u6cd5"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#_1","text":"PCA63511","title":"\u96fb\u529b\u6e2c\u5b9a\u306e\u65b9\u6cd5"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#overview","text":"Nordic Semiconductor PowerProfilerKit\uff08PPK\uff09\u3092\u4f7f\u3048\u3070\u3001\u9ad8\u4fa1\u306aDC\u96fb\u6e90\u3084\u6e2c\u5b9a\u5668\u304c\u306a\u304f\u3068\u3082\u3001\u5b89\u304f\u3001\u7c21\u5358\u306b\u96fb\u529b\u3092\u8a08\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u6e2c\u5b9a\u7528\u30de\u30a4\u30b3\u30f3\u306f\u3001PPK\u4e0a\u306b\u3042\u308bNordic Semiconductor NRF52832(Cortex-M4F)\u3067\u3059\u3002\u6e2c\u5b9a\u7bc4\u56f2\u306f1\u03bcA\uff5e70\uff4dA\uff08\u6700\u5c0f\u5206\u89e3\u80fd0.2\u03bcA\uff09\u6e2c\u5b9a\u7cbe\u5ea6\u306f\u00b1\uff12\uff10\uff05\u3001\u6700\u5c0f13\u03bc\u79d2\u3067\u8868\u793a\u53ef\u80fd\u3067\u3059\u3002","title":"Overview"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#_2","text":"PPK\u4e0a\u306b\u3042\u308b\u3001nRF52832\u306eADC\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u88ab\u8a66\u9a13\u30c7\u30d0\u30a4\u30b9\u306e\u96fb\u6e90\u306b\u30b7\u30e3\u30f3\u30c8\u62b5\u6297\u3092\u76f4\u5217\u306b\u63a5\u7d9a\u3057\u3001\u62b5\u6297\u9593\u306e\u96fb\u5727\u964d\u4e0b\u306b\u3088\u308a\u96fb\u6d41\u5024\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u96fb\u6d41\u6e2c\u5b9a\u7bc4\u56f2\u306b\u3088\u308a\u3001\uff13\u3064\u306e\u6e2c\u5b9a\u56de\u8def\u304c\u3042\u308a\u3001\u81ea\u52d5\u7684\u306b\u9078\u629e\u3055\u308c\u307e\u3059\u3002","title":"\u6e2c\u5b9a\u306e\u65b9\u6cd5"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#_3","text":"DK\u30dc\u30fc\u30c9\u3001PowerProfilerKit\uff08USB5V\u5916\u90e8 Max70mA,\u96fb\u5727\u8abf\u6574\u53ef\u80fd\uff09\u3001\u5916\u90e8\u96fb\u6e90(1.8V~3.6V)\u304b\u3089\u306e3\u7a2e\u985e\u304b\u3089\u9078\u629e\u3002\u540c\u671f\u30c8\u30ea\u30ac\u30fcIN\u3001OUT\u642d\u8f09\u3002\u30aa\u30b7\u30ed\u30b9\u30b3\u30fc\u30d7\u3084\u30ed\u30b8\u30c3\u30af\u30a2\u30ca\u30e9\u30a4\u30b6\u30fc\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002","title":"\u96fb\u6e90\u4f9b\u7d66"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#_4","text":"PPK\u306b\u306f\u3001DUT Select,PowerSelect,SEGGER J-Link select\u306e\uff13\u3064\u306e\u30b9\u30a4\u30c3\u30c1\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u30b9\u30a4\u30c3\u30c1"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#dut-selectsw2","text":"nRF52\u30dc\u30fc\u30c9\u3042\u308b\u3044\u306f\u3001\u5916\u90e8\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u9078\u629e\u3059\u308b\u3002 DK nRF52\u30dc\u30fc\u30c9 External\u3000\u5916\u90e8\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2","title":"DUT select(SW2)"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#power-selectsw4","text":"DUT\u3078\u4f9b\u7d66\u3059\u308b\u96fb\u6e90\u306e\u9078\u629e\u3002 DK\u3000\u5916\u90e8\u304b\u3089\u306e\u96fb\u6e90\u3002 Reg \u5916\u90e8\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u7528 Eternal \u5916\u90e8\u304b\u3089\u96fb\u6e90\u7528","title":"Power select(SW4)"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#comsw3","text":"PPK\u306eSoc\u3068\u63a5\u7d9a\u3059\u308bJ-Link\u306e\u9078\u629e\u3059\u308b\u30b9\u30a4\u30c3\u30c1\u3002 DK DK\u30ad\u30c3\u30c8\u306eJ-Link\u3092\u4f7f\u7528\u3059\u308b\u3002\uff08PPK\u306eSoc\u3092\u30c7\u30d0\u30c3\u30af\u3059\u308b\u5834\u5408\uff09 EXT \u5916\u90e8\u304b\u3089\u306eJ-Link\u3092\u4f7f\u7528\u3059\u308b\u3002\uff08DK\u30dc\u30fc\u30c9\u306eSoc\u3092\u30c7\u30d0\u30c3\u30af\u3059\u308b\u5834\u5408\uff09 \u203b\u901a\u5e38\u306f\u3001DK\u5074\u306b\u3059\u308b\u3002","title":"COM(SW3)"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#pc","text":"Python\u3092\u5229\u7528\u3057\u305f\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u65b9\u6cd5\u3067\u6e2c\u5b9a\u3057\u307e\u3059\u3002Windows\u306e\u5834\u5408\u3001Windows\u7248nRFConnect\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Windows\u7248\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 nRFConnect\u3092\u8d77\u52d5\u3057\u3001Add/remove apps\u3092\u9078\u3073\u3001PowerProfiler\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 LanchApp\u3092\u9078\u629e\u3057\u3001PowerProfiler\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002ComPort\u3092\u9069\u5207\u306b\u9078\u629e\u3057\u307e\u3059\u3002 \u4e0b\u8a18\u306e\u3088\u3046\u306a\u3001\u753b\u9762\u304c\u73fe\u308c\u3001DK\u30dc\u30fc\u30c9\u306e\u30dd\u30fc\u30c8\u3092\u9078\u629e\u3057\u3001\u6b63\u5e38\u306e\u5834\u5408\u3001\u3057\u3070\u3089\u304f\u7d4c\u3064\u3068\u6ce2\u5f62\u304c\u73fe\u308c\u307e\u3059\u3002 \u4e0a\u5074\u306e\u6ce2\u5f62\u306f\u3001\u9577\u6642\u9593\u306e\u6ce2\u5f62 \u4e0b\u5074\u306e\u6ce2\u5f62\u306f\u3001\u77ed\u6642\u9593\u306e\u30c8\u30ea\u30ac\u30fc\u306b\u3088\u3063\u3066\u8868\u793a\u3055\u308c\u308b\u6ce2\u5f62 \u5e73\u5747\u5024\u304cAVG\u3067\u3042\u308a\u3001\u3053\u308c\u306b\u3088\u308a\u96fb\u6c60\u5bff\u547d\u304a\u304a\u3088\u305d\u306e\u96fb\u6c60\u5bff\u547d\u304c\u308f\u304b\u308b\u3002 \u30d4\u30fc\u30af\u96fb\u6d41\u304c\u3068\u3089\u308f\u308c\u3084\u3059\u3044\u3067\u3059\u304c\u3001\u30b9\u30ea\u30fc\u30d7\u96fb\u6d41\u304c\u5c11\u306a\u3044\u3068\u9577\u5bff\u547d\u3067\u3059\u3002 \u30de\u30f3\u30ac\u30f3\u96fb\u6c60\u3084\u30a2\u30eb\u30ab\u30ea\u96fb\u6c60\u306f\u3001\u81ea\u5df1\u653e\u96fb\u304c\u9ad8\u304f\u88fd\u9020\u304b\u3089\u306e\u6642\u9593\u306b\u3088\u308a\u4fdd\u6709\u3057\u3066\u3044\u308b\u96fb\u6c60\u5bb9\u91cf\u3084\u88fd\u9020\u6642\u306e\u88fd\u54c1\u306e\u3070\u3089\u3064\u304d\u306b\u3088\u308a\u5909\u308f\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3001\u6e29\u5ea6\u3084\u96fb\u6d41\u306e\u53d6\u308a\u51fa\u3057\u65b9\u6cd5\u3067\u5bb9\u91cf\u3082\u5909\u5316\u3059\u308b\u3002\u96fb\u6c60\u30e1\u30fc\u30ab\u30fc\u306e\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u8a08\u7b97\u306e\uff11\uff0f\uff12\u304b\u3089\uff11\uff0f\uff13\u3050\u3089\u3044\u3042\u308b\u3068\u5b89\u5fc3\u3067\u3059\u3002 \u30ea\u30c1\u30a6\u30e0\u30b3\u30a4\u30f3\u96fb\u6c60\u306f\u81ea\u5df1\u653e\u96fb\u304c\u5c11\u306a\u304f\u3001\u5927\u304d\u306a\u96fb\u6d41\u306f\u6d41\u305b\u307e\u305b\u3093\u304c\u3001\u6e29\u5ea6\u5909\u5316\u306b\u3082\u5f37\u304f\u3001\u96fb\u6c60\u5bff\u547d\u304c\u8a08\u7b97\u3057\u3084\u3059\u3044\u3002\u4f8b\u3048\u3070\u3001CR2477\u306f1000mAh\u3067\u3042\u308a\u3001\u5e73\u5747\u96fb\u6d41\u304c1mA\u3067\u3042\u308c\u30701000mAh/1mA\u304b\u30891000\u6642\u9593\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u8a08\u7b97\u306e\uff18\uff10\uff05\u3068\u3057\u3066\u8a08\u7b97\u3057\u305f\u307b\u3046\u304c\u5b89\u5fc3\u3067\u3059\u3002","title":"PC\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#_5","text":"nRF52DK,nRF51Dk\u3042\u308b\u3044\u306f\u3001nRF52840-PDK\u3092\u30d9\u30fc\u30b9\u306bPPK\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u30de\u30a4\u30af\u30edUSB\u30b1\u30fc\u30d6\u30eb\u3067DK\u30dc\u30fc\u30c9\u306eUSB\u30dd\u30fc\u30c8\u3068\u30d1\u30bd\u30b3\u30f3\u306eUSB\u30dd\u30fc\u30c8\u306b\u63a5\u7d9a \u96fb\u6e90\u30b3\u30cd\u30af\u30bf\u3067DUT(\u88ab\u8a66\u9a13\u30c7\u30d0\u30a4\u30b9\uff09\u3068PPK\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u30b9\u30a4\u30c3\u30c1\u306f\u3001SW2\u3092Eternal,SW4\u3092Reg.\u306b\u3059\u308b\u3002COM\u306f\u3001DK\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002","title":"\u63a5\u7d9a\u4f8b"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#ppk","text":"Nordic Profiler Kit\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30bf\u30d6\u304b\u3089nRF6707-SW\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 PPK\u306eSoc\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306f\u3001ppk_110.hex\u3067\u3059\u3002\u66f4\u65b0\u3055\u308c\u308b\u5834\u5408\u306f\u3001nRFgoStudio\u3084flash_ppk.py\u306e\u30d5\u30a1\u30a4\u30eb\u5b9f\u884c\u3067\u66f4\u65b0\u3067\u304d\u307e\u3059\u3002","title":"PPK\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u66f4\u65b0"},{"location":"a.\u7701\u96fb\u529b/PowerMeasure/#_6","text":"http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.tools%2Fdita%2Ftools%2Fpower_profiler_kit%2FPPK_user_guide_Intro.html https://www.nordicsemi.com/eng/Products/Power-Profiler-Kit","title":"\u53c2\u8003"},{"location":"a.\u7701\u96fb\u529b/PowerMeasureNotes/","text":"\u96fb\u529b\u5236\u5fa1 NRF52\u306b\u9650\u3089\u305a\u96fb\u6c60\u3067\u904b\u7528\u3059\u308b\u91cd\u8981\u306a\u8981\u7d20\u306b\u96fb\u529b\u5236\u5fa1\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002ARM\u30b3\u30a2\u3092\u30b9\u30ea\u30fc\u30d7\u72b6\u614b\u3084 \u30b9\u30bf\u30f3\u30d0\u30a4\u72b6\u614b\u306b\u3059\u308b\u306f\u3082\u3061\u308d\u3093\u3001\u5468\u8fba\u6a5f\u80fd\u3092\u30aa\u30f3\u30aa\u30d5\u3057\u305f\u308a\u3001\u964d\u5727DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u6709\u52b9\u3057\u3066\u4f4e\u96fb\u5727\u5316\u3002 \u4ed6\u306b\u3082RAM\u3092\u4fdd\u6301\u3059\u308b\u306e\u3082\u5e38\u6642\u96fb\u529b\u3092\u6d88\u8cbb\u3057\u307e\u3059\u3002NRF52\u306f4KB\u3064\u3065\u4fdd\u6301\u3092\u6307\u5b9a\u51fa\u6765\u307e\u3059\u3002\u304d\u3081 \u7d30\u304b\u306a\u5236\u5fa1\u51fa\u6765\u307e\u3059\u3002 \u7701\u96fb\u529b\u306b\u95a2\u3059\u308b\u30e1\u30e2 Shinobi\u306b\u306f\u3001\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u306b\u3088\u308b\u96fb\u5727\u3092\u964d\u5727\u3057\u3066\u30d4\u30fc\u30af\u96fb\u529b\u3092\u7d04\uff11\uff16mA\u304b\u3089\uff19mA\u3067\u52d5\u4f5c\u3067\u304d\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u306b\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u8a2d\u5b9a\u3092\u6709\u52b9\u5316\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 LED\u306f\u3001\u7d041mA\u7a0b\u5ea6\u6d88\u8cbb\u3057\u307e\u3059\u306e\u3067\u6d88\u706f\u3057\u305f\u65b9\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002\u307e\u305f\u3001\u96fb\u6c60\u304c\u6d88\u8017\u3057\u30662.5V\u7a0b\u5ea6\u306b\u306a\u308b\u3068\u3001LED\u304c\u6697\u304f\u306a\u308a\u3084\u304c\u3066\u5149\u308a\u307e\u305b\u3093\u3002 \u6761\u4ef6\u306b\u3088\u308a\u307e\u3059\u304c\u3001\u53c2\u8003\u7a0b\u5ea6\u3000 \u5e73\u5747\u96fb\u6d41\u306f\u3001ADV-nonconnetable\uff08RX\u306f\u884c\u308f\u306a\u3044\uff09\u3067\u3001\u3000\u9001\u4fe1\u51fa\u529b0dbm DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u7121\u52b9\u306e\u6642\u306f\u3001 3ch ADV 100ms\u306e\u5834\u5408\u306f\u3001\u7d040.14mA DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u6709\u52b9\u306e\u6642\u306f\u3001 3ch 100ms\u306e\u5834\u5408\u306f\u3001\u7d040.09mA\u3068\u306a\u308a\u304a\u304a\u3088\u305d\uff12\uff10\uff05\u301c\uff13\uff10\uff05\u7a0b\u5ea6\u524a\u6e1b\u3067\u304d\u307e\u3059\u3002 ble_stack_init();\u3000\u306e\u5f8c\u306b\u3001\u4ee5\u4e0b\u306e\uff11\u5206\u3092\u8ffd\u52a0 sd_power_dcdc_mode_set( NRF_POWER_DCDC_ENABLE ); \u307e\u305f\u3001NRF_LOG\u304c\u6709\u52b9\u306e\u5834\u5408\u306a\u3069\u306e\u5468\u8fba\u6a5f\u80fd\u3092\u30aa\u30d5\u3059\u308b\u3053\u3068\u3082\u5fd8\u308c\u305a\u306b\u3002","title":"PowerMeasureNotes"},{"location":"a.\u7701\u96fb\u529b/PowerMeasureNotes/#_1","text":"NRF52\u306b\u9650\u3089\u305a\u96fb\u6c60\u3067\u904b\u7528\u3059\u308b\u91cd\u8981\u306a\u8981\u7d20\u306b\u96fb\u529b\u5236\u5fa1\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002ARM\u30b3\u30a2\u3092\u30b9\u30ea\u30fc\u30d7\u72b6\u614b\u3084 \u30b9\u30bf\u30f3\u30d0\u30a4\u72b6\u614b\u306b\u3059\u308b\u306f\u3082\u3061\u308d\u3093\u3001\u5468\u8fba\u6a5f\u80fd\u3092\u30aa\u30f3\u30aa\u30d5\u3057\u305f\u308a\u3001\u964d\u5727DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u6709\u52b9\u3057\u3066\u4f4e\u96fb\u5727\u5316\u3002 \u4ed6\u306b\u3082RAM\u3092\u4fdd\u6301\u3059\u308b\u306e\u3082\u5e38\u6642\u96fb\u529b\u3092\u6d88\u8cbb\u3057\u307e\u3059\u3002NRF52\u306f4KB\u3064\u3065\u4fdd\u6301\u3092\u6307\u5b9a\u51fa\u6765\u307e\u3059\u3002\u304d\u3081 \u7d30\u304b\u306a\u5236\u5fa1\u51fa\u6765\u307e\u3059\u3002","title":"\u96fb\u529b\u5236\u5fa1"},{"location":"a.\u7701\u96fb\u529b/PowerMeasureNotes/#_2","text":"Shinobi\u306b\u306f\u3001\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u306b\u3088\u308b\u96fb\u5727\u3092\u964d\u5727\u3057\u3066\u30d4\u30fc\u30af\u96fb\u529b\u3092\u7d04\uff11\uff16mA\u304b\u3089\uff19mA\u3067\u52d5\u4f5c\u3067\u304d\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u306b\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u8a2d\u5b9a\u3092\u6709\u52b9\u5316\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 LED\u306f\u3001\u7d041mA\u7a0b\u5ea6\u6d88\u8cbb\u3057\u307e\u3059\u306e\u3067\u6d88\u706f\u3057\u305f\u65b9\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002\u307e\u305f\u3001\u96fb\u6c60\u304c\u6d88\u8017\u3057\u30662.5V\u7a0b\u5ea6\u306b\u306a\u308b\u3068\u3001LED\u304c\u6697\u304f\u306a\u308a\u3084\u304c\u3066\u5149\u308a\u307e\u305b\u3093\u3002 \u6761\u4ef6\u306b\u3088\u308a\u307e\u3059\u304c\u3001\u53c2\u8003\u7a0b\u5ea6\u3000 \u5e73\u5747\u96fb\u6d41\u306f\u3001ADV-nonconnetable\uff08RX\u306f\u884c\u308f\u306a\u3044\uff09\u3067\u3001\u3000\u9001\u4fe1\u51fa\u529b0dbm DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u7121\u52b9\u306e\u6642\u306f\u3001 3ch ADV 100ms\u306e\u5834\u5408\u306f\u3001\u7d040.14mA DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u6709\u52b9\u306e\u6642\u306f\u3001 3ch 100ms\u306e\u5834\u5408\u306f\u3001\u7d040.09mA\u3068\u306a\u308a\u304a\u304a\u3088\u305d\uff12\uff10\uff05\u301c\uff13\uff10\uff05\u7a0b\u5ea6\u524a\u6e1b\u3067\u304d\u307e\u3059\u3002 ble_stack_init();\u3000\u306e\u5f8c\u306b\u3001\u4ee5\u4e0b\u306e\uff11\u5206\u3092\u8ffd\u52a0 sd_power_dcdc_mode_set( NRF_POWER_DCDC_ENABLE ); \u307e\u305f\u3001NRF_LOG\u304c\u6709\u52b9\u306e\u5834\u5408\u306a\u3069\u306e\u5468\u8fba\u6a5f\u80fd\u3092\u30aa\u30d5\u3059\u308b\u3053\u3068\u3082\u5fd8\u308c\u305a\u306b\u3002","title":"\u7701\u96fb\u529b\u306b\u95a2\u3059\u308b\u30e1\u30e2"},{"location":"a.\u7701\u96fb\u529b/lowenergy/","text":"\u7701\u96fb\u529b\u30e1\u30e2 \u30b9\u30ea\u30fc\u30d7\u4e2d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u505c\u6b62\u306b\u3064\u3044\u3066 sd_app_evt_wait()\u3067\u30b9\u30ea\u30fc\u30d7\u72b6\u614b\u306b\u306a\u3063\u3066\u3082\u3001\u7d041.4mA\u7a0b\u5ea6\u306e\u5e73\u5747\u96fb\u6d41\u304c\u5e38\u6642\u6d41\u308c\u3066\u3057\u307e\u3046\u3002Beacon\u306e\u3088\u3046\u306a\u30b9\u30ea\u30fc\u30d7\u6642\u306bUART\u3092\u53d7\u4fe1\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u5834\u5408\u306f\u3001UART\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u96fb\u529b\u3092\uff10\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u6b21\u306e\uff11\u884c\u3092main\u95a2\u6570\u306b\u52a0\u3048\u308b\u3002 NRF_UART0->POWER = 0; \u305f\u3060\u3057\u3001\u5ba3\u8a00\u3059\u308b\u3068UART\u304c\u505c\u6b62\u3059\u308b\u306e\u3067\u3001TeraTerm\u306a\u3069\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u30ed\u30b0\u304c\u51fa\u306a\u304f\u306a\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 \u203b\u958b\u767a\u30dc\u30fc\u30c9\u3092\u4f7f\u3048\u3070\u63a5\u7d9a\u3057\u3066\u3044\u308bUSB\u30b1\u30fc\u30d6\u30eb\uff11\u672c\u306e\u307f\u3067UART\u304c\u51fa\u529b\u3067\u304d\u307e\u3059\u3002 \u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f nRF51822\u306b\u306f\u300132kHz\uff08LFCLK\uff09\u306816MHz(HFCLK)\u306e\u767a\u632f\u56de\u8def\u304c\u5185\u81d3\u3055\u308c\u3066\u3044\u308b\u3002\u30b9\u30ea\u30fc\u30d7\u6642\u306b\u306f\u9045\u304432KHz\u304c\u4f7f\u308f\u308c\u7701\u96fb\u529b\u306b\u306a\u308b\u3002\u5185\u90e8\u306e\u767a\u632f\u56de\u8def(RC)\u306f\u3001\u30b3\u30f3\u30c7\u30f3\u30b5\u3068\u62b5\u6297\u3067\u69cb\u6210\u3055\u308c\u3001\u6e29\u5ea6\u306b\u5f71\u97ff\u3055\u308c\u3084\u3059\u304f\u7cbe\u5ea6\u304c\u843d\u3061\u308b\u3002\u30e2\u30b8\u30e5\u30fc\u30eb\u54c1\u306f\u300116MHzor32MHz\u306e\u5916\u90e8\u767a\u632f\u5b50\u304c\u88c5\u5099\u3055\u308c\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u306632kHz\u306e\u767a\u632f\u5b50\u304c\u8a2d\u3051\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\u5916\u90e8\u767a\u632f\u5b50\u306f\u3069\u3061\u3089\u3082\u7cbe\u5ea6\u304c\u9ad8\u3044\u3002\u305d\u308c\u3086\u3048\u3001\u90e8\u54c1\u70b9\u6570\u304c\u5897\u3048\u30b3\u30b9\u30c8\u306f\u9ad8\u304f\u306a\u308b\u3002 \u5185\u90e8\u767a\u632f\u4f7f\u7528\uff08RC\uff09\u306e\u5834\u5408\u306f\u3001\u3044\u305a\u308c\u3082\u7cbe\u5ea6\u306f250ppm\u3068\u306a\u308b\u3002\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u884c\u308f\u308c\u5916\u90e8\u767a\u632f\u3068\u6bd4\u3079\u3066\u6d88\u8cbb\u96fb\u529b\u304c\u308f\u305a\u304b\u306b\u9ad8\u304f\u306a\u308b\u3002\u307e\u305f\u3001\u6e29\u5ea6\u306b\u3088\u308b\u30c9\u30ea\u30d5\u30c8\u5bfe\u7b56\uff08\u30ba\u30ec)\u3055\u308c\u305f\u3082\u306e\u304c\u9078\u3079\u308b\u3002\u6e29\u5ea6\u5909\u5316\u304c\u3042\u308b\u3068\u88dc\u6b63\u304c\u884c\u308f\u308c\u308b\u3002\u4e00\u65b9\u3001\u5916\u90e8\u767a\u632f(XTAL)\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u6c34\u6676\u767a\u632f\u5b50\u306e\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u3092\u5143\u306b\u9078\u629e\u3059\u308b\u3002\u7cbe\u5ea6\u304c\u6700\u5927\u306720ppm\u3068\u306a\u308a\u307e\u3059\u304c\u3001\u975e\u5e38\u306b\u7cbe\u5ea6\u304c\u9ad8\u304f\u306a\u308a\u308f\u305a\u304b\u306bRC\u3068\u6bd4\u3079\u7701\u96fb\u529b\u3068\u306a\u308b\u3002\u307e\u305f\u3001\u6c34\u6676\u767a\u632f\u5b5016MHz\u306e\u307f\u3067\u306e\u5b9f\u884c\u3067\u304d\u90e8\u54c1\u304c\u7bc0\u7d04\u3067\u304d\u308b\u304c\uff08\u6c34\u6676\u767a\u632f\u5b5032KHz\u3092\u30ab\u30c3\u30c8\uff09\u975e\u5e38\u306b\u6d88\u8cbb\u96fb\u529b\u304c\u9ad8\u304f\u306a\u308b\uff08\u7d04\uff12\u304b\u3089\uff13\u500d\uff09\u3002 \u3088\u3063\u3066 1.4.10SoftDevice , 1.4.11iBeacon \u306e\u30b3\u30fc\u30c9\u3092\u30dc\u30fc\u30c9\u306b\u3088\u3063\u3066\u9069\u5207\u306a\u8a2d\u5b9a\u3092\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002 SOFTDEVICE_HANDLER_INIT( NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION , NULL); NRF_CLOCK_LFCLKSRCS \u8a73\u7d30 NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM \u5916\u90e816MHz\u306e\u307f\u3000\u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_XTAL_250_PPM \u5916\u90e832KHz\u3042\u308a\u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_XTAL_150_PPM \u5468\u6ce2\u6570\u7cbe\u5ea6150ppm NRF_CLOCK_LFCLKSRC_XTAL_100_PPM \u5468\u6ce2\u6570\u7cbe\u5ea6100ppm NRF_CLOCK_LFCLKSRC_XTAL_75_PPM \u5468\u6ce2\u6570\u7cbe\u5ea675ppm NRF_CLOCK_LFCLKSRC_XTAL_50_PPM \u5468\u6ce2\u6570\u7cbe\u5ea650ppm NRF_CLOCK_LFCLKSRC_XTAL_30_PPM \u5468\u6ce2\u6570\u7cbe\u5ea630ppm NRF_CLOCK_LFCLKSRC_XTAL_20_PPM \u5468\u6ce2\u6570\u7cbe\u5ea620ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION \u5185\u90e8\u767a\u632f\u56de\u8def\u3000\u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm","title":"\u7701\u96fb\u529b\u30e1\u30e2"},{"location":"a.\u7701\u96fb\u529b/lowenergy/#_1","text":"","title":"\u7701\u96fb\u529b\u30e1\u30e2"},{"location":"a.\u7701\u96fb\u529b/lowenergy/#_2","text":"sd_app_evt_wait()\u3067\u30b9\u30ea\u30fc\u30d7\u72b6\u614b\u306b\u306a\u3063\u3066\u3082\u3001\u7d041.4mA\u7a0b\u5ea6\u306e\u5e73\u5747\u96fb\u6d41\u304c\u5e38\u6642\u6d41\u308c\u3066\u3057\u307e\u3046\u3002Beacon\u306e\u3088\u3046\u306a\u30b9\u30ea\u30fc\u30d7\u6642\u306bUART\u3092\u53d7\u4fe1\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u5834\u5408\u306f\u3001UART\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u96fb\u529b\u3092\uff10\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u6b21\u306e\uff11\u884c\u3092main\u95a2\u6570\u306b\u52a0\u3048\u308b\u3002 NRF_UART0->POWER = 0; \u305f\u3060\u3057\u3001\u5ba3\u8a00\u3059\u308b\u3068UART\u304c\u505c\u6b62\u3059\u308b\u306e\u3067\u3001TeraTerm\u306a\u3069\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u30ed\u30b0\u304c\u51fa\u306a\u304f\u306a\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 \u203b\u958b\u767a\u30dc\u30fc\u30c9\u3092\u4f7f\u3048\u3070\u63a5\u7d9a\u3057\u3066\u3044\u308bUSB\u30b1\u30fc\u30d6\u30eb\uff11\u672c\u306e\u307f\u3067UART\u304c\u51fa\u529b\u3067\u304d\u307e\u3059\u3002","title":"\u30b9\u30ea\u30fc\u30d7\u4e2d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u505c\u6b62\u306b\u3064\u3044\u3066"},{"location":"a.\u7701\u96fb\u529b/lowenergy/#_3","text":"nRF51822\u306b\u306f\u300132kHz\uff08LFCLK\uff09\u306816MHz(HFCLK)\u306e\u767a\u632f\u56de\u8def\u304c\u5185\u81d3\u3055\u308c\u3066\u3044\u308b\u3002\u30b9\u30ea\u30fc\u30d7\u6642\u306b\u306f\u9045\u304432KHz\u304c\u4f7f\u308f\u308c\u7701\u96fb\u529b\u306b\u306a\u308b\u3002\u5185\u90e8\u306e\u767a\u632f\u56de\u8def(RC)\u306f\u3001\u30b3\u30f3\u30c7\u30f3\u30b5\u3068\u62b5\u6297\u3067\u69cb\u6210\u3055\u308c\u3001\u6e29\u5ea6\u306b\u5f71\u97ff\u3055\u308c\u3084\u3059\u304f\u7cbe\u5ea6\u304c\u843d\u3061\u308b\u3002\u30e2\u30b8\u30e5\u30fc\u30eb\u54c1\u306f\u300116MHzor32MHz\u306e\u5916\u90e8\u767a\u632f\u5b50\u304c\u88c5\u5099\u3055\u308c\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u306632kHz\u306e\u767a\u632f\u5b50\u304c\u8a2d\u3051\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\u5916\u90e8\u767a\u632f\u5b50\u306f\u3069\u3061\u3089\u3082\u7cbe\u5ea6\u304c\u9ad8\u3044\u3002\u305d\u308c\u3086\u3048\u3001\u90e8\u54c1\u70b9\u6570\u304c\u5897\u3048\u30b3\u30b9\u30c8\u306f\u9ad8\u304f\u306a\u308b\u3002 \u5185\u90e8\u767a\u632f\u4f7f\u7528\uff08RC\uff09\u306e\u5834\u5408\u306f\u3001\u3044\u305a\u308c\u3082\u7cbe\u5ea6\u306f250ppm\u3068\u306a\u308b\u3002\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u884c\u308f\u308c\u5916\u90e8\u767a\u632f\u3068\u6bd4\u3079\u3066\u6d88\u8cbb\u96fb\u529b\u304c\u308f\u305a\u304b\u306b\u9ad8\u304f\u306a\u308b\u3002\u307e\u305f\u3001\u6e29\u5ea6\u306b\u3088\u308b\u30c9\u30ea\u30d5\u30c8\u5bfe\u7b56\uff08\u30ba\u30ec)\u3055\u308c\u305f\u3082\u306e\u304c\u9078\u3079\u308b\u3002\u6e29\u5ea6\u5909\u5316\u304c\u3042\u308b\u3068\u88dc\u6b63\u304c\u884c\u308f\u308c\u308b\u3002\u4e00\u65b9\u3001\u5916\u90e8\u767a\u632f(XTAL)\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u6c34\u6676\u767a\u632f\u5b50\u306e\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u3092\u5143\u306b\u9078\u629e\u3059\u308b\u3002\u7cbe\u5ea6\u304c\u6700\u5927\u306720ppm\u3068\u306a\u308a\u307e\u3059\u304c\u3001\u975e\u5e38\u306b\u7cbe\u5ea6\u304c\u9ad8\u304f\u306a\u308a\u308f\u305a\u304b\u306bRC\u3068\u6bd4\u3079\u7701\u96fb\u529b\u3068\u306a\u308b\u3002\u307e\u305f\u3001\u6c34\u6676\u767a\u632f\u5b5016MHz\u306e\u307f\u3067\u306e\u5b9f\u884c\u3067\u304d\u90e8\u54c1\u304c\u7bc0\u7d04\u3067\u304d\u308b\u304c\uff08\u6c34\u6676\u767a\u632f\u5b5032KHz\u3092\u30ab\u30c3\u30c8\uff09\u975e\u5e38\u306b\u6d88\u8cbb\u96fb\u529b\u304c\u9ad8\u304f\u306a\u308b\uff08\u7d04\uff12\u304b\u3089\uff13\u500d\uff09\u3002 \u3088\u3063\u3066 1.4.10SoftDevice , 1.4.11iBeacon \u306e\u30b3\u30fc\u30c9\u3092\u30dc\u30fc\u30c9\u306b\u3088\u3063\u3066\u9069\u5207\u306a\u8a2d\u5b9a\u3092\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002 SOFTDEVICE_HANDLER_INIT( NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION , NULL); NRF_CLOCK_LFCLKSRCS \u8a73\u7d30 NRF_CLOCK_LFCLKSRC_SYNTH_250_PPM \u5916\u90e816MHz\u306e\u307f\u3000\u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_XTAL_250_PPM \u5916\u90e832KHz\u3042\u308a\u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_XTAL_150_PPM \u5468\u6ce2\u6570\u7cbe\u5ea6150ppm NRF_CLOCK_LFCLKSRC_XTAL_100_PPM \u5468\u6ce2\u6570\u7cbe\u5ea6100ppm NRF_CLOCK_LFCLKSRC_XTAL_75_PPM \u5468\u6ce2\u6570\u7cbe\u5ea675ppm NRF_CLOCK_LFCLKSRC_XTAL_50_PPM \u5468\u6ce2\u6570\u7cbe\u5ea650ppm NRF_CLOCK_LFCLKSRC_XTAL_30_PPM \u5468\u6ce2\u6570\u7cbe\u5ea630ppm NRF_CLOCK_LFCLKSRC_XTAL_20_PPM \u5468\u6ce2\u6570\u7cbe\u5ea620ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_250MS_CALIBRATION \u5185\u90e8\u767a\u632f\u56de\u8def\u3000\u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_500MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_1000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_2000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_4000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_8000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_1000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_2000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_4000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_8000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm NRF_CLOCK_LFCLKSRC_RC_250_PPM_TEMP_16000MS_CALIBRATION \u5468\u6ce2\u6570\u7cbe\u5ea6250ppm","title":"\u5185\u90e8\u767a\u632f\u3068\u5916\u90e8\u767a\u632f"},{"location":"b.Shinobi/10_Shinobi_GridEye/","text":"#10 Shinobi_GridEye Overview MEMS\u30bb\u30f3\u30b5\u30fc Panasonic\u88fd\u8d64\u5916\u7dda\u30a2\u30ec\u30a4\u30bb\u30f3\u30b5 Grid-EYE \u9ad8\u6027\u80fd\u30bf\u30a4\u30d7 / AMG8834\u642d\u8f09\uff08\u30ed\u30fc\u30b2\u30a4\u30f3\uff09\uff13V\u30bf\u30a4\u30d7 \uff18\u00d7\uff18\uff08\u753b\u7d20\uff16\uff14\uff09\u3067\uff12\u6b21\u5143\u30a8\u30ea\u30a2\u6e29\u5ea6\u691c\u77e5\u3057\u307e\u3059\u3002 \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 I2C\u3067\u901a\u4fe1\u53ef\u80fd\uff08\u30a2\u30c9\u30ec\u30b9\u6570\u306f\uff12\u3064\u307e\u3067\uff09 \u7bc4\u56f2 \uff17\uff4d\u4ee5\u5185 \u5165\u529b\u96fb\u5727 3.3V(Shinobi\u5c02\u7528) I2C\u30a2\u30c9\u30ec\u30b9 \u89d2\u5ea6 \uff16\uff10\u5ea6 \u5bfe\u8c61\u7269\u6e29\u5ea6\u7bc4\u56f2 \uff0d\uff12\uff10\u2103\uff5e\uff11\uff10\uff10\u2103\uff08\u5206\u89e3\u80fd\u3000\uff10\uff0e\uff12\uff15\u2103\uff09 \u52d5\u4f5c\u6e29\u5ea6\u7bc4\u56f2 \uff0d\uff12\uff10\u2103\uff5e\uff18\uff10\u2103 \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8 \u6bce\u79d2\uff11\uff10\u30d5\u30ec\u30fc\u30e0\u307e\u305f\u306f\uff11\u30d5\u30ec\u30fc\u30e0 \u52d5\u4f5c\u30e2\u30fc\u30c9 \u30ce\u30fc\u30de\u30eb\u3001\u30b9\u30ea\u30fc\u30d7\u3001\u30b9\u30bf\u30f3\u30d0\u30a4\uff08\uff11\uff10\u79d2\u307e\u305f\u306f\uff16\uff10\u79d2\u9593\u9694\uff09 Connecting \u203b3.3V\u5c02\u7528\u3067\u3059\u3002Shinobi_NRF,Shinobi_ANA6\u4ee5\u5916\u306e\u30b3\u30cd\u30af\u30bf\u30fc\u306b\u306f\u63a5\u7d9a\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 Parts Specification Document panasonic Schematic Sample Code \u69cb\u6210Parts","title":"10 Shinobi_GridEye"},{"location":"b.Shinobi/10_Shinobi_GridEye/#10-shinobi_grideye","text":"","title":"#10 Shinobi_GridEye"},{"location":"b.Shinobi/10_Shinobi_GridEye/#overview","text":"MEMS\u30bb\u30f3\u30b5\u30fc Panasonic\u88fd\u8d64\u5916\u7dda\u30a2\u30ec\u30a4\u30bb\u30f3\u30b5 Grid-EYE \u9ad8\u6027\u80fd\u30bf\u30a4\u30d7 / AMG8834\u642d\u8f09\uff08\u30ed\u30fc\u30b2\u30a4\u30f3\uff09\uff13V\u30bf\u30a4\u30d7 \uff18\u00d7\uff18\uff08\u753b\u7d20\uff16\uff14\uff09\u3067\uff12\u6b21\u5143\u30a8\u30ea\u30a2\u6e29\u5ea6\u691c\u77e5\u3057\u307e\u3059\u3002","title":"Overview"},{"location":"b.Shinobi/10_Shinobi_GridEye/#_1","text":"I2C\u3067\u901a\u4fe1\u53ef\u80fd\uff08\u30a2\u30c9\u30ec\u30b9\u6570\u306f\uff12\u3064\u307e\u3067\uff09","title":"\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9"},{"location":"b.Shinobi/10_Shinobi_GridEye/#_2","text":"\uff17\uff4d\u4ee5\u5185","title":"\u7bc4\u56f2"},{"location":"b.Shinobi/10_Shinobi_GridEye/#_3","text":"3.3V(Shinobi\u5c02\u7528)","title":"\u5165\u529b\u96fb\u5727"},{"location":"b.Shinobi/10_Shinobi_GridEye/#i2c","text":"","title":"I2C\u30a2\u30c9\u30ec\u30b9"},{"location":"b.Shinobi/10_Shinobi_GridEye/#_4","text":"\uff16\uff10\u5ea6","title":"\u89d2\u5ea6"},{"location":"b.Shinobi/10_Shinobi_GridEye/#_5","text":"\uff0d\uff12\uff10\u2103\uff5e\uff11\uff10\uff10\u2103\uff08\u5206\u89e3\u80fd\u3000\uff10\uff0e\uff12\uff15\u2103\uff09","title":"\u5bfe\u8c61\u7269\u6e29\u5ea6\u7bc4\u56f2"},{"location":"b.Shinobi/10_Shinobi_GridEye/#_6","text":"\uff0d\uff12\uff10\u2103\uff5e\uff18\uff10\u2103","title":"\u52d5\u4f5c\u6e29\u5ea6\u7bc4\u56f2"},{"location":"b.Shinobi/10_Shinobi_GridEye/#_7","text":"\u6bce\u79d2\uff11\uff10\u30d5\u30ec\u30fc\u30e0\u307e\u305f\u306f\uff11\u30d5\u30ec\u30fc\u30e0","title":"\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8"},{"location":"b.Shinobi/10_Shinobi_GridEye/#_8","text":"\u30ce\u30fc\u30de\u30eb\u3001\u30b9\u30ea\u30fc\u30d7\u3001\u30b9\u30bf\u30f3\u30d0\u30a4\uff08\uff11\uff10\u79d2\u307e\u305f\u306f\uff16\uff10\u79d2\u9593\u9694\uff09","title":"\u52d5\u4f5c\u30e2\u30fc\u30c9"},{"location":"b.Shinobi/10_Shinobi_GridEye/#connecting","text":"\u203b3.3V\u5c02\u7528\u3067\u3059\u3002Shinobi_NRF,Shinobi_ANA6\u4ee5\u5916\u306e\u30b3\u30cd\u30af\u30bf\u30fc\u306b\u306f\u63a5\u7d9a\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002","title":"Connecting"},{"location":"b.Shinobi/10_Shinobi_GridEye/#parts-specification","text":"Document panasonic","title":"Parts Specification"},{"location":"b.Shinobi/10_Shinobi_GridEye/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/10_Shinobi_GridEye/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/10_Shinobi_GridEye/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/","text":"Shinobi_USB_Battery(TPS63000) Overview \u9ad8\u52b9\u7387\u3001\u6607\u5727\u3001\u964d\u5727\u3082\u3067\u304d\u308b\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u96fb\u6e90\u3000\u964d\u5727\u578b\u3001\u6607\u5727\u578b \u4e7e\u96fb\u6c60\u3001USB\u96fb\u6e90\u304b\u3089\uff13\uff0e\uff13V\u3067\u51fa\u529b\u3002(5V\u3082\u9078\u629e\u53ef\u80fd) \u642d\u8f09\u30c1\u30c3\u30d7 TPS63000 Connecting PH\u30b3\u30cd\u30af\u30bf\u3067\u51fa\u529b\uff083.3V or 5V\uff09 EIAJ2 DC\u30d7\u30e9\u30b0\u306b\u5165\u529b\u3002 \u203b\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u96fb\u6e90\u306f\u30c7\u30ea\u30b1\u30fc\u30c8\u3067\u3059\u306e\u3067\u3001\u901a\u96fb\u4e2d\u306f\u3001\u57fa\u677f\u7b49\u306f\u3055\u308f\u3089\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u30d1\u30ef\u30fc\u30bb\u30fc\u30d6\u30e2\u30fc\u30c9\u8a2d\u5b9a Parts Specification Document TI TPS63000 Schematic Sample Code \u69cb\u6210Parts","title":"Shinobi_USB_Battery(TPS63000)"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#shinobi_usb_batterytps63000","text":"","title":"Shinobi_USB_Battery(TPS63000)"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#overview","text":"\u9ad8\u52b9\u7387\u3001\u6607\u5727\u3001\u964d\u5727\u3082\u3067\u304d\u308b\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u96fb\u6e90\u3000\u964d\u5727\u578b\u3001\u6607\u5727\u578b \u4e7e\u96fb\u6c60\u3001USB\u96fb\u6e90\u304b\u3089\uff13\uff0e\uff13V\u3067\u51fa\u529b\u3002(5V\u3082\u9078\u629e\u53ef\u80fd)","title":"Overview"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#_1","text":"TPS63000","title":"\u642d\u8f09\u30c1\u30c3\u30d7"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#connecting","text":"PH\u30b3\u30cd\u30af\u30bf\u3067\u51fa\u529b\uff083.3V or 5V\uff09 EIAJ2 DC\u30d7\u30e9\u30b0\u306b\u5165\u529b\u3002 \u203b\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u96fb\u6e90\u306f\u30c7\u30ea\u30b1\u30fc\u30c8\u3067\u3059\u306e\u3067\u3001\u901a\u96fb\u4e2d\u306f\u3001\u57fa\u677f\u7b49\u306f\u3055\u308f\u3089\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002","title":"Connecting"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#_2","text":"","title":"\u30d1\u30ef\u30fc\u30bb\u30fc\u30d6\u30e2\u30fc\u30c9\u8a2d\u5b9a"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#parts-specification","text":"Document TI TPS63000","title":"Parts Specification"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/12_Shinobi_Battery_TPS63000/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/1_Shinobi_NRF/","text":"#1 Shinobi_NRF Overview Shinobi_NRF\u306f\u3001\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\u6e08\u307f\u3001Raytac(\u53f0\u6e7e) MDBT42Q(MDBT42Q-512K)BLE\u30e2\u30b8\u30e5\u30fc\u30eb\u642d\u8f09 DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u2015\u306e\u305f\u3081\u30a4\u30f3\u30c0\u30af\u30bf\u642d\u8f09 \u4f4e\u901f\u632f\u52d5\u5b50\u642d\u8f0932kHz \u7269\u7406\u30dc\u30bf\u30f3\u4ed8\u304d \u642d\u8f09\u30c1\u30c3\u30d7 Nordic Semiconductor NRF52832(Cortex-M4F) \u901a\u4fe1 Bluetooth 4.0,4.1,4.2(BLE Mode) Bluetooth 5\u306b\u3082\u5bfe\u5fdc \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 FaboBrick\u5bfe\u5fdc\u30003Pin\u30b3\u30cd\u30af\u30bf\uff08GPIO,PWM,ADC\uff09\u3001Fabo4Pin\u30b3\u30cd\u30af\u30bf\u00d7\uff12\uff08TWI(I2C),UART) NFC\u30b3\u30cd\u30af\u30bf\uff08\u30a2\u30f3\u30c6\u30ca\u63a5\u7d9a\u5fc5\u8981\uff09 \u30e1\u30e2\u30ea RAM 64KB ROM 512KB \u901a\u4fe1\u53ef\u80fd\u8ddd\u96e2 \u98db\u8ddd\u96e2\u3000\u6700\u5927\uff18\uff10\uff4d\uff08\u30aa\u30fc\u30d7\u30f3\u30b9\u30da\u30fc\u30b9\uff09 \u203b\u74b0\u5883\u306b\u3088\u308a\u307e\u3059\u3002 \u5165\u529b\u96fb\u5727 1.7V~3.6V Connecting PH\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\uff08\uff11\uff0e\uff17V\uff5e\uff13\uff0e\uff16V\uff09 SWD\u306b\u5bfe\u5fdc\u3057\u305f\u30d4\u30f3\u30d8\u30c3\u30c0 Parts Specification MDBT42Q \u2013 512K (Chip Antenna) Document raytac Schematic Sample Code \u69cb\u6210Parts","title":"1 Shinobi_NRF"},{"location":"b.Shinobi/1_Shinobi_NRF/#1-shinobi_nrf","text":"","title":"#1 Shinobi_NRF"},{"location":"b.Shinobi/1_Shinobi_NRF/#overview","text":"Shinobi_NRF\u306f\u3001\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\u6e08\u307f\u3001Raytac(\u53f0\u6e7e) MDBT42Q(MDBT42Q-512K)BLE\u30e2\u30b8\u30e5\u30fc\u30eb\u642d\u8f09 DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u2015\u306e\u305f\u3081\u30a4\u30f3\u30c0\u30af\u30bf\u642d\u8f09 \u4f4e\u901f\u632f\u52d5\u5b50\u642d\u8f0932kHz \u7269\u7406\u30dc\u30bf\u30f3\u4ed8\u304d","title":"Overview"},{"location":"b.Shinobi/1_Shinobi_NRF/#_1","text":"Nordic Semiconductor NRF52832(Cortex-M4F)","title":"\u642d\u8f09\u30c1\u30c3\u30d7"},{"location":"b.Shinobi/1_Shinobi_NRF/#_2","text":"Bluetooth 4.0,4.1,4.2(BLE Mode) Bluetooth 5\u306b\u3082\u5bfe\u5fdc","title":"\u901a\u4fe1"},{"location":"b.Shinobi/1_Shinobi_NRF/#_3","text":"FaboBrick\u5bfe\u5fdc\u30003Pin\u30b3\u30cd\u30af\u30bf\uff08GPIO,PWM,ADC\uff09\u3001Fabo4Pin\u30b3\u30cd\u30af\u30bf\u00d7\uff12\uff08TWI(I2C),UART) NFC\u30b3\u30cd\u30af\u30bf\uff08\u30a2\u30f3\u30c6\u30ca\u63a5\u7d9a\u5fc5\u8981\uff09","title":"\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9"},{"location":"b.Shinobi/1_Shinobi_NRF/#_4","text":"RAM 64KB ROM 512KB","title":"\u30e1\u30e2\u30ea"},{"location":"b.Shinobi/1_Shinobi_NRF/#_5","text":"\u98db\u8ddd\u96e2\u3000\u6700\u5927\uff18\uff10\uff4d\uff08\u30aa\u30fc\u30d7\u30f3\u30b9\u30da\u30fc\u30b9\uff09 \u203b\u74b0\u5883\u306b\u3088\u308a\u307e\u3059\u3002","title":"\u901a\u4fe1\u53ef\u80fd\u8ddd\u96e2"},{"location":"b.Shinobi/1_Shinobi_NRF/#_6","text":"1.7V~3.6V","title":"\u5165\u529b\u96fb\u5727"},{"location":"b.Shinobi/1_Shinobi_NRF/#connecting","text":"PH\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\uff08\uff11\uff0e\uff17V\uff5e\uff13\uff0e\uff16V\uff09 SWD\u306b\u5bfe\u5fdc\u3057\u305f\u30d4\u30f3\u30d8\u30c3\u30c0","title":"Connecting"},{"location":"b.Shinobi/1_Shinobi_NRF/#parts-specification","text":"MDBT42Q \u2013 512K (Chip Antenna) Document raytac","title":"Parts Specification"},{"location":"b.Shinobi/1_Shinobi_NRF/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/1_Shinobi_NRF/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/1_Shinobi_NRF/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/2_Shinobi_Battery/","text":"Shinobi_Battery \u958b\u767a\u4e2d Overview \u30ea\u30c1\u30a6\u30e0\u30dc\u30bf\u30f3\u96fb\u6c60\uff08CR2477\uff09\u304b\u3089Shinobi_NRF,\u304a\u3088\u3073Shinobi_ANA6\u3078\u7d66\u96fb\u3059\u308b\u5834\u5408\u306b\u4f7f\u3044\u307e\u3059\u3002 \u203b\u30ea\u30c1\u30a6\u30e0\u30dc\u30bf\u30f3\u96fb\u6c60\u306f\u5145\u96fb\u3067\u304d\u307e\u305b\u3093\u3002\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002 \uff13\uff0e\uff13V\u3067\u51fa\u529b\u3002 \u642d\u8f09\u30c1\u30c3\u30d7 TPS63000 Connecting Parts Specification Document TI TPS63000 Schematic Sample Code \u69cb\u6210Parts","title":"Shinobi_Battery"},{"location":"b.Shinobi/2_Shinobi_Battery/#shinobi_battery","text":"\u958b\u767a\u4e2d","title":"Shinobi_Battery"},{"location":"b.Shinobi/2_Shinobi_Battery/#overview","text":"\u30ea\u30c1\u30a6\u30e0\u30dc\u30bf\u30f3\u96fb\u6c60\uff08CR2477\uff09\u304b\u3089Shinobi_NRF,\u304a\u3088\u3073Shinobi_ANA6\u3078\u7d66\u96fb\u3059\u308b\u5834\u5408\u306b\u4f7f\u3044\u307e\u3059\u3002 \u203b\u30ea\u30c1\u30a6\u30e0\u30dc\u30bf\u30f3\u96fb\u6c60\u306f\u5145\u96fb\u3067\u304d\u307e\u305b\u3093\u3002\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002 \uff13\uff0e\uff13V\u3067\u51fa\u529b\u3002","title":"Overview"},{"location":"b.Shinobi/2_Shinobi_Battery/#_1","text":"TPS63000","title":"\u642d\u8f09\u30c1\u30c3\u30d7"},{"location":"b.Shinobi/2_Shinobi_Battery/#connecting","text":"","title":"Connecting"},{"location":"b.Shinobi/2_Shinobi_Battery/#parts-specification","text":"Document TI TPS63000","title":"Parts Specification"},{"location":"b.Shinobi/2_Shinobi_Battery/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/2_Shinobi_Battery/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/2_Shinobi_Battery/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/","text":"#3 Shinobi_Solar Overview \u592a\u967d\u96fb\u6c60\u30d1\u30cd\u30eb\u304b\u3089\u767a\u96fb\u3055\u308c\u305f\u96fb\u6c17\u3092LiPo\u30d0\u30c3\u30c6\u30ea\u30fc\uff08\uff13\uff0e\uff17V)\u306b\u5145\u96fb\u3001Shinobi_NRF,ANA6\u3078\u653e\u96fb\uff13\uff0e\uff13V\u3044\u305f\u3057\u307e\u3059\u3002 Shinobi\u3078\u306e\u96fb\u6e90\u4f9b\u7d66\u3068\u30ea\u30c1\u30a6\u30e0\u96fb\u6c60\u306e\u5145\u96fb\u3092\u540c\u6642\u306b\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002 \u96fb\u5727\u6bd4\u4f8b\u96fb\u6d41\u5236\u5fa1VCPP\u306b\u3088\u308a\u30d0\u30c3\u30c6\u30ea\u30fc\u5145\u96fb\u3088\u308a\u3082\u3001Shinobi_NRF\u3078\u306e\u7d66\u96fb\u3092\u512a\u5148\u3067\u304d\u307e\u3059\u3002 \uff13\uff0e\uff13V\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u642d\u8f09\u3002 NTC\u30b5\u30fc\u30df\u30b9\u30bf\u306b\u3088\u308b\u5145\u96fb\u7981\u6b62\u6a5f\u80fd \u203b\u91cd\u8981\u3000\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306f\u3001\u53d6\u308a\u6271\u3044\u306b\u8aa4\u308b\u3068\u5927\u5909\u5371\u967a\u3067\u3059\u3002 \u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306b\u306f\u3001\u8efd\u91cf\u306a\u306e\u3067\u3059\u304c\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u5f31\u304f\u50b7\u3084\u885d\u6483\u3001\u5727\u529b\u3092\u4e0e\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\uff08\uff13\uff0e\uff17V)\u96fb\u6c60\u5c02\u7528\u3067\u3059\u3002\u4ed6\u306e\u96fb\u6c60\u306b\u306f\u7d76\u5bfe\u306b\u63a5\u7d9a\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u63a5\u7d9a \u63a5\u7d9a\u3059\u308b\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306f400mAh\u3092\u3054\u4f7f\u7528\u304f\u3060\u3055\u3044\u3002\uff08\u5145\u96fb\u96fb\u6d4180~100mA\u3067\u53ef\u80fd\u306a\u3082\u306e\uff09 \u642d\u8f09\u30c1\u30c3\u30d7 Microchip MCP73871-2CC TI LP2985-33DBVR Murata NXFT15XH103FA2B050 \u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a \u96fb\u5727\u6bd4\u4f8b\u5145\u96fb\u5236\u5fa1VPCC\u3068\u96fb\u6d41\u5236\u9650\u5236\u5fa1ICLC\u3067\u5145\u96fb\u3001\u653e\u96fb\u3092\u5236\u5fa1\u3044\u305f\u3057\u307e\u3059\u3002 LBO(\u30d0\u30c3\u30c6\u30ea\u30fc\u96fb\u5727\u4f4e\u4e0b\u691c\u77e5\u51fa\u529b)\u306f\uff13\uff0e\uff11V\u3068\u306a\u308a\u307e\u3059\u3002 \u4e88\u5099\u5145\u96fb\u3001\u5b9a\u96fb\u6d41\u5145\u96fb\u3001\u5b9a\u96fb\u5727\u5145\u96fb STAT1\uff08\u9752\uff09\u3068PG\uff08\u8d64\uff09\u304c\u70b9\u706f \u5145\u96fb\u5b8c\u4e86\uff08\u30b9\u30bf\u30f3\u30d0\u30a4\uff09 STAT2\uff08\u7dd1\uff09\u3068PG\uff08\u8d64\uff09\u304c\u70b9\u706f \u6e29\u5ea6\u30d5\u30a9\u30eb\u30c8\u3001\u30bf\u30a4\u30de\u30d5\u30a9\u30eb\u30c8\u3067\u505c\u6b62 \u5168\u70b9\u706f \u30d0\u30c3\u30c6\u30ea\u96fb\u5727\u4f4e\u4e0b STAT1\uff08\u9752\uff09\u306e\u307f\u70b9\u706f \u30d0\u30c3\u30c6\u30ea\u30fc\u306a\u3057\uff08\u30d0\u30c3\u30c6\u30ea\u30fc\u304c\u672a\u63a5\u7d9a\uff09\u307e\u305f\u306f\u3001 \u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\uff08\u96fb\u6e90\u96fb\u5727VDD\u3068\u5165\u529b\u96fb\u5727IN\u304c\u540c\u3058\u3068\u304d\uff09 PG\uff08\u8d64\uff09\u304c\u70b9\u706f \u5165\u529b\u96fb\u6e90\u306a\u3057\uff08\u30d0\u30c3\u30c6\u30ea\u30fc\u304c\u653e\u96fb\u3057BLE\u3078\u4f9b\u7d66\uff09 \u307e\u305f\u306f\u3001\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\uff08\u96fb\u6e90\u96fb\u5727VDD\u3068\u30d0\u30c3\u30c6\u30ea\u30fc\u96fb\u5727\u304c\u540c\u3058\u3068\u304d\uff09 \u5168\u6d88\u706f \u203b\u6b63\u5e38\u306b\u63a5\u7d9a\u3057\u3001\u5341\u5206\u306a\u65e5\u5149\u304c\u592a\u967d\u96fb\u6c60\u306b\u7167\u5c04\u3055\u308c\u3066\u3044\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u5145\u96fb\u3057\u3066\u3082\u4f55\u3082LED\u304c\u5149\u3089\u306a\u3044\u3068\u304d\u306f\u3001\u7570\u5e38\u3067\u3059\u306e\u3067\u305f\u3060\u3061\u306b\u4f7f\u7528\u3092\u4e2d\u6b62\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5145\u96fb\u96fb\u5727 4.20V \u5165\u529b\u96fb\u5727 \u6700\u5927\u3000\uff16V \u6700\u4f4e\u30000.3V \u51fa\u529b\u96fb\u5727 3.3V(\u964d\u5727\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u306b\u3088\u308b) Connecting PH\u30b3\u30cd\u30af\u30bf SYS\u306b\u306f\u3001Shinobi_NRF\u307e\u305f\u306f\u3001Shinobi_ANA\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 Lipo\u306b\u306f\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60(3.7V)\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u203b\u63a5\u7d9a\u3092\u9593\u9055\u308f\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u203b\u77ed\u6642\u9593\u306b\u63a5\u7d9a\u3092\u7e70\u308a\u8fd4\u3055\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u203b\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u304c\u81a8\u3089\u3093\u3060\u3082\u306e\u3084\u3001\u81a8\u3089\u3093\u3060\u3082\u306e\u306f\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u203b\u30d0\u30c3\u30c6\u30ea\u30fc\u30e1\u30fc\u30ab\u30fc\u306e\u4ed5\u69d8\u3001\u63a8\u5968\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \uff11\uff0e\uff13\uff4d\uff4dDC\u30b8\u30e3\u30c3\u30af\u306b\u592a\u967d\u96fb\u6c60\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 NTC\u30b5\u30fc\u30df\u30b9\u30bf\u306f\u3001\u6e29\u5ea6\u8a08\u3067\u3042\u308a\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306e\u6e29\u5ea6\u3092\u8a08\u6e2c\u3057\u3001\u7570\u5e38\u306a\u6e29\u5ea6\u3092\u611f\u77e5\u3057\u3001\u505c\u6b62\u3057\u307e\u3059\u3002 \u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306b\u5bc6\u7740\u3059\u308b\u3088\u3046\u306b\u30c6\u30fc\u30d7\u6b62\u3081\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u8a2d\u5b9a \u6700\u5927\uff11\uff10\uff10\uff4dA\u4ee5\u4e0b\u3067\u5145\u96fb\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\uff08\u8a2d\u5b9a\u306f\u5909\u66f4\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\uff09 \u5b89\u5168\u30bf\u30a4\u30de\u30fc\uff16\u6642\u9593 \u6e29\u5ea6\u76e3\u8996\u3092\u6709\u52b9 \u6e29\u5ea6\u7bc4\u56f2 \u5145\u96fb\u52d5\u4f5c\u6e29\u5ea6\u7bc4\u56f2\u30000\u2103\uff5e\uff14\uff10\u2103 \u30c6\u30fc\u30d7\u3067\u30b5\u30fc\u30df\u30b9\u30bf\u3092\u30d0\u30c3\u30c6\u30ea\u30fc\u306b\u5f35\u308a\u4ed8\u3051\u3066\u304f\u3060\u3055\u3044\u3002 Parts Specification Document microchip MCP73871 Document mirata NXFT15XH103FA2B050 Document [TI LP2985-33DBVR](http://www.ti.com/lit/ds/symlink/lp2985.pdf ) Schematic","title":"3 Shinobi_Solar"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#3-shinobi_solar","text":"","title":"#3 Shinobi_Solar"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#overview","text":"\u592a\u967d\u96fb\u6c60\u30d1\u30cd\u30eb\u304b\u3089\u767a\u96fb\u3055\u308c\u305f\u96fb\u6c17\u3092LiPo\u30d0\u30c3\u30c6\u30ea\u30fc\uff08\uff13\uff0e\uff17V)\u306b\u5145\u96fb\u3001Shinobi_NRF,ANA6\u3078\u653e\u96fb\uff13\uff0e\uff13V\u3044\u305f\u3057\u307e\u3059\u3002 Shinobi\u3078\u306e\u96fb\u6e90\u4f9b\u7d66\u3068\u30ea\u30c1\u30a6\u30e0\u96fb\u6c60\u306e\u5145\u96fb\u3092\u540c\u6642\u306b\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002 \u96fb\u5727\u6bd4\u4f8b\u96fb\u6d41\u5236\u5fa1VCPP\u306b\u3088\u308a\u30d0\u30c3\u30c6\u30ea\u30fc\u5145\u96fb\u3088\u308a\u3082\u3001Shinobi_NRF\u3078\u306e\u7d66\u96fb\u3092\u512a\u5148\u3067\u304d\u307e\u3059\u3002 \uff13\uff0e\uff13V\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u642d\u8f09\u3002 NTC\u30b5\u30fc\u30df\u30b9\u30bf\u306b\u3088\u308b\u5145\u96fb\u7981\u6b62\u6a5f\u80fd \u203b\u91cd\u8981\u3000\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306f\u3001\u53d6\u308a\u6271\u3044\u306b\u8aa4\u308b\u3068\u5927\u5909\u5371\u967a\u3067\u3059\u3002 \u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306b\u306f\u3001\u8efd\u91cf\u306a\u306e\u3067\u3059\u304c\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u5f31\u304f\u50b7\u3084\u885d\u6483\u3001\u5727\u529b\u3092\u4e0e\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\uff08\uff13\uff0e\uff17V)\u96fb\u6c60\u5c02\u7528\u3067\u3059\u3002\u4ed6\u306e\u96fb\u6c60\u306b\u306f\u7d76\u5bfe\u306b\u63a5\u7d9a\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002","title":"Overview"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#_1","text":"\u63a5\u7d9a\u3059\u308b\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306f400mAh\u3092\u3054\u4f7f\u7528\u304f\u3060\u3055\u3044\u3002\uff08\u5145\u96fb\u96fb\u6d4180~100mA\u3067\u53ef\u80fd\u306a\u3082\u306e\uff09","title":"\u63a5\u7d9a"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#_2","text":"Microchip MCP73871-2CC TI LP2985-33DBVR Murata NXFT15XH103FA2B050","title":"\u642d\u8f09\u30c1\u30c3\u30d7"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#_3","text":"\u96fb\u5727\u6bd4\u4f8b\u5145\u96fb\u5236\u5fa1VPCC\u3068\u96fb\u6d41\u5236\u9650\u5236\u5fa1ICLC\u3067\u5145\u96fb\u3001\u653e\u96fb\u3092\u5236\u5fa1\u3044\u305f\u3057\u307e\u3059\u3002 LBO(\u30d0\u30c3\u30c6\u30ea\u30fc\u96fb\u5727\u4f4e\u4e0b\u691c\u77e5\u51fa\u529b)\u306f\uff13\uff0e\uff11V\u3068\u306a\u308a\u307e\u3059\u3002 \u4e88\u5099\u5145\u96fb\u3001\u5b9a\u96fb\u6d41\u5145\u96fb\u3001\u5b9a\u96fb\u5727\u5145\u96fb STAT1\uff08\u9752\uff09\u3068PG\uff08\u8d64\uff09\u304c\u70b9\u706f \u5145\u96fb\u5b8c\u4e86\uff08\u30b9\u30bf\u30f3\u30d0\u30a4\uff09 STAT2\uff08\u7dd1\uff09\u3068PG\uff08\u8d64\uff09\u304c\u70b9\u706f \u6e29\u5ea6\u30d5\u30a9\u30eb\u30c8\u3001\u30bf\u30a4\u30de\u30d5\u30a9\u30eb\u30c8\u3067\u505c\u6b62 \u5168\u70b9\u706f \u30d0\u30c3\u30c6\u30ea\u96fb\u5727\u4f4e\u4e0b STAT1\uff08\u9752\uff09\u306e\u307f\u70b9\u706f \u30d0\u30c3\u30c6\u30ea\u30fc\u306a\u3057\uff08\u30d0\u30c3\u30c6\u30ea\u30fc\u304c\u672a\u63a5\u7d9a\uff09\u307e\u305f\u306f\u3001 \u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\uff08\u96fb\u6e90\u96fb\u5727VDD\u3068\u5165\u529b\u96fb\u5727IN\u304c\u540c\u3058\u3068\u304d\uff09 PG\uff08\u8d64\uff09\u304c\u70b9\u706f \u5165\u529b\u96fb\u6e90\u306a\u3057\uff08\u30d0\u30c3\u30c6\u30ea\u30fc\u304c\u653e\u96fb\u3057BLE\u3078\u4f9b\u7d66\uff09 \u307e\u305f\u306f\u3001\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\uff08\u96fb\u6e90\u96fb\u5727VDD\u3068\u30d0\u30c3\u30c6\u30ea\u30fc\u96fb\u5727\u304c\u540c\u3058\u3068\u304d\uff09 \u5168\u6d88\u706f \u203b\u6b63\u5e38\u306b\u63a5\u7d9a\u3057\u3001\u5341\u5206\u306a\u65e5\u5149\u304c\u592a\u967d\u96fb\u6c60\u306b\u7167\u5c04\u3055\u308c\u3066\u3044\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u5145\u96fb\u3057\u3066\u3082\u4f55\u3082LED\u304c\u5149\u3089\u306a\u3044\u3068\u304d\u306f\u3001\u7570\u5e38\u3067\u3059\u306e\u3067\u305f\u3060\u3061\u306b\u4f7f\u7528\u3092\u4e2d\u6b62\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#_4","text":"4.20V","title":"\u5145\u96fb\u96fb\u5727"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#_5","text":"\u6700\u5927\u3000\uff16V \u6700\u4f4e\u30000.3V","title":"\u5165\u529b\u96fb\u5727"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#_6","text":"3.3V(\u964d\u5727\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u306b\u3088\u308b)","title":"\u51fa\u529b\u96fb\u5727"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#connecting","text":"PH\u30b3\u30cd\u30af\u30bf SYS\u306b\u306f\u3001Shinobi_NRF\u307e\u305f\u306f\u3001Shinobi_ANA\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 Lipo\u306b\u306f\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60(3.7V)\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 \u203b\u63a5\u7d9a\u3092\u9593\u9055\u308f\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u203b\u77ed\u6642\u9593\u306b\u63a5\u7d9a\u3092\u7e70\u308a\u8fd4\u3055\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u203b\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u304c\u81a8\u3089\u3093\u3060\u3082\u306e\u3084\u3001\u81a8\u3089\u3093\u3060\u3082\u306e\u306f\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u203b\u30d0\u30c3\u30c6\u30ea\u30fc\u30e1\u30fc\u30ab\u30fc\u306e\u4ed5\u69d8\u3001\u63a8\u5968\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \uff11\uff0e\uff13\uff4d\uff4dDC\u30b8\u30e3\u30c3\u30af\u306b\u592a\u967d\u96fb\u6c60\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002 NTC\u30b5\u30fc\u30df\u30b9\u30bf\u306f\u3001\u6e29\u5ea6\u8a08\u3067\u3042\u308a\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306e\u6e29\u5ea6\u3092\u8a08\u6e2c\u3057\u3001\u7570\u5e38\u306a\u6e29\u5ea6\u3092\u611f\u77e5\u3057\u3001\u505c\u6b62\u3057\u307e\u3059\u3002 \u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306b\u5bc6\u7740\u3059\u308b\u3088\u3046\u306b\u30c6\u30fc\u30d7\u6b62\u3081\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Connecting"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#_7","text":"\u6700\u5927\uff11\uff10\uff10\uff4dA\u4ee5\u4e0b\u3067\u5145\u96fb\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\uff08\u8a2d\u5b9a\u306f\u5909\u66f4\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\uff09 \u5b89\u5168\u30bf\u30a4\u30de\u30fc\uff16\u6642\u9593 \u6e29\u5ea6\u76e3\u8996\u3092\u6709\u52b9","title":"\u8a2d\u5b9a"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#_8","text":"\u5145\u96fb\u52d5\u4f5c\u6e29\u5ea6\u7bc4\u56f2\u30000\u2103\uff5e\uff14\uff10\u2103 \u30c6\u30fc\u30d7\u3067\u30b5\u30fc\u30df\u30b9\u30bf\u3092\u30d0\u30c3\u30c6\u30ea\u30fc\u306b\u5f35\u308a\u4ed8\u3051\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u6e29\u5ea6\u7bc4\u56f2"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#parts-specification","text":"Document microchip MCP73871 Document mirata NXFT15XH103FA2B050 Document [TI LP2985-33DBVR](http://www.ti.com/lit/ds/symlink/lp2985.pdf )","title":"Parts Specification"},{"location":"b.Shinobi/3_Shinobi_SolarLipoCharger/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/4_Shinobi_ANA6/","text":"#4 Shinobi_ANA6 Overview Shinobi_ANA6\u306f\u3001\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\u6e08\u307f\u3001Raytac(\u53f0\u6e7e) MDBT42Q(MDBT42Q-512K)BLE\u30e2\u30b8\u30e5\u30fc\u30eb\u642d\u8f09\u3002 DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u2015\u306e\u305f\u3081\u30a4\u30f3\u30c0\u30af\u30bf\u642d\u8f09\u3001\u4f4e\u901f\u632f\u52d5\u5b50\u642d\u8f0932kHz\u3002 \uff16\u3064\u306e\u30a2\u30ca\u30ed\u30b0\u307e\u305f\u306fGPIO\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u642d\u8f09\u30c1\u30c3\u30d7 Nordic Semiconductor NRF52832(Cortex-M4F) \u901a\u4fe1 Bluetooth 4.0,4.1,4.2(BLE\u30e2\u30fc\u30c9) \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 GPIO ADC\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\u53ef\u80fd \u30e1\u30e2\u30ea RAM 64KB ROM 512KB \u901a\u4fe1\u53ef\u80fd\u8ddd\u96e2 \u98db\u8ddd\u96e2\u3000\u6700\u5927\uff18\uff10\uff4d\uff08\u30aa\u30fc\u30d7\u30f3\u30b9\u30da\u30fc\u30b9\uff09 \u203b\u74b0\u5883\u306b\u3088\u308a\u307e\u3059\u3002 \u5165\u529b\u96fb\u5727 1.7V~3.6V Connecting PH\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\uff08\uff11\uff0e\uff17V\uff5e\uff13\uff0e\uff16V\uff09 SWD\u306b\u5bfe\u5fdc\u3057\u305f\u30d4\u30f3\u30d8\u30c3\u30c0 Parts Specification Document raytac Schematic Sample Code \u69cb\u6210Parts","title":"4 Shinobi_ANA6"},{"location":"b.Shinobi/4_Shinobi_ANA6/#4-shinobi_ana6","text":"","title":"#4 Shinobi_ANA6"},{"location":"b.Shinobi/4_Shinobi_ANA6/#overview","text":"Shinobi_ANA6\u306f\u3001\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\u6e08\u307f\u3001Raytac(\u53f0\u6e7e) MDBT42Q(MDBT42Q-512K)BLE\u30e2\u30b8\u30e5\u30fc\u30eb\u642d\u8f09\u3002 DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u2015\u306e\u305f\u3081\u30a4\u30f3\u30c0\u30af\u30bf\u642d\u8f09\u3001\u4f4e\u901f\u632f\u52d5\u5b50\u642d\u8f0932kHz\u3002 \uff16\u3064\u306e\u30a2\u30ca\u30ed\u30b0\u307e\u305f\u306fGPIO\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"b.Shinobi/4_Shinobi_ANA6/#_1","text":"Nordic Semiconductor NRF52832(Cortex-M4F)","title":"\u642d\u8f09\u30c1\u30c3\u30d7"},{"location":"b.Shinobi/4_Shinobi_ANA6/#_2","text":"Bluetooth 4.0,4.1,4.2(BLE\u30e2\u30fc\u30c9)","title":"\u901a\u4fe1"},{"location":"b.Shinobi/4_Shinobi_ANA6/#_3","text":"GPIO ADC\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\u53ef\u80fd","title":"\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9"},{"location":"b.Shinobi/4_Shinobi_ANA6/#_4","text":"RAM 64KB ROM 512KB","title":"\u30e1\u30e2\u30ea"},{"location":"b.Shinobi/4_Shinobi_ANA6/#_5","text":"\u98db\u8ddd\u96e2\u3000\u6700\u5927\uff18\uff10\uff4d\uff08\u30aa\u30fc\u30d7\u30f3\u30b9\u30da\u30fc\u30b9\uff09 \u203b\u74b0\u5883\u306b\u3088\u308a\u307e\u3059\u3002","title":"\u901a\u4fe1\u53ef\u80fd\u8ddd\u96e2"},{"location":"b.Shinobi/4_Shinobi_ANA6/#_6","text":"1.7V~3.6V","title":"\u5165\u529b\u96fb\u5727"},{"location":"b.Shinobi/4_Shinobi_ANA6/#connecting","text":"PH\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\uff08\uff11\uff0e\uff17V\uff5e\uff13\uff0e\uff16V\uff09 SWD\u306b\u5bfe\u5fdc\u3057\u305f\u30d4\u30f3\u30d8\u30c3\u30c0","title":"Connecting"},{"location":"b.Shinobi/4_Shinobi_ANA6/#parts-specification","text":"Document raytac","title":"Parts Specification"},{"location":"b.Shinobi/4_Shinobi_ANA6/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/4_Shinobi_ANA6/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/4_Shinobi_ANA6/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/5_Shinobi_Motor/","text":"#5 Shinobi Motor Overview DRV8830\u30922\u500b\u642d\u8f09\u3057\u305f\u30e2\u30fc\u30bf\u30fc\u30c9\u30e9\u30a4\u30d0\u30fc\u3067\u3059\u3002 DC\u30e2\u30fc\u30bf\u30fc\u3092I2C\u3067\u5236\u5fa1\u3057\u307e\u3059\u3002Nordic NRF51,NRF5152\u3067\u306fI2C\u3092TWI\uff08Two Wire Interface\uff09\u3068\u3044\u3046\u540d\u79f0\u306b\u306a\u308a\u307e\u3059\u3002 Connecting Shibobi NRF #1 \u3068Shinobi Motor #5 \u3092Fabo 4Pin\u30b1\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3057I2C\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\u3057\u307e\u3059\u3002 DC\u30e2\u30fc\u30bf\u30fc\u306f\u96fb\u6e90\u306b\u5408\u308f\u305b\u3066\u3054\u4f7f\u7528\u304f\u3060\u3055\u3044\u3002\u72b6\u6cc1\u3092\u898b\u305f\u3044\u5834\u5408\u306f\u3001Fabo #304 USB\u30b7\u30ea\u30a2\u30eb\u3092Shnibi #1 NRF\u306eSerial\u7aef\u5b50\u306b4Pin\u30b1\u30fc\u30d6\u30eb\u3092\u7528\u3044\u3066\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Sample Code \u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u5b9f\u884c\u5f8c\u3001\uff12\u3064\u306e\u30e2\u30fc\u30bf\u30fc\u304c\u524d\u9032\u3001\u30d0\u30c3\u30af\u3057\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u4e0d\u8981 \u5fc5\u8981\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4ee5\u4e0b\u30c1\u30a7\u30c3\u30af\u304a\u3088\u3073\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Board Support--> bsp CMSIS --> CORE Device --> Startup nRF Drivers --> app_uart Fifo\u3092\u9078\u629e nRF Drivers --> nrf_delay nRF Drivers --> nrf_drv_common nRF Drivers --> nrf_drv_twi nRF Drivers --> nrf_drv_uart nRF Drivers --> nrf_error No SoftwareDivce\u3092\u9078\u629e nRF Drivers --> nrf_gpio nRF Drivers --> nrf_twi nRF Drivers --> nrf_uart nRF Drivers --> nrf_uarte nRF Library --> app_error nRF Library --> app_fifo nRF Library --> app_util nRF Library --> nordic_common nRF Library --> nrf_assert nRF Library --> retarget 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 #include <stdio.h> #include \"boards.h\" #include \"app_uart.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define ARDUINO_I2C_SCL_PIN 27 #define ARDUINO_I2C_SDA_PIN 26 #define UART_TX_BUF_SIZE 256 #define UART_RX_BUF_SIZE 1 #define DRV8830_ADDR_Motor1 0x64 #define DRV8830_ADDR_Motor2 0x63 #define CONTROL_ADDR 0x00 #define FALUT_ADR 0x01 #define MOTOR_STANBY 0x00 #define MOTOR_REVERSE 0x01 #define MOTOR_NORMAL 0x02 #define MOTOR_BRAKE 0x03 #define MAX_VOLTAGE 0x3F #define MIN_VOLTAGE 0x01 /* TWI instance. */ static const nrf_drv_twi_t m_twi_DRV8830 = NRF_DRV_TWI_INSTANCE ( 0 ); static void uart_events_handler ( app_uart_evt_t * p_event ) { switch ( p_event -> evt_type ) { case APP_UART_COMMUNICATION_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_communication ); break ; case APP_UART_FIFO_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_code ); break ; default : break ; } } //UART\u306e\u512a\u5148\u5ea6\u306f\u4f4e\u3044 static void uart_config ( void ) { uint32_t err_code ; const app_uart_comm_params_t comm_params = { RX_PIN_NUMBER , TX_PIN_NUMBER , RTS_PIN_NUMBER , CTS_PIN_NUMBER , APP_UART_FLOW_CONTROL_DISABLED , false , UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_events_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { } //TWI\u306e\u512a\u5148\u5ea6\u304c\u9ad8\u3044 void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_DRV8830_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH }; err_code = nrf_drv_twi_init ( & m_twi_DRV8830 , & twi_DRV8830_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi_DRV8830 ); } int main ( void ) { uart_config (); twi_init (); printf ( \" \\n\\r **************************************** \\r\\n \" ); printf ( \"*Fabo Shinobi Motor beta Firmware * \\r\\n \" ); printf ( \"*Fabo 2017 * \\r\\n \" ); printf ( \"*Version 0.0.0 * \\r\\n \" ); printf ( \"**************************************** \\r\\n \" ); nrf_delay_ms ( 300 ); //DVR8830\u3000\u521d\u671f\u8a2d\u5b9a uint8_t reg [ 2 ] = { CONTROL_ADDR , 0x00 + ( 0x09 << 2 )}; nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor1 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 1 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor2 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 1000 ); printf ( \" \\n\\r Forward Speed up \\r\\n \" ); //\u524d\u9032 for ( uint8_t i = MIN_VOLTAGE ; i <= MAX_VOLTAGE ; i ++ ) { reg [ 1 ] = 0x02 + ( i << 2 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor1 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 1 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor2 , reg , sizeof ( reg ), false ); printf ( \"Speed=%d \\n\\r \" , i ); nrf_delay_ms ( 200 ); } printf ( \"MAX Speed \\n\\r \" ); nrf_delay_ms ( 5000 ); printf ( \" \\n\\r Forward Speed down \\r\\n \" ); //\u5f8c\u9032 for ( uint8_t i = MAX_VOLTAGE ; i >= MIN_VOLTAGE ; i -- ) { reg [ 1 ] = 0x02 + ( i << 2 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor1 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 1 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor2 , reg , sizeof ( reg ), false ); printf ( \"Speed=%d \\n\\r \" , i ); nrf_delay_ms ( 200 ); } printf ( \"END. \\n\\r \" ); for (;;){ } } \u69cb\u6210Parts GitHub","title":"5 Shinobi Motor"},{"location":"b.Shinobi/5_Shinobi_Motor/#5-shinobi-motor","text":"","title":"#5 Shinobi Motor"},{"location":"b.Shinobi/5_Shinobi_Motor/#overview","text":"DRV8830\u30922\u500b\u642d\u8f09\u3057\u305f\u30e2\u30fc\u30bf\u30fc\u30c9\u30e9\u30a4\u30d0\u30fc\u3067\u3059\u3002 DC\u30e2\u30fc\u30bf\u30fc\u3092I2C\u3067\u5236\u5fa1\u3057\u307e\u3059\u3002Nordic NRF51,NRF5152\u3067\u306fI2C\u3092TWI\uff08Two Wire Interface\uff09\u3068\u3044\u3046\u540d\u79f0\u306b\u306a\u308a\u307e\u3059\u3002","title":"Overview"},{"location":"b.Shinobi/5_Shinobi_Motor/#connecting","text":"Shibobi NRF #1 \u3068Shinobi Motor #5 \u3092Fabo 4Pin\u30b1\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3057I2C\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\u3057\u307e\u3059\u3002 DC\u30e2\u30fc\u30bf\u30fc\u306f\u96fb\u6e90\u306b\u5408\u308f\u305b\u3066\u3054\u4f7f\u7528\u304f\u3060\u3055\u3044\u3002\u72b6\u6cc1\u3092\u898b\u305f\u3044\u5834\u5408\u306f\u3001Fabo #304 USB\u30b7\u30ea\u30a2\u30eb\u3092Shnibi #1 NRF\u306eSerial\u7aef\u5b50\u306b4Pin\u30b1\u30fc\u30d6\u30eb\u3092\u7528\u3044\u3066\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Connecting"},{"location":"b.Shinobi/5_Shinobi_Motor/#sample-code","text":"\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u5b9f\u884c\u5f8c\u3001\uff12\u3064\u306e\u30e2\u30fc\u30bf\u30fc\u304c\u524d\u9032\u3001\u30d0\u30c3\u30af\u3057\u307e\u3059\u3002 \u30bd\u30d5\u30c8\u30c7\u30d0\u30a4\u30b9\u4e0d\u8981 \u5fc5\u8981\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4ee5\u4e0b\u30c1\u30a7\u30c3\u30af\u304a\u3088\u3073\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Board Support--> bsp CMSIS --> CORE Device --> Startup nRF Drivers --> app_uart Fifo\u3092\u9078\u629e nRF Drivers --> nrf_delay nRF Drivers --> nrf_drv_common nRF Drivers --> nrf_drv_twi nRF Drivers --> nrf_drv_uart nRF Drivers --> nrf_error No SoftwareDivce\u3092\u9078\u629e nRF Drivers --> nrf_gpio nRF Drivers --> nrf_twi nRF Drivers --> nrf_uart nRF Drivers --> nrf_uarte nRF Library --> app_error nRF Library --> app_fifo nRF Library --> app_util nRF Library --> nordic_common nRF Library --> nrf_assert nRF Library --> retarget 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 #include <stdio.h> #include \"boards.h\" #include \"app_uart.h\" #include \"app_error.h\" #include \"nrf_drv_twi.h\" #include \"nrf_delay.h\" #define ARDUINO_I2C_SCL_PIN 27 #define ARDUINO_I2C_SDA_PIN 26 #define UART_TX_BUF_SIZE 256 #define UART_RX_BUF_SIZE 1 #define DRV8830_ADDR_Motor1 0x64 #define DRV8830_ADDR_Motor2 0x63 #define CONTROL_ADDR 0x00 #define FALUT_ADR 0x01 #define MOTOR_STANBY 0x00 #define MOTOR_REVERSE 0x01 #define MOTOR_NORMAL 0x02 #define MOTOR_BRAKE 0x03 #define MAX_VOLTAGE 0x3F #define MIN_VOLTAGE 0x01 /* TWI instance. */ static const nrf_drv_twi_t m_twi_DRV8830 = NRF_DRV_TWI_INSTANCE ( 0 ); static void uart_events_handler ( app_uart_evt_t * p_event ) { switch ( p_event -> evt_type ) { case APP_UART_COMMUNICATION_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_communication ); break ; case APP_UART_FIFO_ERROR : APP_ERROR_HANDLER ( p_event -> data . error_code ); break ; default : break ; } } //UART\u306e\u512a\u5148\u5ea6\u306f\u4f4e\u3044 static void uart_config ( void ) { uint32_t err_code ; const app_uart_comm_params_t comm_params = { RX_PIN_NUMBER , TX_PIN_NUMBER , RTS_PIN_NUMBER , CTS_PIN_NUMBER , APP_UART_FLOW_CONTROL_DISABLED , false , UART_BAUDRATE_BAUDRATE_Baud38400 }; APP_UART_FIFO_INIT ( & comm_params , UART_RX_BUF_SIZE , UART_TX_BUF_SIZE , uart_events_handler , APP_IRQ_PRIORITY_LOW , err_code ); APP_ERROR_CHECK ( err_code ); } void twi_handler ( nrf_drv_twi_evt_t const * p_event , void * p_context ) { } //TWI\u306e\u512a\u5148\u5ea6\u304c\u9ad8\u3044 void twi_init ( void ) { ret_code_t err_code ; const nrf_drv_twi_config_t twi_DRV8830_config = { . scl = ARDUINO_SCL_PIN , . sda = ARDUINO_SDA_PIN , . frequency = NRF_TWI_FREQ_100K , . interrupt_priority = APP_IRQ_PRIORITY_HIGH }; err_code = nrf_drv_twi_init ( & m_twi_DRV8830 , & twi_DRV8830_config , twi_handler , NULL ); APP_ERROR_CHECK ( err_code ); nrf_drv_twi_enable ( & m_twi_DRV8830 ); } int main ( void ) { uart_config (); twi_init (); printf ( \" \\n\\r **************************************** \\r\\n \" ); printf ( \"*Fabo Shinobi Motor beta Firmware * \\r\\n \" ); printf ( \"*Fabo 2017 * \\r\\n \" ); printf ( \"*Version 0.0.0 * \\r\\n \" ); printf ( \"**************************************** \\r\\n \" ); nrf_delay_ms ( 300 ); //DVR8830\u3000\u521d\u671f\u8a2d\u5b9a uint8_t reg [ 2 ] = { CONTROL_ADDR , 0x00 + ( 0x09 << 2 )}; nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor1 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 1 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor2 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 1000 ); printf ( \" \\n\\r Forward Speed up \\r\\n \" ); //\u524d\u9032 for ( uint8_t i = MIN_VOLTAGE ; i <= MAX_VOLTAGE ; i ++ ) { reg [ 1 ] = 0x02 + ( i << 2 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor1 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 1 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor2 , reg , sizeof ( reg ), false ); printf ( \"Speed=%d \\n\\r \" , i ); nrf_delay_ms ( 200 ); } printf ( \"MAX Speed \\n\\r \" ); nrf_delay_ms ( 5000 ); printf ( \" \\n\\r Forward Speed down \\r\\n \" ); //\u5f8c\u9032 for ( uint8_t i = MAX_VOLTAGE ; i >= MIN_VOLTAGE ; i -- ) { reg [ 1 ] = 0x02 + ( i << 2 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor1 , reg , sizeof ( reg ), false ); nrf_delay_ms ( 1 ); nrf_drv_twi_tx ( & m_twi_DRV8830 , DRV8830_ADDR_Motor2 , reg , sizeof ( reg ), false ); printf ( \"Speed=%d \\n\\r \" , i ); nrf_delay_ms ( 200 ); } printf ( \"END. \\n\\r \" ); for (;;){ } }","title":"Sample Code"},{"location":"b.Shinobi/5_Shinobi_Motor/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/5_Shinobi_Motor/#github","text":"","title":"GitHub"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/","text":"Shinobi_USB_Battery(\u30ea\u30cb\u30a2\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc) Overview \u30ce\u30a4\u30ba\u304c\u5c11\u306a\u304f\u6271\u3044\u3084\u3059\u3044\u30b7\u30f3\u30d7\u30eb\u306a\u30ea\u30cb\u30a2\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u96fb\u6e90\u3000\u964d\u5727\u578b \uff13\uff0e\uff13V\u3067\u51fa\u529b\u3002\uff08\u51fa\u529b\uff11A) \u642d\u8f09\u30c1\u30c3\u30d7 AMS1117CD-3.3 Connecting PH\u30b3\u30cd\u30af\u30bf\u3067\u51fa\u529b\uff083.3V\uff09 \u30de\u30a4\u30af\u30edUSB\u3067\u5165\u529b\u3002 \u5165\u529b\u96fb\u5727 \uff15V Parts Specification Document AMS1117 Schematic Sample Code \u69cb\u6210Parts","title":"Shinobi_USB_Battery(\u30ea\u30cb\u30a2\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc)"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#shinobi_usb_battery","text":"","title":"Shinobi_USB_Battery(\u30ea\u30cb\u30a2\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc)"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#overview","text":"\u30ce\u30a4\u30ba\u304c\u5c11\u306a\u304f\u6271\u3044\u3084\u3059\u3044\u30b7\u30f3\u30d7\u30eb\u306a\u30ea\u30cb\u30a2\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u30fc\u96fb\u6e90\u3000\u964d\u5727\u578b \uff13\uff0e\uff13V\u3067\u51fa\u529b\u3002\uff08\u51fa\u529b\uff11A)","title":"Overview"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#_1","text":"AMS1117CD-3.3","title":"\u642d\u8f09\u30c1\u30c3\u30d7"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#connecting","text":"PH\u30b3\u30cd\u30af\u30bf\u3067\u51fa\u529b\uff083.3V\uff09 \u30de\u30a4\u30af\u30edUSB\u3067\u5165\u529b\u3002","title":"Connecting"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#_2","text":"\uff15V","title":"\u5165\u529b\u96fb\u5727"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#parts-specification","text":"Document AMS1117","title":"Parts Specification"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/8_Shinobi_USB_Battery_LDO/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/","text":"#99 Shinobi_I2C Expand Overview Shinobi_NRF\u306f\uff11\u3064\u306e\u30dd\u30fc\u30c8\u3067\u3059\u304c\u3001\u3053\u306eI2C Expand\u3092\u4f7f\u3048\u3070\u3001\u8907\u6570\u53f0\u30c7\u30d0\u30a4\u30b9\u304c\u63a5\u7d9a\u3067\u304d\u307e\u3059\u3002 \u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a Connecting Parts Specification Schematic Sample Code \u69cb\u6210Parts","title":"99 Shinobi_I2C Expand"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/#99-shinobi_i2c-expand","text":"","title":"#99 Shinobi_I2C Expand"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/#overview","text":"Shinobi_NRF\u306f\uff11\u3064\u306e\u30dd\u30fc\u30c8\u3067\u3059\u304c\u3001\u3053\u306eI2C Expand\u3092\u4f7f\u3048\u3070\u3001\u8907\u6570\u53f0\u30c7\u30d0\u30a4\u30b9\u304c\u63a5\u7d9a\u3067\u304d\u307e\u3059\u3002","title":"Overview"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/#_1","text":"","title":"\u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/#connecting","text":"","title":"Connecting"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/#parts-specification","text":"","title":"Parts Specification"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/99_Shinobi_I2C_Expand/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/","text":"Shinobi_USB_Battery(LM3671) Overview \u9ad8\u52b9\u7387\u306a\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u96fb\u6e90\u3000\u964d\u5727\u578b \uff13\uff0e\uff13V\u3067\u51fa\u529b\u3002\uff08\uff16\uff10\uff10\uff4dA)DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf \u642d\u8f09\u30c1\u30c3\u30d7 LM3671 Connecting PH\u30b3\u30cd\u30af\u30bf\u3067\u51fa\u529b\uff083.3V\uff09 \u30de\u30a4\u30af\u30edUSB\u3067\u5165\u529b\u3002 \u203b\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u96fb\u6e90\u306f\u30c7\u30ea\u30b1\u30fc\u30c8\u3067\u3059\u306e\u3067\u3001\u57fa\u677f\u7b49\u306f\u3055\u308f\u3089\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 Parts Specification Document TI LM3671 Schematic Sample Code \u69cb\u6210Parts","title":"Shinobi_USB_Battery(LM3671)"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/#shinobi_usb_batterylm3671","text":"","title":"Shinobi_USB_Battery(LM3671)"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/#overview","text":"\u9ad8\u52b9\u7387\u306a\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u96fb\u6e90\u3000\u964d\u5727\u578b \uff13\uff0e\uff13V\u3067\u51fa\u529b\u3002\uff08\uff16\uff10\uff10\uff4dA)DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf","title":"Overview"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/#_1","text":"LM3671","title":"\u642d\u8f09\u30c1\u30c3\u30d7"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/#connecting","text":"PH\u30b3\u30cd\u30af\u30bf\u3067\u51fa\u529b\uff083.3V\uff09 \u30de\u30a4\u30af\u30edUSB\u3067\u5165\u529b\u3002 \u203b\u30b9\u30a4\u30c3\u30c1\u30f3\u30b0\u96fb\u6e90\u306f\u30c7\u30ea\u30b1\u30fc\u30c8\u3067\u3059\u306e\u3067\u3001\u57fa\u677f\u7b49\u306f\u3055\u308f\u3089\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002","title":"Connecting"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/#parts-specification","text":"Document TI LM3671","title":"Parts Specification"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/9_Shinobi_USB_Battery_LM3671/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/Li-PoBattery/","text":"Lipo Battery Overview 400mAh\u3000\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60 PHR\u30b3\u30cd\u30af\u30bf\u4ed8\u304d\u3002 \u203b\u30b3\u30cd\u30af\u30bf\u3092\u6539\u9020\u306f\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306f\u53d6\u308a\u6271\u3044\u3092\u8aa4\u308b\u3068\u975e\u5e38\u306b\u5371\u967a\u3067\u3059\u3002 \u5371\u967a \u7c21\u5358\u306b\u7206\u767a\u3001\u767a\u706b\u3001\u767a\u71b1\u3001\u767a\u7159\u3057\u307e\u3059\u3002\u4f7f\u7528\u4e0a\u306e\u6ce8\u610f\u3092\u304a\u5b88\u308a\u304f\u3060\u3055\u3044\u3002 \u81ea\u52d5\u8eca\u306e\u30bf\u3099\u30c3\u30b7\u30e5\u30db\u3099\u30fc\u30c8\u3099\u3084\u7a93\u969b\u306a\u3068\u3099\u76f4\u5c04\u65e5\u5149\u306e\u5f53\u308b\u5834\u6240\u3001\u708e\u5929\u4e0b\u99d0\u8eca\u306e\u8eca\u5185\u306a\u3068\u3099\u3001\u9ad8\u3044\u6e29\u5ea6\u306b\u306a\u308b\u5834\u6240\u306b\u653e\u7f6e\u3057\u306a\u3044\u3066\u3099\u304f\u305f\u3099\u3055\u3044\u3002 \u3099\u96fb\u6c60\u3092\u30b9\u30c8\u30fc\u30d5\u3099\u306a\u3068\u3099\u306e\u71b1\u6e90\u306e\u305d\u306f\u3099\u306b\u653e\u7f6e\u3057\u306a\u3044\u3066\u3099\u304f\u305f\u3099\u3055\u3044\u3002\u767a\u71b1\u3001\u7834\u88c2\u3001\u767a\u706b \u306e\u539f\u56e0\u306b\u306a\u308a\u307e\u3059\u3002 \u6c34\u3001\u30ac\u30bd\u30ea\u30f3\u3001\u30c9\u30ea\u30f3\u30af\u306a\u3069\u306e\u6db2\u4f53\u4e2d\u306e\u6295\u4e0b\u3092\u7981\u6b62\u3059\u308b\u3002 \u6e29\u5ea6\u304c60\u2103\u3092\u8d85\u3048\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u8eca\u5185\u307e\u305f\u306f\u706b\u707d\u306b\u8fd1\u3044\u3068\u3053\u308d\u3067\u4f7f\u7528\u3059\u308b\u306e\u3092\u7981\u6b62\u3057\u307e\u3059\u3002\u5145\u653e\u96fb\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u96fb\u6c60\u306f\u3001\u30cd\u30c3\u30af\u30ec\u30b9\u306a\u3069\u306e\u91d1\u5c5e\u88fd\u306e\u3082\u306e\u3068\u4e00\u7dd2\u306b\u3001\u30dd\u30b1\u30c3\u30c8\u3084\u30d0\u30c3\u30b0\u306b\u5165\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d8\u30a2\u30d4\u30f3\u3001\u30b3\u30a4\u30f3\u3001\u307e\u305f\u306f\u30cd\u30b8\u3002 \u305d\u306e\u3088\u3046\u306a\u7269\u3092\u6301\u3064\u96fb\u6c60\u306f\u4fdd\u7ba1\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \uff08+\uff09\u3068\uff08-\uff09\u7aef\u5b50\u3092\u4ed6\u306e\u91d1\u5c5e\u3068\u77ed\u7d61\uff08\u30b7\u30e7\u30fc\u30c8\uff09\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \uff08+\uff09\u3068\uff08-\uff09\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u306f\u3001\u96fb\u6c60\u3092\u7f6e\u304b\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u91dd\u306a\u3069\u306e\u92ed\u5229\u306a\u3082\u306e\u3067\u96fb\u6c60\u3092\u7a81\u304d\u523a\u3059\u3053\u3068\u3092\u306b\u7981\u3058\u307e\u3059\u3002 \u30bb\u30eb\u3092\u5206\u89e3\u307e\u305f\u306f\u6539\u9020\u3059\u308b\u3053\u3068\u3092\u7981\u3058\u307e\u3059\u3002 \u30bb\u30eb\u306e\u6eb6\u63a5\u3092\u7981\u6b62\u3057\u307e\u3059\u3002 \u6df1\u3044\u50b7\u3084\u5909\u5f62\u3092\u4f34\u3046\u96fb\u6c60\u306f\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u8b66\u544a \u96fb\u6c60\u3092\u96fb\u5b50\u30ec\u30f3\u30b8\u3001\u4e7e\u71e5\u6a5f\u3001\u307e\u305f\u306f\u9ad8\u5727\u5bb9\u5668\u306b\u5165\u308c\u308b\u3053\u3068\u3092\u7981\u3058\u307e\u3059\u3002 \u4e7e\u96fb\u6c60\u3084\u4ed6\u306e\u4e00\u6b21\u96fb\u6c60\u3001\u307e\u305f\u306f\u65b0\u3057\u3044\u96fb\u6c60\u3084\u53e4\u3044\u96fb\u6c60\u3084\u7570\u306a\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3001\u30bf\u30a4\u30d7\u3001\u307e\u305f\u306f\u30d6\u30e9\u30f3\u30c9\u3068\u4e00\u7dd2\u306b\u4f7f\u3046\u3053\u3068\u3092\u7981\u3058\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u6642\u9593\u5185\u306b\u5145\u96fb\u304c\u5b8c\u4e86\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u5145\u96fb\u3092\u4e2d\u6b62\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u7570\u5e38\u306a\u71b1\u3001\u306b\u304a\u3044\u3001\u5909\u8272\u3001\u5909\u5f62\u3001\u7570\u5e38\u304c\u691c\u51fa\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u4f7f\u7528\u3092\u4e2d\u6b62\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4f7f\u7528\u3001\u5145\u96fb\u3001\u307e\u305f\u306f\u4fdd\u7ba1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6f0f\u308c\u3084\u60aa\u81ed\u304c\u691c\u51fa\u3055\u308c\u305f\u5834\u5408\u306f\u76f4\u3061\u306b\u706b\u6c17\u304b\u3089\u96e2\u308c\u3066\u304f\u3060\u3055\u3044\u3002 \u76ae\u819a\u3084\u8863\u670d\u306b\u6db2\u4f53\u304c\u6f0f\u308c\u305f\u5834\u5408\u306f\u3001\u3059\u3050\u306b\u304d\u308c\u3044\u306a\u6c34\u3067\u3088\u304f\u6d17\u3044\u6d41\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30bb\u30eb\u304b\u3089\u6f0f\u51fa\u3057\u305f\u6db2\u4f53\u304c\u76ee\u306b\u5165\u3063\u305f\u5834\u5408\u306f\u3001\u76ee\u3092\u3053\u3059\u3089\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u304d\u308c\u3044\u306a\u98df\u7528\u6cb9\u3067\u3088\u304f\u6d17\u3063\u3066\u304f\u3060\u3055\u3044 \u76f4\u3061\u306b\u533b\u5e2b\u306b\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6ce8\u610f \u96fb\u6c60\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3001\u53d6\u6271\u8aac\u660e\u66f8\u3092\u3088\u304f\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002 \u88fd\u54c1\u4ed5\u69d8\u306b\u5f93\u3063\u3066\u7279\u5b9a\u306e\u5145\u96fb\u5668\u3067\u5145\u96fb\u3059\u308b\u3002 \u5b9a\u96fb\u6d41\u3001\u5b9a\u96fb\u5727 CC / CV\u65b9\u5f0f\u3067\u5145\u96fb\u3059\u308b\u3002\u9006\u5145\u96fb\u3092\u7981\u6b62\u3057\u307e\u3059\u3002 \u96fb\u6c60\u3092\u9006\u63a5\u7d9a\u3057\u3066\u3082\u30bb\u30eb\u306f\u5145\u96fb\u3055\u308c\u307e\u305b\u3093\u3002\u305d\u308c\u3068\u540c\u6642\u306b\u3001\u5145\u653e\u96fb\u7279\u6027\u3068\u5b89\u5168\u7279\u6027\u3092\u8003\u616e\u3059\u308b\u3068\u3001\u96fb\u6c60\u306e\u71b1\u3068\u6f0f\u308c\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u96fb\u6c60\u306f\u3001\u8aa4\u3063\u3066\u98f2\u307f\u8fbc\u307e\u306a\u3044\u3088\u3046\u306b\u3001\u5b50\u4f9b\u306e\u624b\u306e\u5c4a\u304b\u306a\u3044\u3068\u3053\u308d\u306b\u4fdd\u7ba1\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5b50\u4f9b\u304c\u30bb\u30eb\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u4fdd\u8b77\u8005\u306f\u9069\u5207\u306a\u53d6\u308a\u6271\u3044\u306b\u3064\u3044\u3066\u8aac\u660e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30d0\u30c3\u30c6\u30ea\u30fc\u306b\u306f\u5bff\u547d\u304c\u3042\u308a\u307e\u3059\u3002\u96fb\u6c60\u306e\u96fb\u529b\u4f9b\u7d66\u304c\u901a\u5e38\u3088\u308a\u3082\u305a\u3063\u3068\u77ed\u304f\u306a\u308b\u6642\u9593\u304c\u3042\u308c\u3070\u3001\u305d\u306e\u96fb\u6c60\u306f\u5bff\u547d\u3067\u3059\u3002\u96fb\u6c60\u3092\u65b0\u3057\u3044\u3082\u306e\u3068\u4ea4\u63db\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u96fb\u6c60\u3092\u9577\u6642\u9593\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u6a5f\u5668\u304b\u3089\u53d6\u308a\u51fa\u3057\u3066\u6e7f\u5ea6\u306e\u4f4e\u3044\u5834\u6240\u306b\u4fdd\u7ba1\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u96fb\u6c60\u306f\u3001\u5145\u96fb\u3001\u4f7f\u7528\u3001\u4fdd\u7ba1\u3055\u308c\u3066\u3044\u308b\u9593\u306f\u3001\u5e2f\u96fb\u3057\u305f\u7269\u3084\u7269\u304b\u3089\u9060\u3056\u3051\u3066\u304f\u3060\u3055\u3044\u3002 \u96fb\u6c60\u306e\u7aef\u5b50\u304c\u6c5a\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u4e7e\u3044\u305f\u5e03\u3067\u62ed\u3044\u3066\u304b\u3089\u96fb\u6c60\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4fdd\u7ba1\u6e29\u5ea6\u7bc4\u56f2\u5185\u306e\u96fb\u6c60\u3092\u4ed5\u69d8\u3068\u3057\u3066\u4fdd\u7ba1\u3057\u3001\u9577\u671f\u9593\u4f7f\u7528\u3057\u306a\u3044\u30673.9\u301c4.0V\u307e\u3067\u5145\u96fb\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u6e29\u5ea6\u7bc4\u56f2\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5145\u96fb\u6e29\u5ea6\u7bc4\u56f2\uff1a0\u2103\u301c45\u2103\u653e\u96fb\u6e29\u5ea6\u7bc4\u56f2\uff1a-20\u2103\u301c60\u2103\uff08\u6a5f\u5668\u4f7f\u7528\u6642\uff09 Connecting Shinobi_Solar\u3068Lipo\u3068\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4f7f\u7528\u74b0\u5883 \u5145\u96fb 0 ~ 45\u00b0C \u653e\u96fb \u2013 20 ~ 60\u00b0C \u4fdd\u7ba1\u3000-20 ~ 60\u00b0C \u52d5\u4f5c\u304a\u3088\u3073\u4fdd\u7ba1\u6e7f\u5ea6\u7bc4\u56f2 65\u00b120% RH \u203b\u5fc5\u305a\u3054\u6307\u5b9a\u306e\u6e29\u5ea6\u3001\u6e7f\u5ea6\u306e\u7bc4\u56f2\u5185\u3067\u3054\u4f7f\u7528\u3001\u4fdd\u7ba1\u304f\u3060\u3055\u3044\u3002 Parts Specification Polymer Li-ion Rechargeable Battery DTP502535(PHR) \u96fb\u6c60\u5bb9\u91cf 400mAh \u901a\u5e38\u96fb\u5727 3.70V \u5145\u96fb\u5236\u9650\u96fb\u5727 4.20V \u653e\u96fb\u30ab\u30c3\u30c8\u30aa\u30d5\u96fb\u5727 2.40V \u5145\u96fb\u7d42\u4e86\u96fb\u6d41 0.01C \u6a19\u6e96\u5145\u96fb 80mA\u307e\u3067 0.2C\uff0880mA\uff09 \u6a19\u6e96\u653e\u96fb 0.2C\uff0880mA\uff09 \u6700\u5927\u9023\u7d9a\u5145\u96fb\u96fb\u6d41 1C (400mA) \u6700\u5927\u9023\u7d9a\u653e\u96fb\u96fb\u6d41 2C (800mA) \u52d5\u4f5c\u6e29\u5ea6\u7bc4\u56f2 \u5145\u96fb 0 ~ 45\u00b0C \u653e\u96fb \u2013 20 ~ 60\u00b0C \u4fdd\u7ba1\u6e29\u5ea6\u7bc4\u56f2 -20 ~ 60\u00b0C \u52d5\u4f5c\u304a\u3088\u3073\u4fdd\u7ba1\u6e7f\u5ea6\u7bc4\u56f2 65\u00b120% RH \u91cd\u3055 13g\u4ee5\u4e0b \u5927\u304d\u3055 \u96fb\u6c60\u90e8\u306e\u5927\u304d\u3055\uff08\u6700\u5927\uff09\u3000\u5e45\u300025mm\u3001\u9577\u305535mm\u3001\u539a\u3055 5mm","title":"Lipo Battery"},{"location":"b.Shinobi/Li-PoBattery/#lipo-battery","text":"","title":"Lipo Battery"},{"location":"b.Shinobi/Li-PoBattery/#overview","text":"400mAh\u3000\u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60 PHR\u30b3\u30cd\u30af\u30bf\u4ed8\u304d\u3002 \u203b\u30b3\u30cd\u30af\u30bf\u3092\u6539\u9020\u306f\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u30ea\u30c1\u30a6\u30e0\u30dd\u30ea\u30de\u30fc\u96fb\u6c60\u306f\u53d6\u308a\u6271\u3044\u3092\u8aa4\u308b\u3068\u975e\u5e38\u306b\u5371\u967a\u3067\u3059\u3002","title":"Overview"},{"location":"b.Shinobi/Li-PoBattery/#_1","text":"\u7c21\u5358\u306b\u7206\u767a\u3001\u767a\u706b\u3001\u767a\u71b1\u3001\u767a\u7159\u3057\u307e\u3059\u3002\u4f7f\u7528\u4e0a\u306e\u6ce8\u610f\u3092\u304a\u5b88\u308a\u304f\u3060\u3055\u3044\u3002 \u81ea\u52d5\u8eca\u306e\u30bf\u3099\u30c3\u30b7\u30e5\u30db\u3099\u30fc\u30c8\u3099\u3084\u7a93\u969b\u306a\u3068\u3099\u76f4\u5c04\u65e5\u5149\u306e\u5f53\u308b\u5834\u6240\u3001\u708e\u5929\u4e0b\u99d0\u8eca\u306e\u8eca\u5185\u306a\u3068\u3099\u3001\u9ad8\u3044\u6e29\u5ea6\u306b\u306a\u308b\u5834\u6240\u306b\u653e\u7f6e\u3057\u306a\u3044\u3066\u3099\u304f\u305f\u3099\u3055\u3044\u3002 \u3099\u96fb\u6c60\u3092\u30b9\u30c8\u30fc\u30d5\u3099\u306a\u3068\u3099\u306e\u71b1\u6e90\u306e\u305d\u306f\u3099\u306b\u653e\u7f6e\u3057\u306a\u3044\u3066\u3099\u304f\u305f\u3099\u3055\u3044\u3002\u767a\u71b1\u3001\u7834\u88c2\u3001\u767a\u706b \u306e\u539f\u56e0\u306b\u306a\u308a\u307e\u3059\u3002 \u6c34\u3001\u30ac\u30bd\u30ea\u30f3\u3001\u30c9\u30ea\u30f3\u30af\u306a\u3069\u306e\u6db2\u4f53\u4e2d\u306e\u6295\u4e0b\u3092\u7981\u6b62\u3059\u308b\u3002 \u6e29\u5ea6\u304c60\u2103\u3092\u8d85\u3048\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u8eca\u5185\u307e\u305f\u306f\u706b\u707d\u306b\u8fd1\u3044\u3068\u3053\u308d\u3067\u4f7f\u7528\u3059\u308b\u306e\u3092\u7981\u6b62\u3057\u307e\u3059\u3002\u5145\u653e\u96fb\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u96fb\u6c60\u306f\u3001\u30cd\u30c3\u30af\u30ec\u30b9\u306a\u3069\u306e\u91d1\u5c5e\u88fd\u306e\u3082\u306e\u3068\u4e00\u7dd2\u306b\u3001\u30dd\u30b1\u30c3\u30c8\u3084\u30d0\u30c3\u30b0\u306b\u5165\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d8\u30a2\u30d4\u30f3\u3001\u30b3\u30a4\u30f3\u3001\u307e\u305f\u306f\u30cd\u30b8\u3002 \u305d\u306e\u3088\u3046\u306a\u7269\u3092\u6301\u3064\u96fb\u6c60\u306f\u4fdd\u7ba1\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \uff08+\uff09\u3068\uff08-\uff09\u7aef\u5b50\u3092\u4ed6\u306e\u91d1\u5c5e\u3068\u77ed\u7d61\uff08\u30b7\u30e7\u30fc\u30c8\uff09\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \uff08+\uff09\u3068\uff08-\uff09\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u306f\u3001\u96fb\u6c60\u3092\u7f6e\u304b\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u91dd\u306a\u3069\u306e\u92ed\u5229\u306a\u3082\u306e\u3067\u96fb\u6c60\u3092\u7a81\u304d\u523a\u3059\u3053\u3068\u3092\u306b\u7981\u3058\u307e\u3059\u3002 \u30bb\u30eb\u3092\u5206\u89e3\u307e\u305f\u306f\u6539\u9020\u3059\u308b\u3053\u3068\u3092\u7981\u3058\u307e\u3059\u3002 \u30bb\u30eb\u306e\u6eb6\u63a5\u3092\u7981\u6b62\u3057\u307e\u3059\u3002 \u6df1\u3044\u50b7\u3084\u5909\u5f62\u3092\u4f34\u3046\u96fb\u6c60\u306f\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002","title":"\u5371\u967a"},{"location":"b.Shinobi/Li-PoBattery/#_2","text":"\u96fb\u6c60\u3092\u96fb\u5b50\u30ec\u30f3\u30b8\u3001\u4e7e\u71e5\u6a5f\u3001\u307e\u305f\u306f\u9ad8\u5727\u5bb9\u5668\u306b\u5165\u308c\u308b\u3053\u3068\u3092\u7981\u3058\u307e\u3059\u3002 \u4e7e\u96fb\u6c60\u3084\u4ed6\u306e\u4e00\u6b21\u96fb\u6c60\u3001\u307e\u305f\u306f\u65b0\u3057\u3044\u96fb\u6c60\u3084\u53e4\u3044\u96fb\u6c60\u3084\u7570\u306a\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3001\u30bf\u30a4\u30d7\u3001\u307e\u305f\u306f\u30d6\u30e9\u30f3\u30c9\u3068\u4e00\u7dd2\u306b\u4f7f\u3046\u3053\u3068\u3092\u7981\u3058\u307e\u3059\u3002 \u6307\u5b9a\u3055\u308c\u305f\u6642\u9593\u5185\u306b\u5145\u96fb\u304c\u5b8c\u4e86\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u5145\u96fb\u3092\u4e2d\u6b62\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u7570\u5e38\u306a\u71b1\u3001\u306b\u304a\u3044\u3001\u5909\u8272\u3001\u5909\u5f62\u3001\u7570\u5e38\u304c\u691c\u51fa\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u4f7f\u7528\u3092\u4e2d\u6b62\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4f7f\u7528\u3001\u5145\u96fb\u3001\u307e\u305f\u306f\u4fdd\u7ba1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6f0f\u308c\u3084\u60aa\u81ed\u304c\u691c\u51fa\u3055\u308c\u305f\u5834\u5408\u306f\u76f4\u3061\u306b\u706b\u6c17\u304b\u3089\u96e2\u308c\u3066\u304f\u3060\u3055\u3044\u3002 \u76ae\u819a\u3084\u8863\u670d\u306b\u6db2\u4f53\u304c\u6f0f\u308c\u305f\u5834\u5408\u306f\u3001\u3059\u3050\u306b\u304d\u308c\u3044\u306a\u6c34\u3067\u3088\u304f\u6d17\u3044\u6d41\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30bb\u30eb\u304b\u3089\u6f0f\u51fa\u3057\u305f\u6db2\u4f53\u304c\u76ee\u306b\u5165\u3063\u305f\u5834\u5408\u306f\u3001\u76ee\u3092\u3053\u3059\u3089\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u304d\u308c\u3044\u306a\u98df\u7528\u6cb9\u3067\u3088\u304f\u6d17\u3063\u3066\u304f\u3060\u3055\u3044 \u76f4\u3061\u306b\u533b\u5e2b\u306b\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u8b66\u544a"},{"location":"b.Shinobi/Li-PoBattery/#_3","text":"\u96fb\u6c60\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3001\u53d6\u6271\u8aac\u660e\u66f8\u3092\u3088\u304f\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002 \u88fd\u54c1\u4ed5\u69d8\u306b\u5f93\u3063\u3066\u7279\u5b9a\u306e\u5145\u96fb\u5668\u3067\u5145\u96fb\u3059\u308b\u3002 \u5b9a\u96fb\u6d41\u3001\u5b9a\u96fb\u5727 CC / CV\u65b9\u5f0f\u3067\u5145\u96fb\u3059\u308b\u3002\u9006\u5145\u96fb\u3092\u7981\u6b62\u3057\u307e\u3059\u3002 \u96fb\u6c60\u3092\u9006\u63a5\u7d9a\u3057\u3066\u3082\u30bb\u30eb\u306f\u5145\u96fb\u3055\u308c\u307e\u305b\u3093\u3002\u305d\u308c\u3068\u540c\u6642\u306b\u3001\u5145\u653e\u96fb\u7279\u6027\u3068\u5b89\u5168\u7279\u6027\u3092\u8003\u616e\u3059\u308b\u3068\u3001\u96fb\u6c60\u306e\u71b1\u3068\u6f0f\u308c\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u96fb\u6c60\u306f\u3001\u8aa4\u3063\u3066\u98f2\u307f\u8fbc\u307e\u306a\u3044\u3088\u3046\u306b\u3001\u5b50\u4f9b\u306e\u624b\u306e\u5c4a\u304b\u306a\u3044\u3068\u3053\u308d\u306b\u4fdd\u7ba1\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5b50\u4f9b\u304c\u30bb\u30eb\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u4fdd\u8b77\u8005\u306f\u9069\u5207\u306a\u53d6\u308a\u6271\u3044\u306b\u3064\u3044\u3066\u8aac\u660e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30d0\u30c3\u30c6\u30ea\u30fc\u306b\u306f\u5bff\u547d\u304c\u3042\u308a\u307e\u3059\u3002\u96fb\u6c60\u306e\u96fb\u529b\u4f9b\u7d66\u304c\u901a\u5e38\u3088\u308a\u3082\u305a\u3063\u3068\u77ed\u304f\u306a\u308b\u6642\u9593\u304c\u3042\u308c\u3070\u3001\u305d\u306e\u96fb\u6c60\u306f\u5bff\u547d\u3067\u3059\u3002\u96fb\u6c60\u3092\u65b0\u3057\u3044\u3082\u306e\u3068\u4ea4\u63db\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u96fb\u6c60\u3092\u9577\u6642\u9593\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u6a5f\u5668\u304b\u3089\u53d6\u308a\u51fa\u3057\u3066\u6e7f\u5ea6\u306e\u4f4e\u3044\u5834\u6240\u306b\u4fdd\u7ba1\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u96fb\u6c60\u306f\u3001\u5145\u96fb\u3001\u4f7f\u7528\u3001\u4fdd\u7ba1\u3055\u308c\u3066\u3044\u308b\u9593\u306f\u3001\u5e2f\u96fb\u3057\u305f\u7269\u3084\u7269\u304b\u3089\u9060\u3056\u3051\u3066\u304f\u3060\u3055\u3044\u3002 \u96fb\u6c60\u306e\u7aef\u5b50\u304c\u6c5a\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u4e7e\u3044\u305f\u5e03\u3067\u62ed\u3044\u3066\u304b\u3089\u96fb\u6c60\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4fdd\u7ba1\u6e29\u5ea6\u7bc4\u56f2\u5185\u306e\u96fb\u6c60\u3092\u4ed5\u69d8\u3068\u3057\u3066\u4fdd\u7ba1\u3057\u3001\u9577\u671f\u9593\u4f7f\u7528\u3057\u306a\u3044\u30673.9\u301c4.0V\u307e\u3067\u5145\u96fb\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u6e29\u5ea6\u7bc4\u56f2\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5145\u96fb\u6e29\u5ea6\u7bc4\u56f2\uff1a0\u2103\u301c45\u2103\u653e\u96fb\u6e29\u5ea6\u7bc4\u56f2\uff1a-20\u2103\u301c60\u2103\uff08\u6a5f\u5668\u4f7f\u7528\u6642\uff09","title":"\u6ce8\u610f"},{"location":"b.Shinobi/Li-PoBattery/#connecting","text":"Shinobi_Solar\u3068Lipo\u3068\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u30b3\u30cd\u30af\u30bf\u3078\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Connecting"},{"location":"b.Shinobi/Li-PoBattery/#_4","text":"\u5145\u96fb 0 ~ 45\u00b0C \u653e\u96fb \u2013 20 ~ 60\u00b0C \u4fdd\u7ba1\u3000-20 ~ 60\u00b0C \u52d5\u4f5c\u304a\u3088\u3073\u4fdd\u7ba1\u6e7f\u5ea6\u7bc4\u56f2 65\u00b120% RH \u203b\u5fc5\u305a\u3054\u6307\u5b9a\u306e\u6e29\u5ea6\u3001\u6e7f\u5ea6\u306e\u7bc4\u56f2\u5185\u3067\u3054\u4f7f\u7528\u3001\u4fdd\u7ba1\u304f\u3060\u3055\u3044\u3002","title":"\u4f7f\u7528\u74b0\u5883"},{"location":"b.Shinobi/Li-PoBattery/#parts-specification","text":"Polymer Li-ion Rechargeable Battery DTP502535(PHR) \u96fb\u6c60\u5bb9\u91cf 400mAh \u901a\u5e38\u96fb\u5727 3.70V \u5145\u96fb\u5236\u9650\u96fb\u5727 4.20V \u653e\u96fb\u30ab\u30c3\u30c8\u30aa\u30d5\u96fb\u5727 2.40V \u5145\u96fb\u7d42\u4e86\u96fb\u6d41 0.01C \u6a19\u6e96\u5145\u96fb 80mA\u307e\u3067 0.2C\uff0880mA\uff09 \u6a19\u6e96\u653e\u96fb 0.2C\uff0880mA\uff09 \u6700\u5927\u9023\u7d9a\u5145\u96fb\u96fb\u6d41 1C (400mA) \u6700\u5927\u9023\u7d9a\u653e\u96fb\u96fb\u6d41 2C (800mA) \u52d5\u4f5c\u6e29\u5ea6\u7bc4\u56f2 \u5145\u96fb 0 ~ 45\u00b0C \u653e\u96fb \u2013 20 ~ 60\u00b0C \u4fdd\u7ba1\u6e29\u5ea6\u7bc4\u56f2 -20 ~ 60\u00b0C \u52d5\u4f5c\u304a\u3088\u3073\u4fdd\u7ba1\u6e7f\u5ea6\u7bc4\u56f2 65\u00b120% RH \u91cd\u3055 13g\u4ee5\u4e0b \u5927\u304d\u3055 \u96fb\u6c60\u90e8\u306e\u5927\u304d\u3055\uff08\u6700\u5927\uff09\u3000\u5e45\u300025mm\u3001\u9577\u305535mm\u3001\u539a\u3055 5mm","title":"Parts Specification"},{"location":"b.Shinobi/Shinobi_NFC/","text":"Solar_NFC \u958b\u767a\u4e2d Overview Android\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3092NFC\u30a2\u30f3\u30c6\u30ca\u306b\u8fd1\u3065\u3051\u308b\u3068\u30a2\u30d7\u30ea\u3084Web\u30b5\u30a4\u30c8\u3092\u81ea\u52d5\u7684\u306b\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a Connecting Parts Specification Schematic Sample Code \u69cb\u6210Parts","title":"Solar_NFC"},{"location":"b.Shinobi/Shinobi_NFC/#solar_nfc","text":"\u958b\u767a\u4e2d","title":"Solar_NFC"},{"location":"b.Shinobi/Shinobi_NFC/#overview","text":"Android\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3092NFC\u30a2\u30f3\u30c6\u30ca\u306b\u8fd1\u3065\u3051\u308b\u3068\u30a2\u30d7\u30ea\u3084Web\u30b5\u30a4\u30c8\u3092\u81ea\u52d5\u7684\u306b\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","title":"Overview"},{"location":"b.Shinobi/Shinobi_NFC/#_1","text":"","title":"\u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a"},{"location":"b.Shinobi/Shinobi_NFC/#connecting","text":"","title":"Connecting"},{"location":"b.Shinobi/Shinobi_NFC/#parts-specification","text":"","title":"Parts Specification"},{"location":"b.Shinobi/Shinobi_NFC/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/Shinobi_NFC/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/Shinobi_NFC/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/Solarpanel_Medium/","text":"Shinobi_Solar_Pannel(Round) Overview \uff15V\u306e\u30bd\u30fc\u30e9\u30fc\u5c0f\u578b\u30bd\u30fc\u30e9\u30fc\u30d1\u30cd\u30eb\u3002 \u767a\u96fb\u91cf\u3000\uff15V\u3000\uff14\uff10\uff4dA 1.4mmDC\u30b8\u30e3\u30c3\u30af\u4ed8\u304d \u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a Connecting Shinobi_Solar\u306eDC\u30b8\u30e3\u30c3\u30af\u306b\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Parts Specification Schematic Sample Code \u69cb\u6210Parts","title":"Shinobi_Solar_Pannel(Round)"},{"location":"b.Shinobi/Solarpanel_Medium/#shinobi_solar_pannelround","text":"","title":"Shinobi_Solar_Pannel(Round)"},{"location":"b.Shinobi/Solarpanel_Medium/#overview","text":"\uff15V\u306e\u30bd\u30fc\u30e9\u30fc\u5c0f\u578b\u30bd\u30fc\u30e9\u30fc\u30d1\u30cd\u30eb\u3002 \u767a\u96fb\u91cf\u3000\uff15V\u3000\uff14\uff10\uff4dA 1.4mmDC\u30b8\u30e3\u30c3\u30af\u4ed8\u304d","title":"Overview"},{"location":"b.Shinobi/Solarpanel_Medium/#_1","text":"","title":"\u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a"},{"location":"b.Shinobi/Solarpanel_Medium/#connecting","text":"Shinobi_Solar\u306eDC\u30b8\u30e3\u30c3\u30af\u306b\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Connecting"},{"location":"b.Shinobi/Solarpanel_Medium/#parts-specification","text":"","title":"Parts Specification"},{"location":"b.Shinobi/Solarpanel_Medium/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/Solarpanel_Medium/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/Solarpanel_Medium/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/Solarpanel_Round/","text":"Solar_Pannel(Midium) Overview 6V\u306e\u30bd\u30fc\u30e9\u30fc\u5c0f\u578b\u30bd\u30fc\u30e9\u30fc\u30d1\u30cd\u30eb\u3002 \u767a\u96fb\u91cf\u30006V 2W DC\u30b8\u30e3\u30c3\u30af\u3042\u308a \u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a Connecting Shinobi_Solar\u306eDC\u30b8\u30e3\u30c3\u30af\u306b\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Parts Specification Schematic Sample Code \u69cb\u6210Parts","title":"Solar_Pannel(Midium)"},{"location":"b.Shinobi/Solarpanel_Round/#solar_pannelmidium","text":"","title":"Solar_Pannel(Midium)"},{"location":"b.Shinobi/Solarpanel_Round/#overview","text":"6V\u306e\u30bd\u30fc\u30e9\u30fc\u5c0f\u578b\u30bd\u30fc\u30e9\u30fc\u30d1\u30cd\u30eb\u3002 \u767a\u96fb\u91cf\u30006V 2W DC\u30b8\u30e3\u30c3\u30af\u3042\u308a","title":"Overview"},{"location":"b.Shinobi/Solarpanel_Round/#_1","text":"","title":"\u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a"},{"location":"b.Shinobi/Solarpanel_Round/#connecting","text":"Shinobi_Solar\u306eDC\u30b8\u30e3\u30c3\u30af\u306b\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Connecting"},{"location":"b.Shinobi/Solarpanel_Round/#parts-specification","text":"","title":"Parts Specification"},{"location":"b.Shinobi/Solarpanel_Round/#schematic","text":"","title":"Schematic"},{"location":"b.Shinobi/Solarpanel_Round/#sample-code","text":"","title":"Sample Code"},{"location":"b.Shinobi/Solarpanel_Round/#parts","text":"","title":"\u69cb\u6210Parts"},{"location":"b.Shinobi/recognize/","text":"\u8a8d\u8b58\u3055\u305b\u308b\u30b3\u30c4 \u8a8d\u8b58\u65b9\u6cd5 \u4e3b\u96fb\u6e90\u3092On\u306b\u30572\u79d2\u4ee5\u5185\u306b\u3001Reset\u3092\u62bc\u3059 1 $ JLinkExe -device NRF52 -if SWD -speed 1518 -autoconnect 1 \u7b49\u3067\u63a5\u7d9a\u72b6\u6cc1\u3092\u78ba\u8a8d","title":"\u8a8d\u8b58\u3055\u305b\u308b\u30b3\u30c4"},{"location":"b.Shinobi/recognize/#_1","text":"","title":"\u8a8d\u8b58\u3055\u305b\u308b\u30b3\u30c4"},{"location":"b.Shinobi/recognize/#_2","text":"\u4e3b\u96fb\u6e90\u3092On\u306b\u30572\u79d2\u4ee5\u5185\u306b\u3001Reset\u3092\u62bc\u3059 1 $ JLinkExe -device NRF52 -if SWD -speed 1518 -autoconnect 1 \u7b49\u3067\u63a5\u7d9a\u72b6\u6cc1\u3092\u78ba\u8a8d","title":"\u8a8d\u8b58\u65b9\u6cd5"},{"location":"c.BLE Module/modulebroadcom/","text":"Broadcom BLE\u30c1\u30c3\u30d7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | BCM20737S | +8dBm | 8.2mA| -96dBm | 7.3mA| \u8ddd\u96e2\u306e\u76ee\u5b89 \u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m BCM20732\u642d\u8f09 Module \u30e2\u30b8\u30e5\u30fc\u30eb\u540d Ver \u30e1\u30fc\u30ab\u30fc \u6700\u5927\u9001\u4fe1\u51fa\u529b TX\u6700\u5927\u96fb\u6d41 EMRF-20732S 4.1 EmbeddedMaster","title":"Broadcom"},{"location":"c.BLE Module/modulebroadcom/#broadcom","text":"","title":"Broadcom"},{"location":"c.BLE Module/modulebroadcom/#ble","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | BCM20737S | +8dBm | 8.2mA| -96dBm | 7.3mA|","title":"BLE\u30c1\u30c3\u30d7"},{"location":"c.BLE Module/modulebroadcom/#_1","text":"\u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m","title":"\u8ddd\u96e2\u306e\u76ee\u5b89"},{"location":"c.BLE Module/modulebroadcom/#bcm20732-module","text":"\u30e2\u30b8\u30e5\u30fc\u30eb\u540d Ver \u30e1\u30fc\u30ab\u30fc \u6700\u5927\u9001\u4fe1\u51fa\u529b TX\u6700\u5927\u96fb\u6d41 EMRF-20732S 4.1 EmbeddedMaster","title":"BCM20732\u642d\u8f09 Module"},{"location":"c.BLE Module/modulecsr/","text":"CSR BLE\u30c1\u30c3\u30d7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | CSR1010 | +9dBm | | -93dBm| | | CSR1011 | +9dBm | | -93dBm| | | CSR1012 | +9dBm | | -93dBm| || \u8ddd\u96e2\u306e\u76ee\u5b89 \u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m CSR1012\u642d\u8f09Module \u30e2\u30b8\u30e5\u30fc\u30eb\u540d Ver \u30e1\u30fc\u30ab\u30fc \u6700\u5927\u9001\u4fe1\u51fa\u529b TX\u6700\u5927\u96fb\u6d41 RN4020 4.0 Microchip +7dBm","title":"CSR"},{"location":"c.BLE Module/modulecsr/#csr","text":"","title":"CSR"},{"location":"c.BLE Module/modulecsr/#ble","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | CSR1010 | +9dBm | | -93dBm| | | CSR1011 | +9dBm | | -93dBm| | | CSR1012 | +9dBm | | -93dBm| ||","title":"BLE\u30c1\u30c3\u30d7"},{"location":"c.BLE Module/modulecsr/#_1","text":"\u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m","title":"\u8ddd\u96e2\u306e\u76ee\u5b89"},{"location":"c.BLE Module/modulecsr/#csr1012module","text":"\u30e2\u30b8\u30e5\u30fc\u30eb\u540d Ver \u30e1\u30fc\u30ab\u30fc \u6700\u5927\u9001\u4fe1\u51fa\u529b TX\u6700\u5927\u96fb\u6d41 RN4020 4.0 Microchip +7dBm","title":"CSR1012\u642d\u8f09Module"},{"location":"c.BLE Module/modulecypress/","text":"Cypress BLE\u30c1\u30c3\u30d7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | -- | -- | | CYBL10X6X |+3dBm |15.6mA |-89dBm| 16.4mA| \u8ddd\u96e2\u306e\u76ee\u5b89 \u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m CYBL10X6XModule | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver| \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- |-- |-- | | CYBLE-022001-00 |4.2| Cypress | \u6e08 |+3dBm| 15.6 mA|","title":"Cypress"},{"location":"c.BLE Module/modulecypress/#cypress","text":"","title":"Cypress"},{"location":"c.BLE Module/modulecypress/#ble","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | -- | -- | | CYBL10X6X |+3dBm |15.6mA |-89dBm| 16.4mA|","title":"BLE\u30c1\u30c3\u30d7"},{"location":"c.BLE Module/modulecypress/#_1","text":"\u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m","title":"\u8ddd\u96e2\u306e\u76ee\u5b89"},{"location":"c.BLE Module/modulecypress/#cybl10x6xmodule","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver| \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- |-- |-- | | CYBLE-022001-00 |4.2| Cypress | \u6e08 |+3dBm| 15.6 mA|","title":"CYBL10X6XModule"},{"location":"c.BLE Module/moduledialog/","text":"Dialog Chip\u4e00\u89a7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | DA14680 | 0dBm |4.2mA | -93dBm | 4.3mA | | DA14580 | 0dBm | 3.4mA(DD ) | -93dBm| 3.7mA(DD ) | DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565 \u8ddd\u96e2\u306e\u76ee\u5b89 \u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m DA14680\u642d\u8f09 Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | DA14580\u642d\u8f09 Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | | Type ZY | DA14580 | 4.1 | Murata | \u6e08 |0dBm|4.8mA| | PAN1740 | DA14580 | 4.1 | Panasonic |\u672a|0dBm|4.9mA| | SESUB | DA14580 | 4.1 | TDK | \u672a | 0dBm | 5.0mA|","title":"Dialog"},{"location":"c.BLE Module/moduledialog/#dialog","text":"","title":"Dialog"},{"location":"c.BLE Module/moduledialog/#chip","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | DA14680 | 0dBm |4.2mA | -93dBm | 4.3mA | | DA14580 | 0dBm | 3.4mA(DD ) | -93dBm| 3.7mA(DD ) | DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565","title":"Chip\u4e00\u89a7"},{"location":"c.BLE Module/moduledialog/#_1","text":"\u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m","title":"\u8ddd\u96e2\u306e\u76ee\u5b89"},{"location":"c.BLE Module/moduledialog/#da14680-module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- |","title":"DA14680\u642d\u8f09 Module"},{"location":"c.BLE Module/moduledialog/#da14580-module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | | Type ZY | DA14580 | 4.1 | Murata | \u6e08 |0dBm|4.8mA| | PAN1740 | DA14580 | 4.1 | Panasonic |\u672a|0dBm|4.9mA| | SESUB | DA14580 | 4.1 | TDK | \u672a | 0dBm | 5.0mA|","title":"DA14580\u642d\u8f09 Module"},{"location":"c.BLE Module/moduleetc/","text":"\u305d\u306e\u4ed6 BLE\u30c1\u30c3\u30d7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | QN902X |+4dBm|9.9mA(DD ) |-95dBm -93dBm(DD ) | 9.25mA(DD*)| | BlueNGR | +8dBm | 8.2mA| -96dBm |7.3mA| | TZ1000 ||-4dBm\u6642 6.3mA | | | | ML1705-002 | |9mA||9mA| \u8ddd\u96e2\u306e\u76ee\u5b89 \u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m QN902X\u642d\u8f09 Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver| \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b| TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- |-- |-- | | EMRF-20732S | 4.0 | EmbeddedMaster |\u672a| | | | BlueNGR\u642d\u8f09 Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver| \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- |-- |-- | | BMD-200 | 4.0 | RIGADO | \u672a| +8dBm|16mA| TZ1000\u642d\u8f09 Module ML1705-002\u642d\u8f09 Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver |\u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- | | MK71050-03 |4.0| Lapis | \u6e08 |0dBm|-86dBm","title":"\u305d\u306e\u4ed6"},{"location":"c.BLE Module/moduleetc/#_1","text":"","title":"\u305d\u306e\u4ed6"},{"location":"c.BLE Module/moduleetc/#ble","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | QN902X |+4dBm|9.9mA(DD ) |-95dBm -93dBm(DD ) | 9.25mA(DD*)| | BlueNGR | +8dBm | 8.2mA| -96dBm |7.3mA| | TZ1000 ||-4dBm\u6642 6.3mA | | | | ML1705-002 | |9mA||9mA|","title":"BLE\u30c1\u30c3\u30d7"},{"location":"c.BLE Module/moduleetc/#_2","text":"\u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m","title":"\u8ddd\u96e2\u306e\u76ee\u5b89"},{"location":"c.BLE Module/moduleetc/#qn902x-module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver| \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b| TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- |-- |-- | | EMRF-20732S | 4.0 | EmbeddedMaster |\u672a| | | |","title":"QN902X\u642d\u8f09 Module"},{"location":"c.BLE Module/moduleetc/#bluengr-module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver| \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- |-- |-- | | BMD-200 | 4.0 | RIGADO | \u672a| +8dBm|16mA|","title":"BlueNGR\u642d\u8f09 Module"},{"location":"c.BLE Module/moduleetc/#tz1000-module","text":"","title":"TZ1000\u642d\u8f09 Module"},{"location":"c.BLE Module/moduleetc/#ml1705-002-module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver |\u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- | | MK71050-03 |4.0| Lapis | \u6e08 |0dBm|-86dBm","title":"ML1705-002\u642d\u8f09 Module"},{"location":"c.BLE Module/modulenordic/","text":"Nordic Semiconductor 2014\u5e74\u306e\u5e74\u9593\u58f2\u4e0a\u9ad8\u306f\u30011\u51046700\u4e07\u7c73\u30c9\u30eb BLE\u30c1\u30c3\u30d7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | NRF52832 | +4dBm |9.6mA 5.4mA(DD )| -96dBm | 10.9mA 6.1mA(DD ) | | NRF51822 | +4dBm |10.5mA 8mA (DD ) |-93dBm| 13mA 9.7mA(DD )| \u8ddd\u96e2\u306e\u76ee\u5b89 \u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m NRF52832\u642d\u8f09Module NRF51822\u642d\u8f09Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Ver | SoftDevice | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | 0dBm\u6642 TX\u51fa\u529b|TX\u6700\u5927\u96fb\u6d41| Flash | RAM | | -- | -- | -- |-- |-- | | RFD22301 | 4.0 | RFDigital | \u672a |+4dBm| 18mA |128kb | 8kb | | BL620 | 4.0 |S120| Laird | \u672a |+4dBm | 10.5mA |256K|16K| | BL600\u30b7\u30ea\u30fc\u30ba\u3000 | 4.0 | S110 | Laird | \u6e08 | +4dBm|10.5mA|256K|16K| | HRM1017 | 4.0 | S110 | Hoshiden | \u6e08 | +4dBm||256K|16K| | HRM1026 |4.1 | | Hoshiden | \u6e08 | +4dBm||256K|16K| | BVMCN5102 | 4.0 | Braveridge | \u6e08 |+4dBm|| | SY-MN1319X1 | 4.0| Sysgration | \u672a | +4dBm | 10.5mA | | EYSFCNZXX | 4.0 | TAIYO YUDEN | \u6e08 ||| | BTS01 | 4.1 | SMK | \u6e08 ||| | MDBT4.0 | 4.1 | S1X0 | Raytac | \u6e08 | +4dBm | 10.5mA |256K|32K| | MDBT4.0 nano | 4.1 | Raytac | | +4dBm|-93dBm| | BMD-200 | 4.1 | RIGADO | | +4dBm|16mA| | MBH7BLZ02 | 4.1 | \u5bcc\u58eb\u901a\u30b3\u30f3\u30dd\u30fc\u30f3\u30a8\u30f3\u30c8 | \u6e08 | 4dBm|12mA| | BVMCN5103 | 4.1 | Braveridge | \u6e08 |+4dBm|| | BlueMod+S |4.1| stollmann |\u672a|+4dBm|4uA|","title":"Nordic Semiconductor"},{"location":"c.BLE Module/modulenordic/#nordic-semiconductor","text":"2014\u5e74\u306e\u5e74\u9593\u58f2\u4e0a\u9ad8\u306f\u30011\u51046700\u4e07\u7c73\u30c9\u30eb","title":"Nordic Semiconductor"},{"location":"c.BLE Module/modulenordic/#ble","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | NRF52832 | +4dBm |9.6mA 5.4mA(DD )| -96dBm | 10.9mA 6.1mA(DD ) | | NRF51822 | +4dBm |10.5mA 8mA (DD ) |-93dBm| 13mA 9.7mA(DD )|","title":"BLE\u30c1\u30c3\u30d7"},{"location":"c.BLE Module/modulenordic/#_1","text":"\u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m","title":"\u8ddd\u96e2\u306e\u76ee\u5b89"},{"location":"c.BLE Module/modulenordic/#nrf52832module","text":"","title":"NRF52832\u642d\u8f09Module"},{"location":"c.BLE Module/modulenordic/#nrf51822module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Ver | SoftDevice | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | 0dBm\u6642 TX\u51fa\u529b|TX\u6700\u5927\u96fb\u6d41| Flash | RAM | | -- | -- | -- |-- |-- | | RFD22301 | 4.0 | RFDigital | \u672a |+4dBm| 18mA |128kb | 8kb | | BL620 | 4.0 |S120| Laird | \u672a |+4dBm | 10.5mA |256K|16K| | BL600\u30b7\u30ea\u30fc\u30ba\u3000 | 4.0 | S110 | Laird | \u6e08 | +4dBm|10.5mA|256K|16K| | HRM1017 | 4.0 | S110 | Hoshiden | \u6e08 | +4dBm||256K|16K| | HRM1026 |4.1 | | Hoshiden | \u6e08 | +4dBm||256K|16K| | BVMCN5102 | 4.0 | Braveridge | \u6e08 |+4dBm|| | SY-MN1319X1 | 4.0| Sysgration | \u672a | +4dBm | 10.5mA | | EYSFCNZXX | 4.0 | TAIYO YUDEN | \u6e08 ||| | BTS01 | 4.1 | SMK | \u6e08 ||| | MDBT4.0 | 4.1 | S1X0 | Raytac | \u6e08 | +4dBm | 10.5mA |256K|32K| | MDBT4.0 nano | 4.1 | Raytac | | +4dBm|-93dBm| | BMD-200 | 4.1 | RIGADO | | +4dBm|16mA| | MBH7BLZ02 | 4.1 | \u5bcc\u58eb\u901a\u30b3\u30f3\u30dd\u30fc\u30f3\u30a8\u30f3\u30c8 | \u6e08 | 4dBm|12mA| | BVMCN5103 | 4.1 | Braveridge | \u6e08 |+4dBm|| | BlueMod+S |4.1| stollmann |\u672a|+4dBm|4uA|","title":"NRF51822\u642d\u8f09Module"},{"location":"c.BLE Module/modulesiliconlab/","text":"SiliconLabs BLE\u30c1\u30c3\u30d7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | -- | -- | | BGM111 |+8 dBm | 8.2 mA | -93dBm |7.5 mA | \u8ddd\u96e2\u306e\u76ee\u5b89 \u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m BGM111\u642d\u8f09\u30e2\u30b8\u30e5\u30fc\u30eb | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | | BGM111 | 4.1 | Silicon Lab | \u672a |+8 dBm | 8.2 mA |","title":"SiliconLabs"},{"location":"c.BLE Module/modulesiliconlab/#siliconlabs","text":"","title":"SiliconLabs"},{"location":"c.BLE Module/modulesiliconlab/#ble","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | -- | -- | | BGM111 |+8 dBm | 8.2 mA | -93dBm |7.5 mA |","title":"BLE\u30c1\u30c3\u30d7"},{"location":"c.BLE Module/modulesiliconlab/#_1","text":"\u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m","title":"\u8ddd\u96e2\u306e\u76ee\u5b89"},{"location":"c.BLE Module/modulesiliconlab/#bgm111","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | | BGM111 | 4.1 | Silicon Lab | \u672a |+8 dBm | 8.2 mA |","title":"BGM111\u642d\u8f09\u30e2\u30b8\u30e5\u30fc\u30eb"},{"location":"c.BLE Module/moduleti/","text":"TI Chip\u4e00\u89a7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | CC2640 |+5dBm|+5dBm\u6642 9.1mA 0dBm\u6642 6.1 mA|\u201397dBm|5.9mA| | CC2541 | +6dBm | 18.2 mA 14.7mA(DD)| -96dBm| 17.9 mA 14.7mA(DD)| | CC2564 |+12dBm|||| | CC2540 | +6dBm | 24mA 15.8 mA(DD) | -96dBm| 19.6 mA 18.6 mA(DD) | DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565 \u8ddd\u96e2\u306e\u76ee\u5b89 \u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m CC2640\u642d\u8f09 Module CC2541\u642d\u8f09 Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | | BLE113 | CC2541 | 4.0 | Bluegiga | \u6e08 |0dBm|18.2mA 14.3mA(DD )| | BLE121LR | CC2541 | 4.0 | Bluegiga | \u6e08 |+8dBm| 36mA(+8dBm\u6642) 26 mA (0dBm\u6642)| | PAN1721 |CC2541|4.0| Panasonic | \u672a|0dBm|14 mA| | SESUB-PAN-T2541 |CC2541|4.0| TDK |\u672a|0dBm|20.6mA| | LBM313 |CC2541|4.0| punchthrough |\u672a|0dBm|18.2mA| CC2564\u642d\u8f09 Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | | TypeUG | CC2564 | 4.0 | Murata | \u672a |+9dBm|+9dBm\u664260mA| CC2540 \u642d\u8f09 Module | \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- |-- | | BLE112 | CC2540 | 4.0 | Bluegiga | \u6e08 |+3dBm|27mA| | cB-OLP425i-04 |CC2540|4.0| connectBlue | \u6e08 |+2dBm|| | PAN1720 |CC2540|4.0| Panasonic | \u672a|+4dBm|14 mA|","title":"TI"},{"location":"c.BLE Module/moduleti/#ti","text":"","title":"TI"},{"location":"c.BLE Module/moduleti/#chip","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | CC2640 |+5dBm|+5dBm\u6642 9.1mA 0dBm\u6642 6.1 mA|\u201397dBm|5.9mA| | CC2541 | +6dBm | 18.2 mA 14.7mA(DD)| -96dBm| 17.9 mA 14.7mA(DD)| | CC2564 |+12dBm|||| | CC2540 | +6dBm | 24mA 15.8 mA(DD) | -96dBm| 19.6 mA 18.6 mA(DD) | DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565","title":"Chip\u4e00\u89a7"},{"location":"c.BLE Module/moduleti/#_1","text":"\u5f37\u5ea6 \u8ddd\u96e2 0dBm 10m-100m +4dBm 100m-200m +8dBm 200m-450m","title":"\u8ddd\u96e2\u306e\u76ee\u5b89"},{"location":"c.BLE Module/moduleti/#cc2640-module","text":"","title":"CC2640\u642d\u8f09 Module"},{"location":"c.BLE Module/moduleti/#cc2541-module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | | BLE113 | CC2541 | 4.0 | Bluegiga | \u6e08 |0dBm|18.2mA 14.3mA(DD )| | BLE121LR | CC2541 | 4.0 | Bluegiga | \u6e08 |+8dBm| 36mA(+8dBm\u6642) 26 mA (0dBm\u6642)| | PAN1721 |CC2541|4.0| Panasonic | \u672a|0dBm|14 mA| | SESUB-PAN-T2541 |CC2541|4.0| TDK |\u672a|0dBm|20.6mA| | LBM313 |CC2541|4.0| punchthrough |\u672a|0dBm|18.2mA|","title":"CC2541\u642d\u8f09 Module"},{"location":"c.BLE Module/moduleti/#cc2564-module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41| | -- | -- | -- |-- |-- | | TypeUG | CC2564 | 4.0 | Murata | \u672a |+9dBm|+9dBm\u664260mA|","title":"CC2564\u642d\u8f09 Module"},{"location":"c.BLE Module/moduleti/#cc2540-module","text":"| \u30e2\u30b8\u30e5\u30fc\u30eb\u540d | BLE Chip\u3000| Ver | \u30e1\u30fc\u30ab\u30fc | \u6280\u9069 | \u6700\u5927\u9001\u4fe1\u51fa\u529b|TX\u6700\u5927\u96fb\u6d41| | -- | -- | -- |-- | | BLE112 | CC2540 | 4.0 | Bluegiga | \u6e08 |+3dBm|27mA| | cB-OLP425i-04 |CC2540|4.0| connectBlue | \u6e08 |+2dBm|| | PAN1720 |CC2540|4.0| Panasonic | \u672a|+4dBm|14 mA|","title":"CC2540 \u642d\u8f09 Module"},{"location":"d.chip/bl42/","text":"Bluetooth 4.2 Bluetooth\u00ae \u30b3\u30a2\u4ed5\u69d8 4.2 \u30d0\u30fc\u30b8\u30e7\u30f3 \u63a1\u629e\u65e5 \u30b3\u30a2\u30d0\u30fc\u30b8\u30e7\u30f3 4.2 2014/12/2 \u30b3\u30a2\u4ed5\u69d8\u88dc\u5b8c (CSS) v5 201412/2 IoT\u3078\u306e\u5bfe\u5fdc Low-power IP (IPv6/6LoWPAN)\u3078\u306e\u5bfe\u5fdc\u3067\u3001 Internet Protocol Support Profile (IPSP) \u304c\u8ffd\u52a0 Internet Protocol Support Profile Bluetooth Specification P7\u3088\u308a\u629c\u7c8b Bluetooth Smart Internet gateways (GATT)\u306e\u7b56\u5b9a\u3067\u3001 GATT REST API White Paper \u304c\u516c\u958b\u3055\u308c\u3001 HTTP Proxy Service (HPS)\u304c2015/1Q\u306b\u7b56\u5b9a\u3055\u308c\u308b Security \u6697\u53f7\u30ad\u30fc\u751f\u6210\u306b\u6955\u5186\u66f2\u7dda\u30c7\u30a3\u30d5\u30a3\u30fc\u30fb\u30d8\u30eb\u30de\u30f3(Elliptic curve Diffie\u2013Hellman key exchange, ECDH)\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63a1\u7528 BLUETOOTH SPECIFICATION Version 4.2 [Vol 2, Part H] page 1306 \u30c7\u30fc\u30bf\u901a\u4fe1 2.5\u500d\u306e\u9ad8\u901f\u5316\u300110\u500d\u306e\u5bb9\u91cf\u3092\u5b9f\u73fe\u3002PDU Header\u306eLength\u30925bit\u304b\u30898bit\u306b\u62e1\u5f35\u3057\u3001 \u30da\u30a4\u30ed\u30fc\u30c9\u30b5\u30a4\u30ba\u308227\u30aa\u30af\u30c6\u30c3\u30c8\u304b\u3089251\u30aa\u30af\u30c6\u30c3\u30c8\u306b\u62e1\u5f35\u3002 BLUETOOTH SPECIFICATION Version 4.2 [Vol 6, Part B] page 86\u3088\u308a\u629c\u7c8b BLUETOOTH SPECIFICATION Version 4.2 [Vol 6, Part B] page 46\u3088\u308a\u629c\u7c8b","title":"Bluetooth 4.2"},{"location":"d.chip/bl42/#bluetooth-42","text":"","title":"Bluetooth 4.2"},{"location":"d.chip/bl42/#bluetooth-42_1","text":"\u30d0\u30fc\u30b8\u30e7\u30f3 \u63a1\u629e\u65e5 \u30b3\u30a2\u30d0\u30fc\u30b8\u30e7\u30f3 4.2 2014/12/2 \u30b3\u30a2\u4ed5\u69d8\u88dc\u5b8c (CSS) v5 201412/2","title":"Bluetooth\u00ae \u30b3\u30a2\u4ed5\u69d8 4.2"},{"location":"d.chip/bl42/#iot","text":"Low-power IP (IPv6/6LoWPAN)\u3078\u306e\u5bfe\u5fdc\u3067\u3001 Internet Protocol Support Profile (IPSP) \u304c\u8ffd\u52a0 Internet Protocol Support Profile Bluetooth Specification P7\u3088\u308a\u629c\u7c8b Bluetooth Smart Internet gateways (GATT)\u306e\u7b56\u5b9a\u3067\u3001 GATT REST API White Paper \u304c\u516c\u958b\u3055\u308c\u3001 HTTP Proxy Service (HPS)\u304c2015/1Q\u306b\u7b56\u5b9a\u3055\u308c\u308b","title":"IoT\u3078\u306e\u5bfe\u5fdc"},{"location":"d.chip/bl42/#security","text":"\u6697\u53f7\u30ad\u30fc\u751f\u6210\u306b\u6955\u5186\u66f2\u7dda\u30c7\u30a3\u30d5\u30a3\u30fc\u30fb\u30d8\u30eb\u30de\u30f3(Elliptic curve Diffie\u2013Hellman key exchange, ECDH)\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63a1\u7528 BLUETOOTH SPECIFICATION Version 4.2 [Vol 2, Part H] page 1306","title":"Security"},{"location":"d.chip/bl42/#_1","text":"2.5\u500d\u306e\u9ad8\u901f\u5316\u300110\u500d\u306e\u5bb9\u91cf\u3092\u5b9f\u73fe\u3002PDU Header\u306eLength\u30925bit\u304b\u30898bit\u306b\u62e1\u5f35\u3057\u3001 \u30da\u30a4\u30ed\u30fc\u30c9\u30b5\u30a4\u30ba\u308227\u30aa\u30af\u30c6\u30c3\u30c8\u304b\u3089251\u30aa\u30af\u30c6\u30c3\u30c8\u306b\u62e1\u5f35\u3002 BLUETOOTH SPECIFICATION Version 4.2 [Vol 6, Part B] page 86\u3088\u308a\u629c\u7c8b BLUETOOTH SPECIFICATION Version 4.2 [Vol 6, Part B] page 46\u3088\u308a\u629c\u7c8b","title":"\u30c7\u30fc\u30bf\u901a\u4fe1"},{"location":"d.chip/chip/","text":"BLE\u30c1\u30c3\u30d7 BLE\u30c1\u30c3\u30d7\u7a2e\u985e | Chip\u540d | Maker |Co-Proccesor| \u9001\u4fe1\u611f\u5ea6|\u53d7\u4fe1\u611f\u5ea6 |\u9001\u4fe1\u6642\u6700\u5927\u96fb\u6d41 (0dBm\u6642) | \u53d7\u4fe1\u6642\u6700\u5927\u96fb\u6d41| | -- | -- | | DA14580 | dialog | ARM\u00ae Cortex\u2122 M0 |0dBm |-93dBm |3.4mA(DD) |3.7mA(DD)| | DA14680 | dialog | ARM\u00ae Cortex\u2122 M0 | | | | | | NRF51822 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M0 |+4dBm |-93 dBm| 10.5mA 8mA (DD)| 13 mA 9.7mA(DD)| | NRF51422 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M0 |+4dBm |-93 dBm| 10.5mA 8mA (DD)| 13 mA 9.7mA(DD)| | CSR1010 | CSR | \u72ec\u81eaMCU(RISC) | +9dBm | -93dBm| | | CSR1011 | CSR | \u72ec\u81eaMCU(RISC) | +9dBm | -93dBm| || | CSR1012 | CSR | \u72ec\u81eaMCU(RISC) | +9dBm | -93dBm| || | CC2540 | TI | 8051\u4e92\u63db | +6dBm | -96dBm|24mA 15.8 mA(DD) *-6dBm|19.6 mA 18.6 mA(DD) | | CC2541 | TI | 8051\u4e92\u63db | +6dBm | -96dBm|18.2 mA 14.7mA(DD)| 17.9 mA 14.7mA(DD)| | BCM20737S | Broadcom | ARM\u00ae Cortex\u2122 M3 |||||| | BlueNGR | STMicro | ARM\u00ae Cortex\u2122 M0 | +8dBm |-96dBm | 8.2mA| 7.3mA| | CYBL10X6X | CYPRESS |ARM\u00ae Cortex\u2122 M0| +3dBm |-89dBm|15.6mA| 16.4mA| | TZ1000 | Toshiba\u30bb\u30df\u30b3\u30f3 |ARM\u00ae Cortex\u2122 M4F|||||| | ML1705-002 | LAPIS |ARM\u00ae Cortex\u2122 M0|||9mA|9mA| *DD\u306f\u3001DC/DC\u5909\u63db\u306e\u7565 DA14580\u306eBlock diagram NRF51822\u306eBlock diagram CYBL10X6X\u306eBlock diagram CSR1012\u306eBlock diagram CC2541\u306eBlock diagram BlueNGR\u306eBlock diagram TZ1000\u306eBlock diagram ML7105\u306eBlock diagram","title":"BLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chip/#ble","text":"","title":"BLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chip/#ble_1","text":"| Chip\u540d | Maker |Co-Proccesor| \u9001\u4fe1\u611f\u5ea6|\u53d7\u4fe1\u611f\u5ea6 |\u9001\u4fe1\u6642\u6700\u5927\u96fb\u6d41 (0dBm\u6642) | \u53d7\u4fe1\u6642\u6700\u5927\u96fb\u6d41| | -- | -- | | DA14580 | dialog | ARM\u00ae Cortex\u2122 M0 |0dBm |-93dBm |3.4mA(DD) |3.7mA(DD)| | DA14680 | dialog | ARM\u00ae Cortex\u2122 M0 | | | | | | NRF51822 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M0 |+4dBm |-93 dBm| 10.5mA 8mA (DD)| 13 mA 9.7mA(DD)| | NRF51422 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M0 |+4dBm |-93 dBm| 10.5mA 8mA (DD)| 13 mA 9.7mA(DD)| | CSR1010 | CSR | \u72ec\u81eaMCU(RISC) | +9dBm | -93dBm| | | CSR1011 | CSR | \u72ec\u81eaMCU(RISC) | +9dBm | -93dBm| || | CSR1012 | CSR | \u72ec\u81eaMCU(RISC) | +9dBm | -93dBm| || | CC2540 | TI | 8051\u4e92\u63db | +6dBm | -96dBm|24mA 15.8 mA(DD) *-6dBm|19.6 mA 18.6 mA(DD) | | CC2541 | TI | 8051\u4e92\u63db | +6dBm | -96dBm|18.2 mA 14.7mA(DD)| 17.9 mA 14.7mA(DD)| | BCM20737S | Broadcom | ARM\u00ae Cortex\u2122 M3 |||||| | BlueNGR | STMicro | ARM\u00ae Cortex\u2122 M0 | +8dBm |-96dBm | 8.2mA| 7.3mA| | CYBL10X6X | CYPRESS |ARM\u00ae Cortex\u2122 M0| +3dBm |-89dBm|15.6mA| 16.4mA| | TZ1000 | Toshiba\u30bb\u30df\u30b3\u30f3 |ARM\u00ae Cortex\u2122 M4F|||||| | ML1705-002 | LAPIS |ARM\u00ae Cortex\u2122 M0|||9mA|9mA| *DD\u306f\u3001DC/DC\u5909\u63db\u306e\u7565","title":"BLE\u30c1\u30c3\u30d7\u7a2e\u985e"},{"location":"d.chip/chip/#da14580block-diagram","text":"","title":"DA14580\u306eBlock diagram"},{"location":"d.chip/chip/#nrf51822block-diagram","text":"","title":"NRF51822\u306eBlock diagram"},{"location":"d.chip/chip/#cybl10x6xblock-diagram","text":"","title":"CYBL10X6X\u306eBlock diagram"},{"location":"d.chip/chip/#csr1012block-diagram","text":"","title":"CSR1012\u306eBlock diagram"},{"location":"d.chip/chip/#cc2541block-diagram","text":"","title":"CC2541\u306eBlock diagram"},{"location":"d.chip/chip/#bluengrblock-diagram","text":"","title":"BlueNGR\u306eBlock diagram"},{"location":"d.chip/chip/#tz1000block-diagram","text":"","title":"TZ1000\u306eBlock diagram"},{"location":"d.chip/chip/#ml7105block-diagram","text":"","title":"ML7105\u306eBlock diagram"},{"location":"d.chip/chiplist/","text":"BLE\u30c1\u30c3\u30d7 5.0\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7 | Chip\u540d | Maker |Co-Proccesor| BLE Version | \u30e1\u30e2 | | -- | -- | -- | -- | | nRF52840 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M4F(64 MHz) | 5.0 | | | DA14586 | dialog | ARM\u00ae Cortex\u2122 M0(30\u03bcA/MHz) | ARM\u00ae Cortex\u2122 M0 | | 4.2\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7 | Chip\u540d | Maker |Co-Proccesor| BLE Version | \u30e1\u30e2 | | -- | -- | -- | -- | | DA14680 | dialog | ARM\u00ae Cortex\u2122 M0(30\u03bcA/MHz) | 4.2 | | | BGM111 | Silicon Lab | ARM\u00ae Cortex\u2122 M4(40MHz) |4.1 (4.2\u306bUpgrade\u53ef\u80fd) | | | NRF52832 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M4F(64 MHz) | 4.2 | 2015\u5e7412\u6708\u304b\u3089\u91cf\u7523 | 4.1\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7 | Chip\u540d | Maker |Co-Proccesor| BLE Version | | -- | -- | --- | | DA14580 | dialog | ARM\u00ae Cortex\u2122 M0 | 4.1 | | NRF51822 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M0 | 4.1 | | NRF51422 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M0 | 4.1 | | BCM20737S | Broadcom | ARM\u00ae Cortex\u2122 M3 | 4.1 | | CYBL10X6X | CYPRESS |ARM\u00ae Cortex\u2122 M0| 4.1 | | CC2640 | TI |ARM\u00ae Cortex\u2122 M3(48MHz)|4.1| | Kinetis KW40Z | Freescale | ARM\u00ae Cortex\u2122 M0+ | 4.1 | BLE4.0 | Chip\u540d | Maker |Co-Proccesor| BLE Version | | -- | -- | --- | | CSR1010 | CSR | \u72ec\u81eaMCU(RISC) 16Bit | 4.0 | | CSR1011 | CSR | \u72ec\u81eaMCU(RISC) 16Bit | 4.0 | | CSR1012 | CSR | \u72ec\u81eaMCU(RISC) 16Bit | 4.0 | | BlueNGR | STMicro | ARM\u00ae Cortex\u2122 M0 | 4.0 | | QN902X | NXP | ARM\u00ae Cortex\u2122 M0 | 4.0 | | CC2540 | TI | 8051\u4e92\u63db 8\u30d3\u30c3\u30c8 | 4.0| | CC2541 | TI | 8051\u4e92\u63db 8\u30d3\u30c3\u30c8| 4.0 | | TZ1000 | Toshiba\u30bb\u30df\u30b3\u30f3 |ARM\u00ae Cortex\u2122 M4F(48MHz)|4.0| | ML1705-002 | LAPIS |ARM\u00ae Cortex\u2122 M0|4.0| | CC2564 | TI | - | 4.0|","title":"BLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chiplist/#ble","text":"","title":"BLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chiplist/#50ble","text":"| Chip\u540d | Maker |Co-Proccesor| BLE Version | \u30e1\u30e2 | | -- | -- | -- | -- | | nRF52840 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M4F(64 MHz) | 5.0 | | | DA14586 | dialog | ARM\u00ae Cortex\u2122 M0(30\u03bcA/MHz) | ARM\u00ae Cortex\u2122 M0 | |","title":"5.0\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chiplist/#42ble","text":"| Chip\u540d | Maker |Co-Proccesor| BLE Version | \u30e1\u30e2 | | -- | -- | -- | -- | | DA14680 | dialog | ARM\u00ae Cortex\u2122 M0(30\u03bcA/MHz) | 4.2 | | | BGM111 | Silicon Lab | ARM\u00ae Cortex\u2122 M4(40MHz) |4.1 (4.2\u306bUpgrade\u53ef\u80fd) | | | NRF52832 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M4F(64 MHz) | 4.2 | 2015\u5e7412\u6708\u304b\u3089\u91cf\u7523 |","title":"4.2\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chiplist/#41ble","text":"| Chip\u540d | Maker |Co-Proccesor| BLE Version | | -- | -- | --- | | DA14580 | dialog | ARM\u00ae Cortex\u2122 M0 | 4.1 | | NRF51822 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M0 | 4.1 | | NRF51422 | Nordic Semiconductor | ARM\u00ae Cortex\u2122 M0 | 4.1 | | BCM20737S | Broadcom | ARM\u00ae Cortex\u2122 M3 | 4.1 | | CYBL10X6X | CYPRESS |ARM\u00ae Cortex\u2122 M0| 4.1 | | CC2640 | TI |ARM\u00ae Cortex\u2122 M3(48MHz)|4.1| | Kinetis KW40Z | Freescale | ARM\u00ae Cortex\u2122 M0+ | 4.1 |","title":"4.1\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chiplist/#ble40","text":"| Chip\u540d | Maker |Co-Proccesor| BLE Version | | -- | -- | --- | | CSR1010 | CSR | \u72ec\u81eaMCU(RISC) 16Bit | 4.0 | | CSR1011 | CSR | \u72ec\u81eaMCU(RISC) 16Bit | 4.0 | | CSR1012 | CSR | \u72ec\u81eaMCU(RISC) 16Bit | 4.0 | | BlueNGR | STMicro | ARM\u00ae Cortex\u2122 M0 | 4.0 | | QN902X | NXP | ARM\u00ae Cortex\u2122 M0 | 4.0 | | CC2540 | TI | 8051\u4e92\u63db 8\u30d3\u30c3\u30c8 | 4.0| | CC2541 | TI | 8051\u4e92\u63db 8\u30d3\u30c3\u30c8| 4.0 | | TZ1000 | Toshiba\u30bb\u30df\u30b3\u30f3 |ARM\u00ae Cortex\u2122 M4F(48MHz)|4.0| | ML1705-002 | LAPIS |ARM\u00ae Cortex\u2122 M0|4.0| | CC2564 | TI | - | 4.0|","title":"BLE4.0"},{"location":"d.chip/chipspec/","text":"BLE\u30c1\u30c3\u30d7\u306e\u611f\u5ea6\u6bd4\u8f03 4.2\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | -- | -- | | DA14680 | 0dBm |4.2mA | -93dBm | 4.3mA | | BGM111 |+8 dBm | 8.2 mA | -93dBm |7.5 mA | | NRF52832 | +4dBm |9.6mA 5.4mA(DD )| -96dBm | 10.9mA 6.1mA(DD ) | DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565 4.1\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | DA14580 | 0dBm | 3.4mA(DD ) | -93dBm| 3.7mA(DD ) | | NRF51822 | +4dBm |10.5mA 8mA (DD ) |-93dBm| 13mA 9.7mA(DD )| | NRF51422 | +4dBm |10.5mA 8mA (DD ) |-93dBm| 13mA 9.7mA(DD )| | BCM20737S | +8dBm | 8.2mA| -96dBm | 7.3mA| | CYBL10X6X |+3dBm |15.6mA |-89dBm| 16.4mA| | CC2640 |+5dBm|+5dBm\u6642 9.1mA 0dBm\u6642 6.1 mA|\u201397dBm|5.9mA| DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565\u3000 BLE4.0 | Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | CSR1010 | +9dBm | | -93dBm| | | CSR1011 | +9dBm | | -93dBm| | | CSR1012 | +9dBm | | -93dBm| | | BlueNGR | +8dBm | 8.2mA| -96dBm |7.3mA| | QN902X |+4dBm|9.9mA(DD ) |-95dBm -93dBm(DD ) | 9.25mA(DD*) | CC2540 | +6dBm | 24mA 15.8 mA(DD) | -96dBm| 19.6 mA 18.6 mA(DD) | | CC2541 | +6dBm | 18.2 mA 14.7mA(DD)| -96dBm| 17.9 mA 14.7mA(DD)| | TZ1000 ||-4dBm\u6642 6.3mA | | | | ML1705-002 | |9mA||9mA| | CC2564 |+12dBm||||| DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565","title":"BLE\u30c1\u30c3\u30d7\u306e\u611f\u5ea6\u6bd4\u8f03"},{"location":"d.chip/chipspec/#ble","text":"","title":"BLE\u30c1\u30c3\u30d7\u306e\u611f\u5ea6\u6bd4\u8f03"},{"location":"d.chip/chipspec/#42ble","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | -- | -- | | DA14680 | 0dBm |4.2mA | -93dBm | 4.3mA | | BGM111 |+8 dBm | 8.2 mA | -93dBm |7.5 mA | | NRF52832 | +4dBm |9.6mA 5.4mA(DD )| -96dBm | 10.9mA 6.1mA(DD ) | DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565","title":"4.2\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chipspec/#41ble","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | DA14580 | 0dBm | 3.4mA(DD ) | -93dBm| 3.7mA(DD ) | | NRF51822 | +4dBm |10.5mA 8mA (DD ) |-93dBm| 13mA 9.7mA(DD )| | NRF51422 | +4dBm |10.5mA 8mA (DD ) |-93dBm| 13mA 9.7mA(DD )| | BCM20737S | +8dBm | 8.2mA| -96dBm | 7.3mA| | CYBL10X6X |+3dBm |15.6mA |-89dBm| 16.4mA| | CC2640 |+5dBm|+5dBm\u6642 9.1mA 0dBm\u6642 6.1 mA|\u201397dBm|5.9mA| DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565","title":"4.1\u5bfe\u5fdcBLE\u30c1\u30c3\u30d7"},{"location":"d.chip/chipspec/#ble40","text":"| Chip\u540d | \u9001\u4fe1\u611f\u5ea6 | 0dBm\u6642 \u9001\u4fe1\u6642\u96fb\u6d41 | \u53d7\u4fe1\u611f\u5ea6 | \u53d7\u4fe1\u6642\u96fb\u6d41 | | -- | -- | --- | | CSR1010 | +9dBm | | -93dBm| | | CSR1011 | +9dBm | | -93dBm| | | CSR1012 | +9dBm | | -93dBm| | | BlueNGR | +8dBm | 8.2mA| -96dBm |7.3mA| | QN902X |+4dBm|9.9mA(DD ) |-95dBm -93dBm(DD ) | 9.25mA(DD*) | CC2540 | +6dBm | 24mA 15.8 mA(DD) | -96dBm| 19.6 mA 18.6 mA(DD) | | CC2541 | +6dBm | 18.2 mA 14.7mA(DD)| -96dBm| 17.9 mA 14.7mA(DD)| | TZ1000 ||-4dBm\u6642 6.3mA | | | | ML1705-002 | |9mA||9mA| | CC2564 |+12dBm||||| DD\u306f\u3001DC/DC\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc\u306e\u7565","title":"BLE4.0"},{"location":"d.chip/loralist/","text":"LoRa\u30c1\u30c3\u30d7 LoRa\u5bfe\u5fdc\u30c1\u30c3\u30d7 | Chip\u540d | Maker |Co-Proccesor| BLE Version | \u30e1\u30e2 | | -- | -- | -- | -- | | SX1262 | Semtech | ARM\u00ae Cortex\u2122 M4F(64 MHz) | LoRa | | LoRa\u5bfe\u5fdc\u30e2\u30b8\u30e5\u30fc\u30eb | Module\u540d | Maker | \u6280\u9069 | | -- | -- | -- | -- | | CMWX1ZZABZ-078 | Murata | \u53d6\u5f97\u6e08\u307f | | RAK811 | RAK Wireless |\u53d6\u5f97\u6e08\u307f | | ES920LR | \u682a\u5f0f\u4f1a\u793e\u30a4\u30fc\u30bc\u30eb | \u53d6\u5f97\u6e08\u307f | |TLM922S-P01A | Kiwitec | \u53d6\u5f97\u6e08\u307f | Block Diagram","title":"LoRa\u30c1\u30c3\u30d7"},{"location":"d.chip/loralist/#lora","text":"","title":"LoRa\u30c1\u30c3\u30d7"},{"location":"d.chip/loralist/#lora_1","text":"| Chip\u540d | Maker |Co-Proccesor| BLE Version | \u30e1\u30e2 | | -- | -- | -- | -- | | SX1262 | Semtech | ARM\u00ae Cortex\u2122 M4F(64 MHz) | LoRa | |","title":"LoRa\u5bfe\u5fdc\u30c1\u30c3\u30d7"},{"location":"d.chip/loralist/#lora_2","text":"| Module\u540d | Maker | \u6280\u9069 | | -- | -- | -- | -- | | CMWX1ZZABZ-078 | Murata | \u53d6\u5f97\u6e08\u307f | | RAK811 | RAK Wireless |\u53d6\u5f97\u6e08\u307f | | ES920LR | \u682a\u5f0f\u4f1a\u793e\u30a4\u30fc\u30bc\u30eb | \u53d6\u5f97\u6e08\u307f | |TLM922S-P01A | Kiwitec | \u53d6\u5f97\u6e08\u307f |","title":"LoRa\u5bfe\u5fdc\u30e2\u30b8\u30e5\u30fc\u30eb"},{"location":"d.chip/loralist/#block-diagram","text":"","title":"Block Diagram"},{"location":"d.chip/sensor/","text":"Sensor SoC\u30c1\u30c3\u30d7 SoC\u642d\u8f09Sensor Chip\u540d Maker Co-Proccesor ICM\u201030670 [InvenSense]](https://www.invensense.com/) ARM\u00ae Cortex\u2122 M0 6-axis","title":"Sensor SoC\u30c1\u30c3\u30d7"},{"location":"d.chip/sensor/#sensor-soc","text":"","title":"Sensor SoC\u30c1\u30c3\u30d7"},{"location":"d.chip/sensor/#socsensor","text":"Chip\u540d Maker Co-Proccesor ICM\u201030670 [InvenSense]](https://www.invensense.com/) ARM\u00ae Cortex\u2122 M0 6-axis","title":"SoC\u642d\u8f09Sensor"},{"location":"f.Bluetooth/bleregist/","text":"Bluetooth\u8a8d\u8a3c Bluetooth SIG\u306b\u3064\u3044\u3066 \u81ea\u793e\u88fd\u54c1\u304a\u3088\u3073\u30b5\u30fc\u30d3\u30b9\u306b Bluetooth \u6280\u8853\u3092\u4f7f\u7528\u3001\u81ea\u793e\u5546\u54c1\u3068\u30b5\u30fc\u30d3\u30b9\u306e\u63d0\u4f9b\u306b Bluetooth \u30d6\u30e9\u30f3\u30c9\u3092\u6d3b\u7528\u3001\u307e\u305f\u306f Bluetooth \u6280\u8853\u3092\u4f7f\u7528\u3059\u308b\u88fd\u54c1\u3092\u518d\u30d6\u30e9\u30f3\u30c9\u5316\u307e\u305f\u306f\u518d\u8ca9\u58f2\u3059\u308b\u4f01\u696d\u306f\u3001Bluetooth SIG\u3078\u52a0\u5165\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 Bluetooth SIG \u306e\u30a2\u30c0\u30d7\u30bf\u30fc\u30e1\u30f3\u30d0\u30fc\u3068\u3057\u3066\u3001\u76f4\u3061\u306b\u4ee5\u4e0b\u3092\u7372\u5f97\u3067\u304d\u308b Bluetooth \u7121\u7dda\u6280\u8853\u3092\u4f7f\u3063\u3066\u88fd\u54c1\u3092\u958b\u767a\u3059\u308b\u8a31\u53ef Bluetooth \u30ef\u30fc\u30c9\u30de\u30fc\u30af\u3068 Bluetooth Smart \u304a\u3088\u3073 Bluetooth Smart Ready \u30ed\u30b4\u3092\u8a8d\u8a3c\u3055\u308c\u3066\u767b\u9332\u3055\u308c\u305f\u88fd\u54c1\u3067\u4f7f\u7528\u3059\u308b\u8a31\u53ef \u591a\u7a2e\u591a\u69d8\u306a\u696d\u754c\u306e\u4f55\u5343\u793e\u3082\u306e Bluetooth SIG \u30e1\u30f3\u30d0\u30fc\u3068\u4ea4\u6d41\u3057\u5354\u529b\u3059\u308b\u6a5f\u4f1a \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u30b9\u30a4\u30fc\u30c8\u4f9b\u4e0e(\u8a66\u9a13\u30c4\u30fc\u30eb\u3084\u30c6\u30b9\u30c8\u4ed5\u69d8) Bluetooth\u8a8d\u8a3c Bluetooth\u642d\u8f09\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u88fd\u54c1\u5316\u3057\u305f\u5834\u5408\u3001\u8a8d\u8a3c\u767b\u9332(\u30c7\u30b6\u30a4\u30f3\u767b\u9332\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u767b\u9332)\u304c\u5fc5\u8981\u3002 \u58f2\u308a\u4e0a\u30521\u5104\u5186\u4ee5\u4e0a\u3060\u30688000\u30c9\u30eb\u3001\u8a2d\u7acb2\u5e74\u4ee5\u5185\u3067\u58f2\u308a\u4e0a\u30521\u5104\u5186\u4ee5\u4e0b\u3060\u3068\u30012500\u30c9\u30eb\u3067\u624b\u7d9a\u304d\u3067\u304d\u308b\u3002 Bluetooth\u95a2\u9023\u88fd\u54c1\u3092\u958b\u767a\u3092\u3059\u308b\u5834\u5408\u3001BT SIG \u306e\u30e1\u30f3\u30d0\u30fc\u30b7\u30c3\u30d7\u306b\u306a\u308b\u5fc5\u8981\u304c\u3042\u308b\u304c\u3001\u500b\u4eba\u3067\u306f\u767b\u9332\u304d\u306a\u3044\u306e\u3067\u3001\u6cd5\u4eba\u3082\u3057\u304f\u306f\u56e3\u4f53\u3067\u767b\u9332\u3059\u308b\u3002 Bluetooth\u8a8d\u8a3c\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u3001\u8a8d\u8a3c\u3055\u308c\u305f\u88fd\u54c1\u304c\u5e02\u5834\u306e\u671f\u5f85\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u5927\u304d\u306a\u4fe1\u983c\u3092\u30e1\u30f3\u30d0\u30fc\u306a\u3089\u3073\u306b\u6d88\u8cbb\u8005\u306b\u4e0e\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Bluetooth\u8a8d\u8a3c\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u53d6\u5f97\u3057\u306a\u3044\u3067Bluetooth\u5bfe\u5fdc\u88fd\u54c1\u3092\u88fd\u9020\u3057\u305f\u308a\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u53d6\u5f97\u3057\u306a\u3044\u3067Bluetooth\u30c8\u30ec\u30fc\u30c9\u30de\u30fc\u30af\u3092\u4f7f\u7528\u3059\u308b\u4f01\u696d\u3084\u500b\u4eba\u306b\u5bfe\u3057\u3066\u306f\u6cd5\u7684\u306a\u624b\u6bb5\u3092\u3068\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u30c8\u30ec\u30fc\u30c9\u30de\u30fc\u30af\u306e\u4f7f\u7528(Bluetooth SIG) https://www.bluetooth.org/docman/handlers/DownloadDoc.ashx?doc_id=67617 \u8a8d\u8a3c\u304a\u3088\u3073\u767b\u9332\u30d7\u30ed\u30bb\u30b9 \u8a8d\u8a3c\u304a\u3088\u3073\u767b\u9332\u6599\u91d1 \u4e00\u822c\u7684\u306b\u3001Bluetooth\u642d\u8f09\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u88fd\u54c1\u5316\u3057\u3001\u305d\u308c\u304c\u958b\u767a\u8005\u5411\u3051\u3067\u306f\u306a\u3044\u5834\u5408\u3001\u8a8d\u8a3c\u306b$8000\u304c\u304b\u304b\u308b\u3002\u58f2\u4e0a1\u5104\u5186\u4ee5\u4e0b\u3067\u8a2d\u7acb2\u5e74\u4ee5\u5185\u306e\u4f1a\u793e\u306b\u306f\u3001$2500\u3067\u30012\u56de\u307e\u3067\u8a8d\u8a3c\u304c\u53d7\u3051\u3089\u308c\u308b\u7279\u4f8b\u304c\u8a2d\u3051\u3089\u308c\u3066\u3044\u308b\u3002 \u5404\u793e\u30e2\u30b8\u30e5\u30fc\u30eb\u306eQDID(\u30c7\u30b6\u30a4\u30f3\u767b\u9332ID) Chip\u540d QDID nRF51822,nRF51422 66456 , 66455 , 66453 BLE113 46266 BLE112 35451 BLE121 57409 DA14580 56907 , 52690 , 52696 CSR1010 65475 CSR1011,CSR1012 31021 CC2541,CC2540 35040 , 23454 \u30e2\u30b8\u30e5\u30fc\u30eb\u305d\u306e\u3082\u306e\u3092\u7528\u3044\u308b\u5834\u5408\u306f\u3001\u4ed5\u69d8\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306eQDID\u3092\u7528\u3044\u3066\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u8a8d\u8a3c\u3092\u304a\u3053\u306a\u3046\u3002 FAQ iBeacon\u3092\u958b\u767a\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\uff1f \u306f\u3058\u3081\u3066\u767b\u9332\u3059\u308b\u5834\u5408\u306f\u3001\u30c7\u30b6\u30a4\u30f3\u767b\u9332\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u767b\u9332\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002Declaration Fee\u306f\u767a\u751f\u3059\u308b\u3002 BLE\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u305f\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3067\u3001\u30b1\u30fc\u30b9\u3092\u5909\u3048\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\uff1f \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u304c\u7570\u306a\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001Declaration Fee\u306f\u767a\u751f \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u304c\u540c\u3058\u3067\u3082\u3001\u65b0\u305f\u306bBT SIG\u6a19\u6e96\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u6d3e\u751f\u30e2\u30c7\u30eb\u3092\u30d7\u30ed\u30c9\u30c0\u30af\u30c8\u767b\u9332\u3059\u308b\u5834\u5408\u306f\u3001Declaration Fee\u306f\u767a\u751f \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u304c\u540c\u3058\u3067\u3001\u65b0\u305f\u306b\u72ec\u81ea\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408\u306f\u3001\u6d3e\u751f\u30e2\u30c7\u30eb\u3068\u3057\u3066\u3001Declaration Fee\u306f\u767a\u751f\u3057\u306a\u3044 \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u304c\u540c\u3058\u3067\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408\u3001\u6d3e\u751f\u30e2\u30c7\u30eb\u3068\u3057\u3066\u3001Declaration Fee\u306f\u767a\u751f\u3057\u306a\u3044 \u4e00\u5ea6\u3001\u8a8d\u8a3c\u767b\u9332\u3057\u305f\u30cf\u30fc\u30c9\u306eFirmware\u3092Update\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\uff1f Update\u5185\u5bb9\u306b\u3001\u65b0\u305f\u306bBT SIG\u6a19\u6e96\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u554f\u984c\u306a\u3044\u3002 Bluetooth\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u5834\u5408\u3001\u8a8d\u8a3c\u767b\u9332\u304c\u5fc5\u8981\u306b\u306a\u308b\u304b\uff1f Bluetooth\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u3001\u65b0\u3057\u3044\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u958b\u767a\u3059\u308b\u5834\u5408\u306f\u3001\u30c7\u30b6\u30a4\u30f3\u767b\u9332\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u767b\u9332\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002 \u7528\u8a9e\u96c6 \u7528\u8a9e \u610f\u5473 BTQF BT\u8a8d\u8a3c\u3092\u304a\u3053\u306a\u3063\u3066\u3044\u308bBT SIG\u8a8d\u5b9a\u306e\u6a5f\u95a2\u3002 BQB Bluetooth Qualification Body\u306e\u7565\u3002Bluetooth\u306e\u30ed\u30b4\u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0\u306e\u516c\u8a8d\u5224\u5b9a\u8005\u3002\u30ed\u30b4\u306e\u53d6\u5f97\u3092\u7533\u8acb\u3057\u3066\u304d\u305f\u30e1\u30fc\u30ab\u306b\u5bfe\u3057\u3066\uff0c\u305d\u306e\u5408\u5426\u3092\u5224\u5b9a\u3059\u308b\u5f79\u5272\u3092\u679c\u305f\u3059\u3002 \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c \u300c\u30c1\u30c3\u30d7\uff0b\u30b9\u30bf\u30c3\u30af\uff0bPCB\uff0f\u30a2\u30f3\u30c6\u30ca\u300d\u3042\u308b\u3044\u306f\u3001\u300c\uff08\u305d\u308c\u3089\u3092\u542b\u3093\u3060\uff09\u30e2\u30b8\u30e5\u30fc\u30eb\u300d\u306e\u8a8d\u8a3c \u30d7\u30ed\u30c0\u30af\u30c8\u8a8d\u8a3c \u8a8d\u8a3c\u3055\u308c\u305f\u30c7\u30b6\u30a4\u30f3\u3092\u5229\u7528\u3057\u305f\u6700\u7d42\u88fd\u54c1\u3068\u3057\u3066\u306e\u8a8d\u8a3c\u3002BT SIG\u306e\u6a19\u6e96\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u300c\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30fb\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u300d\u3068\u3057\u3066\u3001\u8a8d\u8a3c\u3059\u308b\uff08\u3053\u308c\u306f\u3001BT SIG\u3088\u308a\u7121\u6599\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308bPTS:Profiule Tunning Suite\u3092\u4f7f\u3063\u3066\u81ea\u5206\u3067\u30c6\u30b9\u30c8\u3057\u3066\u3001\u30ed\u30b0\u3092\u63d0\u51fa\u3059\u308b\u3002\u3000\u72ec\u81ea\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306f\uff08GATT\u30d9\u30fc\u30b9\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\uff09\u8a8d\u8a3c\u306f\u4e0d\u8981\u3002 QDID \u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u756a\u53f7\uff08\u30d7\u30ed\u30c0\u30af\u30c8\u767b\u9332\u306b\u5fc5\u8981\uff09 PTS Profile Tuning Suite\u306e\u7565\u3002\u6a19\u6e96\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u8a66\u9a13\u30d1\u30c3\u30b1\u30fc\u30b8 \u56fd\u5185\u306eBTQF\u8a8d\u5b9a\u6a5f\u95a2 UL \u30c6\u30e5\u30d5 \u30e9\u30a4\u30f3\u30e9\u30f3\u30c9 \u30b8\u30e3\u30d1\u30f3 \u30a2\u30ea\u30aa\u30f3\u682a\u5f0f\u4f1a\u793e \u592a\u967d\u8a98\u96fb Paltek \u53c2\u8003\u306b\u306a\u308b\u60c5\u5831 Understanding Bluetooth\u00ae Special Interest Group (SIG) Fees (Panasonic) Bluetooth Qualification Program\u201d\u3068\u65e5\u672c\u306e\u578b\u5f0f\u8a8d\u5b9a\u5236\u5ea6","title":"Bluetooth\u8a8d\u8a3c"},{"location":"f.Bluetooth/bleregist/#bluetooth","text":"","title":"Bluetooth\u8a8d\u8a3c"},{"location":"f.Bluetooth/bleregist/#bluetooth-sig","text":"\u81ea\u793e\u88fd\u54c1\u304a\u3088\u3073\u30b5\u30fc\u30d3\u30b9\u306b Bluetooth \u6280\u8853\u3092\u4f7f\u7528\u3001\u81ea\u793e\u5546\u54c1\u3068\u30b5\u30fc\u30d3\u30b9\u306e\u63d0\u4f9b\u306b Bluetooth \u30d6\u30e9\u30f3\u30c9\u3092\u6d3b\u7528\u3001\u307e\u305f\u306f Bluetooth \u6280\u8853\u3092\u4f7f\u7528\u3059\u308b\u88fd\u54c1\u3092\u518d\u30d6\u30e9\u30f3\u30c9\u5316\u307e\u305f\u306f\u518d\u8ca9\u58f2\u3059\u308b\u4f01\u696d\u306f\u3001Bluetooth SIG\u3078\u52a0\u5165\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 Bluetooth SIG \u306e\u30a2\u30c0\u30d7\u30bf\u30fc\u30e1\u30f3\u30d0\u30fc\u3068\u3057\u3066\u3001\u76f4\u3061\u306b\u4ee5\u4e0b\u3092\u7372\u5f97\u3067\u304d\u308b Bluetooth \u7121\u7dda\u6280\u8853\u3092\u4f7f\u3063\u3066\u88fd\u54c1\u3092\u958b\u767a\u3059\u308b\u8a31\u53ef Bluetooth \u30ef\u30fc\u30c9\u30de\u30fc\u30af\u3068 Bluetooth Smart \u304a\u3088\u3073 Bluetooth Smart Ready \u30ed\u30b4\u3092\u8a8d\u8a3c\u3055\u308c\u3066\u767b\u9332\u3055\u308c\u305f\u88fd\u54c1\u3067\u4f7f\u7528\u3059\u308b\u8a31\u53ef \u591a\u7a2e\u591a\u69d8\u306a\u696d\u754c\u306e\u4f55\u5343\u793e\u3082\u306e Bluetooth SIG \u30e1\u30f3\u30d0\u30fc\u3068\u4ea4\u6d41\u3057\u5354\u529b\u3059\u308b\u6a5f\u4f1a \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u30b9\u30a4\u30fc\u30c8\u4f9b\u4e0e(\u8a66\u9a13\u30c4\u30fc\u30eb\u3084\u30c6\u30b9\u30c8\u4ed5\u69d8)","title":"Bluetooth SIG\u306b\u3064\u3044\u3066"},{"location":"f.Bluetooth/bleregist/#bluetooth_1","text":"Bluetooth\u642d\u8f09\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u88fd\u54c1\u5316\u3057\u305f\u5834\u5408\u3001\u8a8d\u8a3c\u767b\u9332(\u30c7\u30b6\u30a4\u30f3\u767b\u9332\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u767b\u9332)\u304c\u5fc5\u8981\u3002 \u58f2\u308a\u4e0a\u30521\u5104\u5186\u4ee5\u4e0a\u3060\u30688000\u30c9\u30eb\u3001\u8a2d\u7acb2\u5e74\u4ee5\u5185\u3067\u58f2\u308a\u4e0a\u30521\u5104\u5186\u4ee5\u4e0b\u3060\u3068\u30012500\u30c9\u30eb\u3067\u624b\u7d9a\u304d\u3067\u304d\u308b\u3002 Bluetooth\u95a2\u9023\u88fd\u54c1\u3092\u958b\u767a\u3092\u3059\u308b\u5834\u5408\u3001BT SIG \u306e\u30e1\u30f3\u30d0\u30fc\u30b7\u30c3\u30d7\u306b\u306a\u308b\u5fc5\u8981\u304c\u3042\u308b\u304c\u3001\u500b\u4eba\u3067\u306f\u767b\u9332\u304d\u306a\u3044\u306e\u3067\u3001\u6cd5\u4eba\u3082\u3057\u304f\u306f\u56e3\u4f53\u3067\u767b\u9332\u3059\u308b\u3002 Bluetooth\u8a8d\u8a3c\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3088\u3063\u3066\u3001\u8a8d\u8a3c\u3055\u308c\u305f\u88fd\u54c1\u304c\u5e02\u5834\u306e\u671f\u5f85\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u5927\u304d\u306a\u4fe1\u983c\u3092\u30e1\u30f3\u30d0\u30fc\u306a\u3089\u3073\u306b\u6d88\u8cbb\u8005\u306b\u4e0e\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Bluetooth\u8a8d\u8a3c\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u53d6\u5f97\u3057\u306a\u3044\u3067Bluetooth\u5bfe\u5fdc\u88fd\u54c1\u3092\u88fd\u9020\u3057\u305f\u308a\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u53d6\u5f97\u3057\u306a\u3044\u3067Bluetooth\u30c8\u30ec\u30fc\u30c9\u30de\u30fc\u30af\u3092\u4f7f\u7528\u3059\u308b\u4f01\u696d\u3084\u500b\u4eba\u306b\u5bfe\u3057\u3066\u306f\u6cd5\u7684\u306a\u624b\u6bb5\u3092\u3068\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u30c8\u30ec\u30fc\u30c9\u30de\u30fc\u30af\u306e\u4f7f\u7528(Bluetooth SIG) https://www.bluetooth.org/docman/handlers/DownloadDoc.ashx?doc_id=67617 \u8a8d\u8a3c\u304a\u3088\u3073\u767b\u9332\u30d7\u30ed\u30bb\u30b9 \u8a8d\u8a3c\u304a\u3088\u3073\u767b\u9332\u6599\u91d1 \u4e00\u822c\u7684\u306b\u3001Bluetooth\u642d\u8f09\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u88fd\u54c1\u5316\u3057\u3001\u305d\u308c\u304c\u958b\u767a\u8005\u5411\u3051\u3067\u306f\u306a\u3044\u5834\u5408\u3001\u8a8d\u8a3c\u306b$8000\u304c\u304b\u304b\u308b\u3002\u58f2\u4e0a1\u5104\u5186\u4ee5\u4e0b\u3067\u8a2d\u7acb2\u5e74\u4ee5\u5185\u306e\u4f1a\u793e\u306b\u306f\u3001$2500\u3067\u30012\u56de\u307e\u3067\u8a8d\u8a3c\u304c\u53d7\u3051\u3089\u308c\u308b\u7279\u4f8b\u304c\u8a2d\u3051\u3089\u308c\u3066\u3044\u308b\u3002","title":"Bluetooth\u8a8d\u8a3c"},{"location":"f.Bluetooth/bleregist/#qdidid","text":"Chip\u540d QDID nRF51822,nRF51422 66456 , 66455 , 66453 BLE113 46266 BLE112 35451 BLE121 57409 DA14580 56907 , 52690 , 52696 CSR1010 65475 CSR1011,CSR1012 31021 CC2541,CC2540 35040 , 23454 \u30e2\u30b8\u30e5\u30fc\u30eb\u305d\u306e\u3082\u306e\u3092\u7528\u3044\u308b\u5834\u5408\u306f\u3001\u4ed5\u69d8\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306eQDID\u3092\u7528\u3044\u3066\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u8a8d\u8a3c\u3092\u304a\u3053\u306a\u3046\u3002","title":"\u5404\u793e\u30e2\u30b8\u30e5\u30fc\u30eb\u306eQDID(\u30c7\u30b6\u30a4\u30f3\u767b\u9332ID)"},{"location":"f.Bluetooth/bleregist/#faq","text":"","title":"FAQ"},{"location":"f.Bluetooth/bleregist/#ibeacon","text":"\u306f\u3058\u3081\u3066\u767b\u9332\u3059\u308b\u5834\u5408\u306f\u3001\u30c7\u30b6\u30a4\u30f3\u767b\u9332\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u767b\u9332\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002Declaration Fee\u306f\u767a\u751f\u3059\u308b\u3002","title":"iBeacon\u3092\u958b\u767a\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\uff1f"},{"location":"f.Bluetooth/bleregist/#ble","text":"\u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u304c\u7570\u306a\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001Declaration Fee\u306f\u767a\u751f \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u304c\u540c\u3058\u3067\u3082\u3001\u65b0\u305f\u306bBT SIG\u6a19\u6e96\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u6d3e\u751f\u30e2\u30c7\u30eb\u3092\u30d7\u30ed\u30c9\u30c0\u30af\u30c8\u767b\u9332\u3059\u308b\u5834\u5408\u306f\u3001Declaration Fee\u306f\u767a\u751f \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u304c\u540c\u3058\u3067\u3001\u65b0\u305f\u306b\u72ec\u81ea\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408\u306f\u3001\u6d3e\u751f\u30e2\u30c7\u30eb\u3068\u3057\u3066\u3001Declaration Fee\u306f\u767a\u751f\u3057\u306a\u3044 \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u304c\u540c\u3058\u3067\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408\u3001\u6d3e\u751f\u30e2\u30c7\u30eb\u3068\u3057\u3066\u3001Declaration Fee\u306f\u767a\u751f\u3057\u306a\u3044","title":"BLE\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u305f\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3067\u3001\u30b1\u30fc\u30b9\u3092\u5909\u3048\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\uff1f"},{"location":"f.Bluetooth/bleregist/#firmwareupdate","text":"Update\u5185\u5bb9\u306b\u3001\u65b0\u305f\u306bBT SIG\u6a19\u6e96\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u554f\u984c\u306a\u3044\u3002","title":"\u4e00\u5ea6\u3001\u8a8d\u8a3c\u767b\u9332\u3057\u305f\u30cf\u30fc\u30c9\u306eFirmware\u3092Update\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\uff1f"},{"location":"f.Bluetooth/bleregist/#bluetooth_2","text":"Bluetooth\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u3001\u65b0\u3057\u3044\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u958b\u767a\u3059\u308b\u5834\u5408\u306f\u3001\u30c7\u30b6\u30a4\u30f3\u767b\u9332\u3001\u30d7\u30ed\u30c0\u30af\u30c8\u767b\u9332\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002","title":"Bluetooth\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u5834\u5408\u3001\u8a8d\u8a3c\u767b\u9332\u304c\u5fc5\u8981\u306b\u306a\u308b\u304b\uff1f"},{"location":"f.Bluetooth/bleregist/#_1","text":"\u7528\u8a9e \u610f\u5473 BTQF BT\u8a8d\u8a3c\u3092\u304a\u3053\u306a\u3063\u3066\u3044\u308bBT SIG\u8a8d\u5b9a\u306e\u6a5f\u95a2\u3002 BQB Bluetooth Qualification Body\u306e\u7565\u3002Bluetooth\u306e\u30ed\u30b4\u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0\u306e\u516c\u8a8d\u5224\u5b9a\u8005\u3002\u30ed\u30b4\u306e\u53d6\u5f97\u3092\u7533\u8acb\u3057\u3066\u304d\u305f\u30e1\u30fc\u30ab\u306b\u5bfe\u3057\u3066\uff0c\u305d\u306e\u5408\u5426\u3092\u5224\u5b9a\u3059\u308b\u5f79\u5272\u3092\u679c\u305f\u3059\u3002 \u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c \u300c\u30c1\u30c3\u30d7\uff0b\u30b9\u30bf\u30c3\u30af\uff0bPCB\uff0f\u30a2\u30f3\u30c6\u30ca\u300d\u3042\u308b\u3044\u306f\u3001\u300c\uff08\u305d\u308c\u3089\u3092\u542b\u3093\u3060\uff09\u30e2\u30b8\u30e5\u30fc\u30eb\u300d\u306e\u8a8d\u8a3c \u30d7\u30ed\u30c0\u30af\u30c8\u8a8d\u8a3c \u8a8d\u8a3c\u3055\u308c\u305f\u30c7\u30b6\u30a4\u30f3\u3092\u5229\u7528\u3057\u305f\u6700\u7d42\u88fd\u54c1\u3068\u3057\u3066\u306e\u8a8d\u8a3c\u3002BT SIG\u306e\u6a19\u6e96\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u300c\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30fb\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u300d\u3068\u3057\u3066\u3001\u8a8d\u8a3c\u3059\u308b\uff08\u3053\u308c\u306f\u3001BT SIG\u3088\u308a\u7121\u6599\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308bPTS:Profiule Tunning Suite\u3092\u4f7f\u3063\u3066\u81ea\u5206\u3067\u30c6\u30b9\u30c8\u3057\u3066\u3001\u30ed\u30b0\u3092\u63d0\u51fa\u3059\u308b\u3002\u3000\u72ec\u81ea\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306f\uff08GATT\u30d9\u30fc\u30b9\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\uff09\u8a8d\u8a3c\u306f\u4e0d\u8981\u3002 QDID \u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c7\u30b6\u30a4\u30f3\u8a8d\u8a3c\u756a\u53f7\uff08\u30d7\u30ed\u30c0\u30af\u30c8\u767b\u9332\u306b\u5fc5\u8981\uff09 PTS Profile Tuning Suite\u306e\u7565\u3002\u6a19\u6e96\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u8a66\u9a13\u30d1\u30c3\u30b1\u30fc\u30b8","title":"\u7528\u8a9e\u96c6"},{"location":"f.Bluetooth/bleregist/#btqf","text":"UL \u30c6\u30e5\u30d5 \u30e9\u30a4\u30f3\u30e9\u30f3\u30c9 \u30b8\u30e3\u30d1\u30f3 \u30a2\u30ea\u30aa\u30f3\u682a\u5f0f\u4f1a\u793e \u592a\u967d\u8a98\u96fb Paltek","title":"\u56fd\u5185\u306eBTQF\u8a8d\u5b9a\u6a5f\u95a2"},{"location":"f.Bluetooth/bleregist/#_2","text":"Understanding Bluetooth\u00ae Special Interest Group (SIG) Fees (Panasonic) Bluetooth Qualification Program\u201d\u3068\u65e5\u672c\u306e\u578b\u5f0f\u8a8d\u5b9a\u5236\u5ea6","title":"\u53c2\u8003\u306b\u306a\u308b\u60c5\u5831"}]}